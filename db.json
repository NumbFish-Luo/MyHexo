{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/kaze/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","path":"js/lib/busuanzi.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lozad.min.js","path":"js/lib/lozad.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","path":"js/lib/prism/prism-coy.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","path":"js/lib/prism/prism-dark.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","path":"js/lib/prism/prism-funky.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","path":"js/lib/prism/prism-line-numbers.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","path":"js/lib/prism/prism-okaidia.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","path":"js/lib/prism/prism-solarizedlight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","path":"js/lib/prism/prism-tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","path":"js/lib/prism/prism-twilight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","path":"js/lib/prism/prism.min.css","modified":0,"renderable":1},{"_id":"source/img/Aranya.jpg","path":"img/Aranya.jpg","modified":0,"renderable":0},{"_id":"source/img/Barge-Haulers-on-the-Volga.jpg","path":"img/Barge-Haulers-on-the-Volga.jpg","modified":0,"renderable":0},{"_id":"source/img/C.jpg","path":"img/C.jpg","modified":0,"renderable":0},{"_id":"source/img/CustomPostProcessing.png","path":"img/CustomPostProcessing.png","modified":0,"renderable":0},{"_id":"source/img/Dictionary.jpg","path":"img/Dictionary.jpg","modified":0,"renderable":0},{"_id":"source/img/ECG.jpg","path":"img/ECG.jpg","modified":0,"renderable":0},{"_id":"source/img/ECG_regular.jpg","path":"img/ECG_regular.jpg","modified":0,"renderable":0},{"_id":"source/img/Fall.jpg","path":"img/Fall.jpg","modified":0,"renderable":0},{"_id":"source/img/FantasyWorld.jpg","path":"img/FantasyWorld.jpg","modified":0,"renderable":0},{"_id":"source/img/Head.png","path":"img/Head.png","modified":0,"renderable":0},{"_id":"source/img/LightOrDark.gif","path":"img/LightOrDark.gif","modified":0,"renderable":0},{"_id":"source/img/Moon.jpg","path":"img/Moon.jpg","modified":0,"renderable":0},{"_id":"source/img/PinkCloud.jpg","path":"img/PinkCloud.jpg","modified":0,"renderable":0},{"_id":"source/img/QQQR.jpg","path":"img/QQQR.jpg","modified":0,"renderable":0},{"_id":"source/img/RandomText.jpg","path":"img/RandomText.jpg","modified":0,"renderable":0},{"_id":"source/img/Resume.png","path":"img/Resume.png","modified":0,"renderable":0},{"_id":"source/img/The-Starry-Night.png","path":"img/The-Starry-Night.png","modified":0,"renderable":0},{"_id":"source/img/WechatQR.jpg","path":"img/WechatQR.jpg","modified":0,"renderable":0},{"_id":"source/img/2021CGJ/CGJTitle.jpg","path":"img/2021CGJ/CGJTitle.jpg","modified":0,"renderable":0},{"_id":"source/img/2021CGJ/GameTitle.png","path":"img/2021CGJ/GameTitle.png","modified":0,"renderable":0},{"_id":"source/img/2021CGJ/Pic_1.jpg","path":"img/2021CGJ/Pic_1.jpg","modified":0,"renderable":0},{"_id":"source/img/2021CGJ/Pic_2.jpg","path":"img/2021CGJ/Pic_2.jpg","modified":0,"renderable":0},{"_id":"source/img/2021CGJ/Screenshot_1.png","path":"img/2021CGJ/Screenshot_1.png","modified":0,"renderable":0},{"_id":"source/img/2021CGJ/Screenshot_2.png","path":"img/2021CGJ/Screenshot_2.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/AED.png","path":"img/2021YiYouWeiJin/AED.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/CanYouKeepUpWithMySpeed.png","path":"img/2021YiYouWeiJin/CanYouKeepUpWithMySpeed.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/ECG.gif","path":"img/2021YiYouWeiJin/ECG.gif","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/PsStopWork_1.png","path":"img/2021YiYouWeiJin/PsStopWork_1.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/PsStopWork_2.png","path":"img/2021YiYouWeiJin/PsStopWork_2.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/SplitWatermelon.png","path":"img/2021YiYouWeiJin/SplitWatermelon.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/YouCantDoItCompletely_1.png","path":"img/2021YiYouWeiJin/YouCantDoItCompletely_1.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/YouCantDoItCompletely_2.png","path":"img/2021YiYouWeiJin/YouCantDoItCompletely_2.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/drink.jpg","path":"img/2021YiYouWeiJin/drink.jpg","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/hungry_1.png","path":"img/2021YiYouWeiJin/hungry_1.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/hungry_2.png","path":"img/2021YiYouWeiJin/hungry_2.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/screenshot.jpg","path":"img/2021YiYouWeiJin/screenshot.jpg","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/shine_1.png","path":"img/2021YiYouWeiJin/shine_1.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/shine_2.png","path":"img/2021YiYouWeiJin/shine_2.png","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/sugoi.jpg","path":"img/2021YiYouWeiJin/sugoi.jpg","modified":0,"renderable":0},{"_id":"source/img/2021YiYouWeiJin/title.jpg","path":"img/2021YiYouWeiJin/title.jpg","modified":0,"renderable":0},{"_id":"source/img/DimensionalCut/DimensionalCut.gif","path":"img/DimensionalCut/DimensionalCut.gif","modified":0,"renderable":0},{"_id":"source/img/DimensionalCut/DimensionalCut.png","path":"img/DimensionalCut/DimensionalCut.png","modified":0,"renderable":0},{"_id":"source/img/Master/0.jpg","path":"img/Master/0.jpg","modified":0,"renderable":0},{"_id":"source/img/Particle/Explosion.gif","path":"img/Particle/Explosion.gif","modified":0,"renderable":0},{"_id":"source/img/Particle/FireBall.gif","path":"img/Particle/FireBall.gif","modified":0,"renderable":0},{"_id":"source/img/Particle/FireBallPrefab.png","path":"img/Particle/FireBallPrefab.png","modified":0,"renderable":0},{"_id":"source/img/Particle/FireParticleSprite.png","path":"img/Particle/FireParticleSprite.png","modified":0,"renderable":0},{"_id":"source/img/Particle/LensFlare.png","path":"img/Particle/LensFlare.png","modified":0,"renderable":0},{"_id":"source/img/Particle/MagicMissile.gif","path":"img/Particle/MagicMissile.gif","modified":0,"renderable":0},{"_id":"source/img/Particle/MagicMissileParticleSprite.png","path":"img/Particle/MagicMissileParticleSprite.png","modified":0,"renderable":0},{"_id":"source/img/Particle/MagicMissilePrefab.png","path":"img/Particle/MagicMissilePrefab.png","modified":0,"renderable":0},{"_id":"source/img/Particle/Title.png","path":"img/Particle/Title.png","modified":0,"renderable":0},{"_id":"source/img/Particle/Torch.gif","path":"img/Particle/Torch.gif","modified":0,"renderable":0},{"_id":"source/img/Particle/TorchPrefab.png","path":"img/Particle/TorchPrefab.png","modified":0,"renderable":0},{"_id":"source/img/Uml/Singleton.JPG","path":"img/Uml/Singleton.JPG","modified":0,"renderable":0},{"_id":"source/img/Water/Water.gif","path":"img/Water/Water.gif","modified":0,"renderable":0},{"_id":"source/img/Water/Noise.png","path":"img/Water/Noise.png","modified":0,"renderable":0},{"_id":"source/img/Water/Water.png","path":"img/Water/Water.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/2021YiYouWeiJin.md","hash":"9b28b9f30776683d8c49eb4b29b266bfbe31479a","modified":1633164564759},{"_id":"source/_posts/DimensionalCut.md","hash":"9e9b97880b190f6cf7013be9fb5e7b8e760b4e18","modified":1645944273554},{"_id":"source/_posts/2021CGJ-Shanghai-Jing-an.md","hash":"26fce8a29e03d6c0e77ec0478b8ca4dbff8b5dc9","modified":1633163207962},{"_id":"source/_posts/CSharp-GenericDictionary.md","hash":"4ea73cbe6b3949ed33c735bf113ba14b3135b594","modified":1633192482939},{"_id":"source/_posts/LAN.md","hash":"eb363292ecef20e767adec31154d00ec63ded83c","modified":1633516648786},{"_id":"source/_posts/Particle.md","hash":"d7f1ccf05505fc55be739ce61439717e36976e37","modified":1645533473712},{"_id":"source/_posts/Recommendations.md","hash":"be1f962ef753f9a83dc0b966e4a0aae64ff84d55","modified":1633163207967},{"_id":"source/_posts/C-Template.md","hash":"2a69e47f96141f46d349df76c72cf4877de93f57","modified":1633490300592},{"_id":"source/_posts/Resume.md","hash":"8250f9365a6bc57843743d0f3ed01f29f585dad2","modified":1645521603635},{"_id":"source/_posts/Water.md","hash":"9c1d60793cc2f9b581e7a1cb70c2bcc2ab255c09","modified":1645684111564},{"_id":"source/_posts/ECG-Shader.md","hash":"eeb98b5e0cb3f00efae66625da5803e88c59f539","modified":1633164945954},{"_id":"source/about/index.md","hash":"516de5f01e164c2e714b0d80d7de3f386a9c84ce","modified":1627301250397},{"_id":"source/_posts/URPCustomPostEffect.md","hash":"2d36ddb46b508ea34bd8b1c77895c89eae8d1b1e","modified":1645761897090},{"_id":"source/img/C.jpg","hash":"64dc87acf471c7f614f464bcb3c1d17059d2d905","modified":1633025571151},{"_id":"source/img/ECG_regular.jpg","hash":"f420e3ea59b88470907bd1dff88bc59aa935e616","modified":1633014330268},{"_id":"source/img/LightOrDark.gif","hash":"888063aebee4cbe2854e31a75e26795e5e184c79","modified":1633004740869},{"_id":"source/img/Head.png","hash":"7a999b3bc74191ef8cf17598ad27c0798bb35edd","modified":1627298509046},{"_id":"source/img/PinkCloud.jpg","hash":"c55877cc872c834588a77932de47e8a60ad0c6a9","modified":1627627426703},{"_id":"source/img/WechatQR.jpg","hash":"83ad8e16d3c0e308210c438d707e44225bcd489f","modified":1627414669748},{"_id":"source/img/2021YiYouWeiJin/AED.png","hash":"c3ba2dd5baa0f25576a83478ffd03f14d1995b2a","modified":1628454763483},{"_id":"source/img/2021YiYouWeiJin/sugoi.jpg","hash":"86fba6e3d6d95a6a07ff2c48f3790348a50e1858","modified":1633003063341},{"_id":"source/img/Particle/FireBallPrefab.png","hash":"413558b06a6502c7a43deadfcec04f46e5224402","modified":1645526558470},{"_id":"source/img/Particle/FireParticleSprite.png","hash":"ef9ca779517655e2166fe3e36b45b835ac14191d","modified":1644320201614},{"_id":"source/img/Particle/LensFlare.png","hash":"924b7c94e68302775b96ef9fdfac63bd880b7313","modified":1644319788504},{"_id":"source/img/Particle/MagicMissileParticleSprite.png","hash":"4f12d3890e324b38eccf145c36e1f18585a9717b","modified":1644328118785},{"_id":"source/img/Particle/MagicMissilePrefab.png","hash":"8064ec50c51495f9b3b92a5e0216ccc5f2e55666","modified":1645529196117},{"_id":"source/img/Uml/Singleton.JPG","hash":"48d28f3711f396ed08ec127d12e508fc30cdf78e","modified":1633523208559},{"_id":"source/img/Particle/TorchPrefab.png","hash":"eac483acbaee2680f483009b119cfc74c0ebdd4a","modified":1645530327900},{"_id":"source/img/Dictionary.jpg","hash":"f9a05d4b45a9590c78b30f06d231cb503a764dba","modified":1633113879694},{"_id":"source/img/ECG.jpg","hash":"6396b3d2135a195ba86947d95b6a31ebbed0d0ff","modified":1633013295501},{"_id":"source/img/Fall.jpg","hash":"8f469814cec6c030d9d8cda67dc6b20d9a4c9aeb","modified":1627908914273},{"_id":"source/img/2021YiYouWeiJin/drink.jpg","hash":"e0f0b90da1d9d55bbda3cf3287b79ac971e6c5d3","modified":1633002982197},{"_id":"source/img/CustomPostProcessing.png","hash":"b6b0f62f01530045cced20b1494d58ea15a966b5","modified":1645760558613},{"_id":"source/img/Moon.jpg","hash":"48c335854675dade16abbf8ced6a92b8360b0571","modified":1627650717263},{"_id":"source/img/QQQR.jpg","hash":"79847ddf316be3cdfc6fcef6d9472b64bbcbe53d","modified":1627468553510},{"_id":"source/img/RandomText.jpg","hash":"a721ab3575b62c1ac779f7bf1b4df8150ffa3532","modified":1633165784530},{"_id":"source/img/2021CGJ/Screenshot_2.png","hash":"42d3afe9c7c91c6fbc9dc3b77a07e60a33a009e1","modified":1627461665209},{"_id":"source/img/2021YiYouWeiJin/SplitWatermelon.png","hash":"06fa80983b50f301b3940bb9f6305c57b8ea6b7f","modified":1633003023254},{"_id":"source/img/DimensionalCut/DimensionalCut.png","hash":"098e0e7df617864d2e9d76143bcace5562c30452","modified":1645538496736},{"_id":"source/img/Resume.png","hash":"c5fb2b82bac185f85f761a1b75ffd0a6a3250ae9","modified":1627411617308},{"_id":"source/img/2021CGJ/Pic_1.jpg","hash":"3d2c8abd1f913c8840526c07bf0ff10a79ec6c9a","modified":1625814321604},{"_id":"source/img/2021YiYouWeiJin/YouCantDoItCompletely_1.png","hash":"a1b64a2d0ea033771716673e17b6ec8a9c8c3b0b","modified":1633003010485},{"_id":"source/img/Water/Water.png","hash":"f9e32f5d36b43e16c0c6b38df5737e22352d0ddd","modified":1645680281991},{"_id":"source/img/2021CGJ/CGJTitle.jpg","hash":"058555570d8429a9352e77c261b02c9838f6b03c","modified":1625821349772},{"_id":"source/img/2021YiYouWeiJin/PsStopWork_1.png","hash":"6457ff4102f52eb7f17b1aef41bfa641d2c72220","modified":1633002892228},{"_id":"source/img/FantasyWorld.jpg","hash":"5d05a112b72774df96bf9f4d318c9dac985a196c","modified":1627647747202},{"_id":"source/img/2021YiYouWeiJin/title.jpg","hash":"c8cec9846085a2a706da394f429d488e182b7167","modified":1632998988228},{"_id":"source/img/Aranya.jpg","hash":"4c9ce54fa9418a4934f2628e4bd2d470850bc14a","modified":1627470985783},{"_id":"source/img/2021YiYouWeiJin/hungry_1.png","hash":"e68c9f8c6d9ca7d2e18379e79bc20b3070fb14cb","modified":1633002933894},{"_id":"source/img/Master/0.jpg","hash":"1b2a4f68cc85846ac9ba01cddee4ddd5733b79c6","modified":1633006287169},{"_id":"themes/kaze/LICENSE","hash":"f02809429223af6943d9ce48bcf9573c8bcd8d74","modified":499162500000},{"_id":"themes/kaze/.eslintrc.json","hash":"aed952f6134bd0e99472a46abe8a0770d50c7f0e","modified":499162500000},{"_id":"themes/kaze/README.md","hash":"8e910879f3216ff2a78e423ca2e3f9519bdd1c91","modified":499162500000},{"_id":"themes/kaze/README_zh.md","hash":"af0b98a3a8245b487df98d808c9b616f88d4776f","modified":499162500000},{"_id":"themes/kaze/package.json","hash":"8334fa5c33ec92ff91a71180110ab2b5810c9e77","modified":1627296350944},{"_id":"themes/kaze/index.js","hash":"37e564126e64000f0ed7b5af7f78b5992326667a","modified":499162500000},{"_id":"themes/kaze/_config.yml","hash":"e44360027b29c929acd23be5d2a64fc0b23486b9","modified":1645941578733},{"_id":"themes/kaze/layout/about.ejs","hash":"31db8400937759fb20a7fdc4f990f9f78405095f","modified":499162500000},{"_id":"themes/kaze/layout/category.ejs","hash":"fe5333d39124a72d0b4db2f1aff6a79345e21d12","modified":499162500000},{"_id":"themes/kaze/layout/archive.ejs","hash":"a7aff15e7f2d5815db8b71f2b82e76ec591a3e79","modified":499162500000},{"_id":"themes/kaze/layout/categories.ejs","hash":"5e6f54926101c3300d9be7eb2ba43eff9f39f14d","modified":499162500000},{"_id":"themes/kaze/layout/index.ejs","hash":"4855e171ba9066f060e729271b3b27415a75e39b","modified":499162500000},{"_id":"themes/kaze/layout/links.ejs","hash":"ab593eef53294e0b4323a41bc88b71c7ae90f74e","modified":499162500000},{"_id":"themes/kaze/layout/tag.ejs","hash":"c409545e32ebf7f38ca65c39bf8e220176c17e23","modified":499162500000},{"_id":"themes/kaze/languages/en.yml","hash":"35c63f2535a519654d67d640a4dbe5737fe0c6ed","modified":499162500000},{"_id":"themes/kaze/layout/tags.ejs","hash":"fda73c9a2b0f96acc7af8d251d2f44de034340d7","modified":499162500000},{"_id":"themes/kaze/languages/zh-CN.yml","hash":"bbaa7db92bf43dd16e3299266bff91ef7ebcfb6d","modified":499162500000},{"_id":"themes/kaze/lib/lazyload.js","hash":"4d261bc1285fde791d77f3ed1b4369a0cd27c9a5","modified":499162500000},{"_id":"themes/kaze/scripts/index.js","hash":"38f5bceb479238c1b23da77e3d612cf8d3af0987","modified":499162500000},{"_id":"themes/kaze/lib/mergeConfig.js","hash":"a14df30e68accd8c074bf8e2e1d35b610152cc55","modified":499162500000},{"_id":"themes/kaze/gulpfile.js","hash":"625872400c48d03fc0615c34f69747f8aacc61b2","modified":499162500000},{"_id":"themes/kaze/.github/workflows/release.yml","hash":"ac436597c6831e9d346aeb9e5cf54b7ec6476aba","modified":499162500000},{"_id":"themes/kaze/layout/layout.ejs","hash":"85f97189c0a8dafb6291a0f771d85f44becff165","modified":499162500000},{"_id":"themes/kaze/layout/_partial/author.ejs","hash":"f199de30fa5333bfb16aa9a635a6179446512b76","modified":499162500000},{"_id":"themes/kaze/layout/post.ejs","hash":"181354f5a1c395b7287cd5b0c2998f10a6461d26","modified":499162500000},{"_id":"themes/kaze/layout/_partial/archives.ejs","hash":"4822c0ca716866292339e093b6dbcc266b48a8eb","modified":499162500000},{"_id":"themes/kaze/layout/_partial/left-aside.ejs","hash":"d775e8de828c6fc7fa7dfe3af07e0a6dd17f10b8","modified":499162500000},{"_id":"themes/kaze/layout/_partial/nav.ejs","hash":"07e13a659dae1e357bede2bbbf5d223013aee4c3","modified":499162500000},{"_id":"themes/kaze/layout/_partial/pagination.ejs","hash":"7fb58bb1acad33a94359503ffcf63cd2e11e014b","modified":499162500000},{"_id":"themes/kaze/layout/_partial/recent-post.ejs","hash":"f55b4a2ab7c85ec8e8883b9f462828fd4f9b6088","modified":499162500000},{"_id":"themes/kaze/layout/_partial/right-aside.ejs","hash":"4d91d528f08a9ccbba6de40df3aabf2287eb89c4","modified":1627483173830},{"_id":"themes/kaze/layout/_partial/scrollbutton.ejs","hash":"33f8590ab3d9e48ec212fee97240534f53542fee","modified":499162500000},{"_id":"themes/kaze/layout/_partial/toc-card.ejs","hash":"b4fe4cbd158773da4d56092487794ef151271e47","modified":499162500000},{"_id":"themes/kaze/layout/_partial/tags.ejs","hash":"15300108efb9df04f3c72478d5d382bdc36e3768","modified":499162500000},{"_id":"themes/kaze/lib/minify/minifyCSS.js","hash":"8e7d37437fb90e1c597ff5de4583108c69f988b2","modified":499162500000},{"_id":"themes/kaze/lib/minify/minifyHTML.js","hash":"9fea2e1cf2b3b0a66091ae2d7c029b8b64659329","modified":499162500000},{"_id":"themes/kaze/scripts/generators/pagerouter.js","hash":"ff9ad130a6b55b73d66d13233d2acb078a416bb8","modified":499162500000},{"_id":"themes/kaze/scripts/highlight/replace.js","hash":"38879d7e4bafd016a0a3cd86df65233eb2d0f92e","modified":499162500000},{"_id":"themes/kaze/scripts/helpers/count.js","hash":"a2ecc582e9f4489726bb9668b51b682f8129e30e","modified":499162500000},{"_id":"themes/kaze/scripts/helpers/load.js","hash":"71efbb02d50b323f642a1594b326d78e117ad899","modified":499162500000},{"_id":"themes/kaze/scripts/tag/note.js","hash":"a04695ac1c623544a554b083b2bb112caaeb571f","modified":499162500000},{"_id":"themes/kaze/source/css/main.styl","hash":"8b602110e32636076754d9e26555f4c924dfa8bb","modified":499162500000},{"_id":"themes/kaze/layout/_partial/footer.ejs","hash":"f7fddf0eb249cc4329214a81444a458480bd79a5","modified":499162500000},{"_id":"themes/kaze/source/js/main.js","hash":"5c6567d74baf9c31051f3da00a06b8195dee9160","modified":499162500000},{"_id":"themes/kaze/lib/minify/minifyJS.js","hash":"77b9317ddd5a127a3c39e0fa03934056ac296be9","modified":499162500000},{"_id":"themes/kaze/source/css/_base/color.styl","hash":"377909c1810dcefa0f1833725e8657f57c7bff51","modified":499162500000},{"_id":"themes/kaze/layout/_partial/plugins/fslightbox.ejs","hash":"70bb82a276d87d590d91e16f4755c6ff3518ddd0","modified":499162500000},{"_id":"themes/kaze/source/css/_base/highlight.styl","hash":"470427d9d6acfa2b35205962efac1422010f744f","modified":1633032925159},{"_id":"themes/kaze/layout/_partial/plugins/latex.ejs","hash":"ced3205d1d6b9ddf0af3828257372b9329b9ebad","modified":1645766820305},{"_id":"themes/kaze/source/css/_base/index.styl","hash":"c5eb9ee07af5825d919504fd55acaf7c74f92edc","modified":499162500000},{"_id":"themes/kaze/source/css/_mixins/index.styl","hash":"1a7b903c2a2efac8b00f5cc8d66efcf0815e4f0f","modified":499162500000},{"_id":"themes/kaze/layout/_partial/categories.ejs","hash":"2764f8c9dc67bfaff126223cd58c07da6cb2ddf3","modified":499162500000},{"_id":"themes/kaze/layout/_partial/head.ejs","hash":"1964f3be3ffe6952d67213328d618f180bdc41c4","modified":1627418750128},{"_id":"themes/kaze/source/css/_base/reset.styl","hash":"10f34f1b7318db73d6c6da2c299e8f2b5e79cc0a","modified":1633035914665},{"_id":"themes/kaze/source/css/_pages/archives.styl","hash":"58870ce9fc8152718a1cc33957bd83714f53b0b3","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/index.styl","hash":"9cf3eaefe00fadd82226ed0b934008236c212564","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/categories.styl","hash":"57eb55a17f413ba8a1445bb2fbdb9bf1da512396","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/rewrite.styl","hash":"a6548caf20bda1b2c7124451a6b4963f10b2055c","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/tags.styl","hash":"fd982b1929796ccea7b9e58297335998b310c894","modified":499162500000},{"_id":"themes/kaze/source/css/_variables/index.styl","hash":"d219d3737a46473aaae4e0b988850ded7d018f6a","modified":499162500000},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":499162500000},{"_id":"themes/kaze/source/js/lib/lozad.min.js","hash":"31d6033296c6e6ebff829ab29d171bac3177280d","modified":499162500000},{"_id":"themes/kaze/layout/_partial/plugins/comments/gitalk.ejs","hash":"9c473240d19919bf0467ef0622c5a4ef2a8349ed","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/archive.styl","hash":"dc9cf450fa62159fef6f4b907981c8b4328712b8","modified":499162500000},{"_id":"themes/kaze/layout/_partial/plugins/comments/livere.ejs","hash":"7c743023ba37aec87a2f341031f81e2939759cbd","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/author.styl","hash":"10ba74099d0f21d7320485a96bde1728e0739880","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/button.styl","hash":"8178177b1a14c2a59b3e1afd92001c2dae9a193f","modified":499162500000},{"_id":"themes/kaze/layout/_partial/plugins/comments/valine.ejs","hash":"11f9ec64783d78486ef4d07150a35ec9fc0e04e4","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/categories.styl","hash":"0cc0859ea4ea027f5d32471e1f6a6c7c9844fd20","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/card.styl","hash":"45bbbb149cf47f0f4ae264948203fd23b6adf190","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/columns.styl","hash":"106d989d4a9af348ec117467df72db8707401313","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/container.styl","hash":"62faf1e412d9b7d5d709ad6619df36f5991d1ef4","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/friends.styl","hash":"5b28b3bb06934f4e61af7297ba2d7c98cb666956","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/footer.styl","hash":"73dde79e9e425660e52445ea2663004735243912","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/pagination.styl","hash":"56fd2cf88c41c2bc166f781e40e0d09768b76a7f","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/post.styl","hash":"071258bd72a83ff5ec5582ba0f652246c136bbd8","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/postlist.styl","hash":"d73c2c6527013e6efc81d5e402ac3ca02433d697","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/recentposts.styl","hash":"076c8b83c0f8dcd6ad8c23cf90c4c70d13bec597","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/tags.styl","hash":"0b5f1feed9630019e77d31f098fdc6acf3e8b63c","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/section.styl","hash":"506e0f451e556b2a349b0f89df897d1a0f22a2c6","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/nav.styl","hash":"fcdf6be83ce7b3eb582f8bdbd21cb55be9707fe0","modified":499162500000},{"_id":"themes/kaze/source/css/_pages/widgets/toc.styl","hash":"b50682f006d19e30be963d5ae0ab49b233e852bd","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","hash":"99ad7013f4e2cb94d6858f1d338ce24976722e16","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","hash":"de43e5d8fe8ac0e5be493fc37280a14764d224ba","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","hash":"7831e69297d5fadf91f33f63f2aeb58f0c374e6b","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","hash":"a611beee4ccd9bc303667159ad2977fc4fa02126","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","hash":"58ddae9f0df85468118a028e24b975848e22488c","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","hash":"ff9820d63a78827b2798030c4734e9c752183953","modified":1633032155264},{"_id":"source/img/2021CGJ/Screenshot_1.png","hash":"e39b76487878df8b70118e19a4d1f6ae542f99ea","modified":1627461423591},{"_id":"source/img/2021CGJ/GameTitle.png","hash":"7b9317aedb7aef5306ac66a789c04e0fbd1d8576","modified":1627461273713},{"_id":"themes/kaze/source/css/_pages/about.styl","hash":"f62490c77089a8817474865f30c3d7681f354f49","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","hash":"1b4f667352bde11377b82f6402af9470ca7d410d","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","hash":"3e748cee6ef8cdaceec5335971b8d133aa9dcfa3","modified":499162500000},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","hash":"18a27c7ef76965a40daaab90035500a3ad7f2cbf","modified":499162500000},{"_id":"source/img/Particle/Title.png","hash":"72f807dfb8499f5b6c8f949f1e28b7286616bc38","modified":1645523337455},{"_id":"source/img/2021YiYouWeiJin/YouCantDoItCompletely_2.png","hash":"8db7154bdc0dec2490fd270710caaa1775bdfa05","modified":1633002824620},{"_id":"source/img/2021YiYouWeiJin/screenshot.jpg","hash":"c627f252b7f5321745018d2f74a35103b262eaef","modified":1633001746863},{"_id":"source/img/Water/Noise.png","hash":"b9866d5cd8c0c58a33b273b34b0ea3ce929fb524","modified":1644567149233},{"_id":"source/img/Particle/FireBall.gif","hash":"e57c06d3758d261e7617bc619339d8e1c4aac465","modified":1644333929569},{"_id":"source/img/Particle/MagicMissile.gif","hash":"db05f869c06d0bbe8e1eaeeaecf05a3df035aa64","modified":1644329116441},{"_id":"source/img/2021YiYouWeiJin/shine_1.png","hash":"302382edcc3ee1cb49279f979ab155385c47cef2","modified":1633002924446},{"_id":"source/img/Barge-Haulers-on-the-Volga.jpg","hash":"f4f5242d95e47d0d09e1da13164a4a4f6e9b5077","modified":1627636599501},{"_id":"source/img/2021YiYouWeiJin/PsStopWork_2.png","hash":"8284858a4d2f9935875e2d36dce86fedfaa5ff65","modified":1633002730903},{"_id":"source/img/Particle/Torch.gif","hash":"425c28066b74aa6c514096a528f6a21b03778815","modified":1645525668357},{"_id":"source/img/2021YiYouWeiJin/shine_2.png","hash":"e7ccb2bb6cc4e30abe9fdbed006cb725e24ad100","modified":1633002765004},{"_id":"source/img/The-Starry-Night.png","hash":"f7dae28bbf879e1676670d5b870944464da5e6f0","modified":1627461306422},{"_id":"source/img/2021YiYouWeiJin/CanYouKeepUpWithMySpeed.png","hash":"0b6c2423f41b31cb97193c3621cb5d56f54e8068","modified":1633002945663},{"_id":"source/img/2021YiYouWeiJin/hungry_2.png","hash":"79e9d2007cdee659a7eaf21d02e2c14191d3ec57","modified":1633002901114},{"_id":"source/img/2021YiYouWeiJin/ECG.gif","hash":"1455573006461444ba4193d7bf346d86d436906c","modified":1633000733424},{"_id":"source/img/2021CGJ/Pic_2.jpg","hash":"536d0083c3d29ca1e8e15427867a8bc99e3798d0","modified":1627465245147},{"_id":"source/img/Particle/Explosion.gif","hash":"225d05ee2519bb5bb89d1e514ef06971655ef52a","modified":1645525077885},{"_id":"source/img/DimensionalCut/DimensionalCut.gif","hash":"c9a18c21c822797fdd98cce48c6678fab7d9280e","modified":1645538361503},{"_id":"source/img/Water/Water.gif","hash":"5b1c64f78b0b9666f816bbb6b36ba15d414af88d","modified":1645680043250}],"Category":[{"name":"Game-Jam","_id":"cl04wml440003jowzh4tp2shy"},{"name":"CSharp","_id":"cl04wml4e000djowzeek2hdhf"},{"name":"Unity","_id":"cl04wml4j000kjowzb46u1vnc"},{"name":"Shader","_id":"cl04wml4k000ojowzbw8ih5qb"},{"name":"Recommendation","_id":"cl04wml4m000xjowz8f8e0kj6"},{"name":"C","_id":"cl04wml4n0014jowzc2dy0kjv"},{"name":"Resume","_id":"cl04wml4t001mjowz00ps69pc"}],"Data":[],"Page":[{"title":"关于","layout":"about","_content":"\n🤖创客 / 🎮游戏开发者 / 👾像素画画手 / 🎵芯片音乐爱好者\n\nGithub: [https://github.com/NumbFish-Luo](https://github.com/NumbFish-Luo)\n\nQQ: 957441629 / WeChat: 13676052456\n\n","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: about\n---\n\n🤖创客 / 🎮游戏开发者 / 👾像素画画手 / 🎵芯片音乐爱好者\n\nGithub: [https://github.com/NumbFish-Luo](https://github.com/NumbFish-Luo)\n\nQQ: 957441629 / WeChat: 13676052456\n\n","date":"2021-07-26T12:07:30.397Z","updated":"2021-07-26T12:07:30.397Z","path":"about/index.html","comments":1,"_id":"cl04wml3v0000jowzebbx890s","content":"<p>🤖创客 / 🎮游戏开发者 / 👾像素画画手 / 🎵芯片音乐爱好者</p>\n<p>Github: <a href=\"https://github.com/NumbFish-Luo\">https://github.com/NumbFish-Luo</a></p>\n<p>QQ: 957441629 / WeChat: 13676052456</p>\n","site":{"data":{}},"excerpt":"","more":"<p>🤖创客 / 🎮游戏开发者 / 👾像素画画手 / 🎵芯片音乐爱好者</p>\n<p>Github: <a href=\"https://github.com/NumbFish-Luo\">https://github.com/NumbFish-Luo</a></p>\n<p>QQ: 957441629 / WeChat: 13676052456</p>\n"}],"Post":[{"title":"2021 CiGA Game Jam 椰岛站（上海静安区）作品——《黑we钩》","date":"2021-07-28T13:00:00.000Z","toc":true,"banner_img":"/img/2021CGJ/GameTitle.png","banner_img_set":"/img/2021CGJ/GameTitle.png","_content":"\n# CGJ题图\n\n\n\n![](/img/2021CGJ/CGJTitle.jpg)\n\n题图是拉火车的小夫（发型很像哆啦A梦里的小夫😀）。我们LMTSS小组（LONG MAY THE SUNSHINE! 赞美太阳！）在一番讨论后，决定以小夫手上的钩住火车的“钩索”为核心，制作一个角色不能跳跃，只能通过钩爪来钩住墙体以进行空中移动的2D动作解谜游戏\n\n# Staff\n\n策划：Moxi\n美术：魔琴Kantele、一条肝鱼、鳗鱼、莫莫\n程序：海螺、鳗鱼、莫莫\n音效：鳗鱼\n\n# 背景简介\n\n主人公是一个力大无穷的超人，甚至可以做到把火车拉到天上翻个个儿。但实际上根本不存在超人，这一切都只是主人公每天上班时不切实际的幻想。在现实世界中他是早出晚归的上班族，在精神世界里他是飞檐走壁的超人\n\n游戏试玩地址：https://www.youxibd.com/v2/gamejam/ggj2021/works/1262\n\n# 游戏截图\n\n![](/img/2021CGJ/Screenshot_1.png)\n\n![](/img/2021CGJ/Screenshot_2.png)\n\n# 特别感谢\n\n很高兴这次CGJ我们小组得到了**最佳人气奖**，这两天熬的夜都值了😀！\n感谢我们的队长Moxi在第一天就快速定了游戏核心内容，很好地组织我们小组各个成员的工作，另外还带我们到处吃吃喝喝，非常开心。\n感谢魔琴，绘制了大量的赛博朋克元素2D像素美术素材，让游戏画面丰富了很多很多，有机会可以一起聊一聊像素画😁。\n感谢远在千里线上支援的肝鱼，一起熬夜给我们主人公设计了一个独特的超人形象，制作了超多帧的主人公动画。\n感谢莫莫大佬，作为我们小组中唯一的3D美术，尽全力在48小时内制作了一个超有感觉的3D开场和收场！\n最后感谢海螺，从程序转型当策划很长时间后，第一次这么高强度地进行编程工作，辛苦啦（虽然这货经常捉弄我😅）！以及在最后进行上台演讲的时候非常流畅，把我们做的游戏的乐趣很好地分享给了台下各位观众。\n\n![](/img/2021CGJ/Pic_1.jpg)\n\n![](/img/2021CGJ/Pic_2.jpg)\n\n","source":"_posts/2021CGJ-Shanghai-Jing-an.md","raw":"---\ntitle: 2021 CiGA Game Jam 椰岛站（上海静安区）作品——《黑we钩》\ndate: 2021-07-28 21:00:00\ntoc: true\ntags:\n- Game-Jam\ncategories:\n- Game-Jam\nbanner_img: /img/2021CGJ/GameTitle.png\nbanner_img_set: /img/2021CGJ/GameTitle.png\n---\n\n# CGJ题图\n\n\n\n![](/img/2021CGJ/CGJTitle.jpg)\n\n题图是拉火车的小夫（发型很像哆啦A梦里的小夫😀）。我们LMTSS小组（LONG MAY THE SUNSHINE! 赞美太阳！）在一番讨论后，决定以小夫手上的钩住火车的“钩索”为核心，制作一个角色不能跳跃，只能通过钩爪来钩住墙体以进行空中移动的2D动作解谜游戏\n\n# Staff\n\n策划：Moxi\n美术：魔琴Kantele、一条肝鱼、鳗鱼、莫莫\n程序：海螺、鳗鱼、莫莫\n音效：鳗鱼\n\n# 背景简介\n\n主人公是一个力大无穷的超人，甚至可以做到把火车拉到天上翻个个儿。但实际上根本不存在超人，这一切都只是主人公每天上班时不切实际的幻想。在现实世界中他是早出晚归的上班族，在精神世界里他是飞檐走壁的超人\n\n游戏试玩地址：https://www.youxibd.com/v2/gamejam/ggj2021/works/1262\n\n# 游戏截图\n\n![](/img/2021CGJ/Screenshot_1.png)\n\n![](/img/2021CGJ/Screenshot_2.png)\n\n# 特别感谢\n\n很高兴这次CGJ我们小组得到了**最佳人气奖**，这两天熬的夜都值了😀！\n感谢我们的队长Moxi在第一天就快速定了游戏核心内容，很好地组织我们小组各个成员的工作，另外还带我们到处吃吃喝喝，非常开心。\n感谢魔琴，绘制了大量的赛博朋克元素2D像素美术素材，让游戏画面丰富了很多很多，有机会可以一起聊一聊像素画😁。\n感谢远在千里线上支援的肝鱼，一起熬夜给我们主人公设计了一个独特的超人形象，制作了超多帧的主人公动画。\n感谢莫莫大佬，作为我们小组中唯一的3D美术，尽全力在48小时内制作了一个超有感觉的3D开场和收场！\n最后感谢海螺，从程序转型当策划很长时间后，第一次这么高强度地进行编程工作，辛苦啦（虽然这货经常捉弄我😅）！以及在最后进行上台演讲的时候非常流畅，把我们做的游戏的乐趣很好地分享给了台下各位观众。\n\n![](/img/2021CGJ/Pic_1.jpg)\n\n![](/img/2021CGJ/Pic_2.jpg)\n\n","slug":"2021CGJ-Shanghai-Jing-an","published":1,"updated":"2021-10-02T08:26:47.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml3x0001jowz7yenb4k1","content":"<h1 id=\"cgj题图\"><a class=\"markdownIt-Anchor\" href=\"#cgj题图\"></a> CGJ题图</h1>\n<p><img src=\"/img/2021CGJ/CGJTitle.jpg\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021CGJ/CGJTitle.jpg\" class=\"lozad post-image\"></p>\n<p>题图是拉火车的小夫（发型很像哆啦A梦里的小夫😀）。我们LMTSS小组（LONG MAY THE SUNSHINE! 赞美太阳！）在一番讨论后，决定以小夫手上的钩住火车的“钩索”为核心，制作一个角色不能跳跃，只能通过钩爪来钩住墙体以进行空中移动的2D动作解谜游戏</p>\n<h1 id=\"staff\"><a class=\"markdownIt-Anchor\" href=\"#staff\"></a> Staff</h1>\n<p>策划：Moxi<br />\n美术：魔琴Kantele、一条肝鱼、鳗鱼、莫莫<br />\n程序：海螺、鳗鱼、莫莫<br />\n音效：鳗鱼</p>\n<h1 id=\"背景简介\"><a class=\"markdownIt-Anchor\" href=\"#背景简介\"></a> 背景简介</h1>\n<p>主人公是一个力大无穷的超人，甚至可以做到把火车拉到天上翻个个儿。但实际上根本不存在超人，这一切都只是主人公每天上班时不切实际的幻想。在现实世界中他是早出晚归的上班族，在精神世界里他是飞檐走壁的超人</p>\n<p>游戏试玩地址：<a href=\"https://www.youxibd.com/v2/gamejam/ggj2021/works/1262\">https://www.youxibd.com/v2/gamejam/ggj2021/works/1262</a></p>\n<h1 id=\"游戏截图\"><a class=\"markdownIt-Anchor\" href=\"#游戏截图\"></a> 游戏截图</h1>\n<p><img src=\"/img/2021CGJ/Screenshot_1.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021CGJ/Screenshot_1.png\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/2021CGJ/Screenshot_2.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021CGJ/Screenshot_2.png\" class=\"lozad post-image\"></p>\n<h1 id=\"特别感谢\"><a class=\"markdownIt-Anchor\" href=\"#特别感谢\"></a> 特别感谢</h1>\n<p>很高兴这次CGJ我们小组得到了<strong>最佳人气奖</strong>，这两天熬的夜都值了😀！<br />\n感谢我们的队长Moxi在第一天就快速定了游戏核心内容，很好地组织我们小组各个成员的工作，另外还带我们到处吃吃喝喝，非常开心。<br />\n感谢魔琴，绘制了大量的赛博朋克元素2D像素美术素材，让游戏画面丰富了很多很多，有机会可以一起聊一聊像素画😁。<br />\n感谢远在千里线上支援的肝鱼，一起熬夜给我们主人公设计了一个独特的超人形象，制作了超多帧的主人公动画。<br />\n感谢莫莫大佬，作为我们小组中唯一的3D美术，尽全力在48小时内制作了一个超有感觉的3D开场和收场！<br />\n最后感谢海螺，从程序转型当策划很长时间后，第一次这么高强度地进行编程工作，辛苦啦（虽然这货经常捉弄我😅）！以及在最后进行上台演讲的时候非常流畅，把我们做的游戏的乐趣很好地分享给了台下各位观众。</p>\n<p><img src=\"/img/2021CGJ/Pic_1.jpg\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021CGJ/Pic_1.jpg\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/2021CGJ/Pic_2.jpg\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021CGJ/Pic_2.jpg\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cgj题图\"><a class=\"markdownIt-Anchor\" href=\"#cgj题图\"></a> CGJ题图</h1>\n<p><img src=\"/img/2021CGJ/CGJTitle.jpg\" alt=\"\" /></p>\n<p>题图是拉火车的小夫（发型很像哆啦A梦里的小夫😀）。我们LMTSS小组（LONG MAY THE SUNSHINE! 赞美太阳！）在一番讨论后，决定以小夫手上的钩住火车的“钩索”为核心，制作一个角色不能跳跃，只能通过钩爪来钩住墙体以进行空中移动的2D动作解谜游戏</p>\n<h1 id=\"staff\"><a class=\"markdownIt-Anchor\" href=\"#staff\"></a> Staff</h1>\n<p>策划：Moxi<br />\n美术：魔琴Kantele、一条肝鱼、鳗鱼、莫莫<br />\n程序：海螺、鳗鱼、莫莫<br />\n音效：鳗鱼</p>\n<h1 id=\"背景简介\"><a class=\"markdownIt-Anchor\" href=\"#背景简介\"></a> 背景简介</h1>\n<p>主人公是一个力大无穷的超人，甚至可以做到把火车拉到天上翻个个儿。但实际上根本不存在超人，这一切都只是主人公每天上班时不切实际的幻想。在现实世界中他是早出晚归的上班族，在精神世界里他是飞檐走壁的超人</p>\n<p>游戏试玩地址：<a href=\"https://www.youxibd.com/v2/gamejam/ggj2021/works/1262\">https://www.youxibd.com/v2/gamejam/ggj2021/works/1262</a></p>\n<h1 id=\"游戏截图\"><a class=\"markdownIt-Anchor\" href=\"#游戏截图\"></a> 游戏截图</h1>\n<p><img src=\"/img/2021CGJ/Screenshot_1.png\" alt=\"\" /></p>\n<p><img src=\"/img/2021CGJ/Screenshot_2.png\" alt=\"\" /></p>\n<h1 id=\"特别感谢\"><a class=\"markdownIt-Anchor\" href=\"#特别感谢\"></a> 特别感谢</h1>\n<p>很高兴这次CGJ我们小组得到了<strong>最佳人气奖</strong>，这两天熬的夜都值了😀！<br />\n感谢我们的队长Moxi在第一天就快速定了游戏核心内容，很好地组织我们小组各个成员的工作，另外还带我们到处吃吃喝喝，非常开心。<br />\n感谢魔琴，绘制了大量的赛博朋克元素2D像素美术素材，让游戏画面丰富了很多很多，有机会可以一起聊一聊像素画😁。<br />\n感谢远在千里线上支援的肝鱼，一起熬夜给我们主人公设计了一个独特的超人形象，制作了超多帧的主人公动画。<br />\n感谢莫莫大佬，作为我们小组中唯一的3D美术，尽全力在48小时内制作了一个超有感觉的3D开场和收场！<br />\n最后感谢海螺，从程序转型当策划很长时间后，第一次这么高强度地进行编程工作，辛苦啦（虽然这货经常捉弄我😅）！以及在最后进行上台演讲的时候非常流畅，把我们做的游戏的乐趣很好地分享给了台下各位观众。</p>\n<p><img src=\"/img/2021CGJ/Pic_1.jpg\" alt=\"\" /></p>\n<p><img src=\"/img/2021CGJ/Pic_2.jpg\" alt=\"\" /></p>\n"},{"title":"2021 益游未尽 作品——《气候护卫队》","date":"2021-09-30T12:00:00.000Z","toc":true,"banner_img":"/img/2021YiYouWeiJin/title.jpg","banner_img_set":"/img/2021YiYouWeiJin/title.jpg","_content":"注意：本文建议关闭暗黑模式，不然有些图片有点暗，切换方式见如下图\n![](/img/LightOrDark.gif)\n\n# 规则&主题\n\n本次Game Jam开发时间是8月13号到8月15号。但这次的主题规则不太一样，主题于8月6号提前公布3个，这3个主题与最终主题是相关的。也就是说，可以提前押题，提前开发（只要押对了就OK）。于8月6号提前公布的3个主题分别是：\n\n> **主题一：防灾救灾**\n> 国家持证救援师、海豚救援队队长 黄维\n> 每年，我们都直面挑战，经历洪水、台风、疫情、雪灾、地震等等。七月的河南特大暴雨已造成了河南全省超过120万人受灾，山洪、断联、路面被淹。如何将防灾意识融入到游戏中，让玩家在玩游戏的过程中提高自己的防灾意识？\n>\n> **主题二：节能环保**\n> 海洋保护公益机构-无境深蓝创始人、联合国地球青年卫士、极地向导 王淼\n> 去年的联合国气候峰会上，多家游戏巨头响应联合国号召，共同加入“Playing For The Planet”联盟，开启了环保与游戏结合的探索。如何在游戏中向人们传达有关节能环保、可再生能源等知识，通过游戏设计来提高人们对此的认知度？\n>\n> **主题三：生物生态**\n> 国家林业局直属的中国绿化基金会-生物多样性保护项目处处长 黄红\n> 2020世界环境日，人面把主题聚焦于生物多样性。自1970年以来，地球上动植物种类急剧减少，目前有100万种动植物物种正在面临灭绝的威胁。如何将有关保护生物多样性的挑战融入到游戏中，并激活玩家关于生物生态的思考？\n\n而8月13号确定的最终主题是：**气候变化**\n\n很不幸的是，我们小队当初押题押错了，总结出来的题目是与医疗相关联的，还为此提前学习了心电图相关知识，并开发了一个心电图展示的功能（为了美观，我用了shader实现），以及画了一个“初级除颤仪”（设定是手摇式的）。\n\n![](/img/2021YiYouWeiJin/ECG.gif)\n\n（上图是正常心跳的波形循环）\n\n![](/img/2021YiYouWeiJin/AED.png)\n\n（手摇式的初级除颤仪）\n\n没办法，之前的工作都作废，只能重新设计一个游戏了！在经过第一天的头脑风暴之后，我们最终确定了一个这样的游戏：Party Game + 4人同屏 + 非对称竞技，于是就有了我们的《气候护卫队》。\n\n![](/img/2021YiYouWeiJin/title.jpg)\n\n# Staff\n\n策划：Moxi\n程序：鳗鱼、海螺、Gusuri\n美术：蓬莱异形、魔琴kantele、鳗鱼\n音乐：dx5\nPPT：墨卿\n\n（基本上是之前2021CGJ的小队~不过这次线下的程序就我一个，忙死了😅）\n\n# 玩法\n\n## 背景简介\n\n地球的环境愈演愈烈，气候灾祸成为人类生存的一大难题。人类为了抵抗灾祸继续生活在这片熟悉的土地上，发明了环境修复器。\n\n环境修复器需要在一定的时间内才能发挥作用，在此期间环境修复器仍会受到灾祸的攻击，导致无法发挥作用甚至损坏。人类需要收集资源，抵抗灾祸的攻击，保护环境修复器。\n\n灾祸的力量既强大又可怕，人类能否成功抵御灾祸，在自己曾经熟悉的土地上继续安身立命呢？\n\n## 玩家目标\n\n三名玩家扮演保护地球的人类战士，第四名玩家则扮演毁灭世界的灾祸。人类需要在规定时间内修复该地区的环境，灾祸则需要阻止人类实现目标。\n\n玩家可以通过地图中散落的物资箱来装备自己，例如工具铲、灭火器等。拾取树苗种植在地上以抵御灾祸的进攻。成片的树木可以抵御像风沙，水灾这样的自然灾祸；但如果遇到了森林大火，再多的树也只不过是火焰的添头罢了。玩家之间需要合理分配工作，共同阻止灾祸袭来的同时修复净化器来永久解放该地区。\n\n## 试玩地址\n\n注意：操作方法见这个链接里的PPT。本游戏由于是4人同屏操作，玩家人数可以是人类角色1-3人，vs 灾祸玩家1人，所以需要2-4个xbox系手柄才能玩。其他类型输入设备因为时间关系，没有做出来，未来可能会优化输入部分...吧？\n\nhttps://itch.io/jam/gameforgood/rate/1163427\n\n# 游戏截图\n\n（画面UI肉眼可见地赶时间Orz）\n\n![](/img/2021YiYouWeiJin/screenshot.jpg)\n\n# 特别感谢\n\n好耶，这次又拿了奖，**最佳玩法奖**！感谢小队各位的努力付出，你们都超棒的😀！下次有空还一起玩Game Jam啊\n\n（吐槽：由于线下的程序就我一个人，第一天还同时做了主角动画，这两天熬夜快升仙了💀。海螺这货第一天还跑去和女朋友露营...还好他第二天晚上，连夜给我打了一套框架方便开发，不然我一个线下程序就要忙吐了🤮。）\n\n# 一些彩蛋\n\n比赛结束后，官方上传了这次比赛拍摄的照片，于是我创作欲上来了，连夜做了一堆我们小队的表情包（展示部分）：\n\n![](/img/2021YiYouWeiJin/hungry_1.png)\n\n![](/img/2021YiYouWeiJin/PsStopWork_1.png)\n\n![](/img/2021YiYouWeiJin/shine_1.png)\n\n![](/img/2021YiYouWeiJin/YouCantDoItCompletely_2.png)\n\n感谢看到这里，游玩的时候有问题可以联系我~\n\n","source":"_posts/2021YiYouWeiJin.md","raw":"---\ntitle: 2021 益游未尽 作品——《气候护卫队》\ndate: 2021-09-30 20:00:00\ntoc: true\ntags:\n- Game-Jam\ncategories:\n- Game-Jam\nbanner_img: /img/2021YiYouWeiJin/title.jpg\nbanner_img_set: /img/2021YiYouWeiJin/title.jpg\n---\n注意：本文建议关闭暗黑模式，不然有些图片有点暗，切换方式见如下图\n![](/img/LightOrDark.gif)\n\n# 规则&主题\n\n本次Game Jam开发时间是8月13号到8月15号。但这次的主题规则不太一样，主题于8月6号提前公布3个，这3个主题与最终主题是相关的。也就是说，可以提前押题，提前开发（只要押对了就OK）。于8月6号提前公布的3个主题分别是：\n\n> **主题一：防灾救灾**\n> 国家持证救援师、海豚救援队队长 黄维\n> 每年，我们都直面挑战，经历洪水、台风、疫情、雪灾、地震等等。七月的河南特大暴雨已造成了河南全省超过120万人受灾，山洪、断联、路面被淹。如何将防灾意识融入到游戏中，让玩家在玩游戏的过程中提高自己的防灾意识？\n>\n> **主题二：节能环保**\n> 海洋保护公益机构-无境深蓝创始人、联合国地球青年卫士、极地向导 王淼\n> 去年的联合国气候峰会上，多家游戏巨头响应联合国号召，共同加入“Playing For The Planet”联盟，开启了环保与游戏结合的探索。如何在游戏中向人们传达有关节能环保、可再生能源等知识，通过游戏设计来提高人们对此的认知度？\n>\n> **主题三：生物生态**\n> 国家林业局直属的中国绿化基金会-生物多样性保护项目处处长 黄红\n> 2020世界环境日，人面把主题聚焦于生物多样性。自1970年以来，地球上动植物种类急剧减少，目前有100万种动植物物种正在面临灭绝的威胁。如何将有关保护生物多样性的挑战融入到游戏中，并激活玩家关于生物生态的思考？\n\n而8月13号确定的最终主题是：**气候变化**\n\n很不幸的是，我们小队当初押题押错了，总结出来的题目是与医疗相关联的，还为此提前学习了心电图相关知识，并开发了一个心电图展示的功能（为了美观，我用了shader实现），以及画了一个“初级除颤仪”（设定是手摇式的）。\n\n![](/img/2021YiYouWeiJin/ECG.gif)\n\n（上图是正常心跳的波形循环）\n\n![](/img/2021YiYouWeiJin/AED.png)\n\n（手摇式的初级除颤仪）\n\n没办法，之前的工作都作废，只能重新设计一个游戏了！在经过第一天的头脑风暴之后，我们最终确定了一个这样的游戏：Party Game + 4人同屏 + 非对称竞技，于是就有了我们的《气候护卫队》。\n\n![](/img/2021YiYouWeiJin/title.jpg)\n\n# Staff\n\n策划：Moxi\n程序：鳗鱼、海螺、Gusuri\n美术：蓬莱异形、魔琴kantele、鳗鱼\n音乐：dx5\nPPT：墨卿\n\n（基本上是之前2021CGJ的小队~不过这次线下的程序就我一个，忙死了😅）\n\n# 玩法\n\n## 背景简介\n\n地球的环境愈演愈烈，气候灾祸成为人类生存的一大难题。人类为了抵抗灾祸继续生活在这片熟悉的土地上，发明了环境修复器。\n\n环境修复器需要在一定的时间内才能发挥作用，在此期间环境修复器仍会受到灾祸的攻击，导致无法发挥作用甚至损坏。人类需要收集资源，抵抗灾祸的攻击，保护环境修复器。\n\n灾祸的力量既强大又可怕，人类能否成功抵御灾祸，在自己曾经熟悉的土地上继续安身立命呢？\n\n## 玩家目标\n\n三名玩家扮演保护地球的人类战士，第四名玩家则扮演毁灭世界的灾祸。人类需要在规定时间内修复该地区的环境，灾祸则需要阻止人类实现目标。\n\n玩家可以通过地图中散落的物资箱来装备自己，例如工具铲、灭火器等。拾取树苗种植在地上以抵御灾祸的进攻。成片的树木可以抵御像风沙，水灾这样的自然灾祸；但如果遇到了森林大火，再多的树也只不过是火焰的添头罢了。玩家之间需要合理分配工作，共同阻止灾祸袭来的同时修复净化器来永久解放该地区。\n\n## 试玩地址\n\n注意：操作方法见这个链接里的PPT。本游戏由于是4人同屏操作，玩家人数可以是人类角色1-3人，vs 灾祸玩家1人，所以需要2-4个xbox系手柄才能玩。其他类型输入设备因为时间关系，没有做出来，未来可能会优化输入部分...吧？\n\nhttps://itch.io/jam/gameforgood/rate/1163427\n\n# 游戏截图\n\n（画面UI肉眼可见地赶时间Orz）\n\n![](/img/2021YiYouWeiJin/screenshot.jpg)\n\n# 特别感谢\n\n好耶，这次又拿了奖，**最佳玩法奖**！感谢小队各位的努力付出，你们都超棒的😀！下次有空还一起玩Game Jam啊\n\n（吐槽：由于线下的程序就我一个人，第一天还同时做了主角动画，这两天熬夜快升仙了💀。海螺这货第一天还跑去和女朋友露营...还好他第二天晚上，连夜给我打了一套框架方便开发，不然我一个线下程序就要忙吐了🤮。）\n\n# 一些彩蛋\n\n比赛结束后，官方上传了这次比赛拍摄的照片，于是我创作欲上来了，连夜做了一堆我们小队的表情包（展示部分）：\n\n![](/img/2021YiYouWeiJin/hungry_1.png)\n\n![](/img/2021YiYouWeiJin/PsStopWork_1.png)\n\n![](/img/2021YiYouWeiJin/shine_1.png)\n\n![](/img/2021YiYouWeiJin/YouCantDoItCompletely_2.png)\n\n感谢看到这里，游玩的时候有问题可以联系我~\n\n","slug":"2021YiYouWeiJin","published":1,"updated":"2021-10-02T08:49:24.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml420002jowz79vp6xvk","content":"<p>注意：本文建议关闭暗黑模式，不然有些图片有点暗，切换方式见如下图<br />\n<img src=\"/img/LightOrDark.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/LightOrDark.gif\" class=\"lozad post-image\"></p>\n<h1 id=\"规则主题\"><a class=\"markdownIt-Anchor\" href=\"#规则主题\"></a> 规则&amp;主题</h1>\n<p>本次Game Jam开发时间是8月13号到8月15号。但这次的主题规则不太一样，主题于8月6号提前公布3个，这3个主题与最终主题是相关的。也就是说，可以提前押题，提前开发（只要押对了就OK）。于8月6号提前公布的3个主题分别是：</p>\n<blockquote>\n<p><strong>主题一：防灾救灾</strong><br />\n国家持证救援师、海豚救援队队长 黄维<br />\n每年，我们都直面挑战，经历洪水、台风、疫情、雪灾、地震等等。七月的河南特大暴雨已造成了河南全省超过120万人受灾，山洪、断联、路面被淹。如何将防灾意识融入到游戏中，让玩家在玩游戏的过程中提高自己的防灾意识？</p>\n<p><strong>主题二：节能环保</strong><br />\n海洋保护公益机构-无境深蓝创始人、联合国地球青年卫士、极地向导 王淼<br />\n去年的联合国气候峰会上，多家游戏巨头响应联合国号召，共同加入“Playing For The Planet”联盟，开启了环保与游戏结合的探索。如何在游戏中向人们传达有关节能环保、可再生能源等知识，通过游戏设计来提高人们对此的认知度？</p>\n<p><strong>主题三：生物生态</strong><br />\n国家林业局直属的中国绿化基金会-生物多样性保护项目处处长 黄红<br />\n2020世界环境日，人面把主题聚焦于生物多样性。自1970年以来，地球上动植物种类急剧减少，目前有100万种动植物物种正在面临灭绝的威胁。如何将有关保护生物多样性的挑战融入到游戏中，并激活玩家关于生物生态的思考？</p>\n</blockquote>\n<p>而8月13号确定的最终主题是：<strong>气候变化</strong></p>\n<p>很不幸的是，我们小队当初押题押错了，总结出来的题目是与医疗相关联的，还为此提前学习了心电图相关知识，并开发了一个心电图展示的功能（为了美观，我用了shader实现），以及画了一个“初级除颤仪”（设定是手摇式的）。</p>\n<p><img src=\"/img/2021YiYouWeiJin/ECG.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/ECG.gif\" class=\"lozad post-image\"></p>\n<p>（上图是正常心跳的波形循环）</p>\n<p><img src=\"/img/2021YiYouWeiJin/AED.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/AED.png\" class=\"lozad post-image\"></p>\n<p>（手摇式的初级除颤仪）</p>\n<p>没办法，之前的工作都作废，只能重新设计一个游戏了！在经过第一天的头脑风暴之后，我们最终确定了一个这样的游戏：Party Game + 4人同屏 + 非对称竞技，于是就有了我们的《气候护卫队》。</p>\n<p><img src=\"/img/2021YiYouWeiJin/title.jpg\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/title.jpg\" class=\"lozad post-image\"></p>\n<h1 id=\"staff\"><a class=\"markdownIt-Anchor\" href=\"#staff\"></a> Staff</h1>\n<p>策划：Moxi<br />\n程序：鳗鱼、海螺、Gusuri<br />\n美术：蓬莱异形、魔琴kantele、鳗鱼<br />\n音乐：dx5<br />\nPPT：墨卿</p>\n<p>（基本上是之前2021CGJ的小队~不过这次线下的程序就我一个，忙死了😅）</p>\n<h1 id=\"玩法\"><a class=\"markdownIt-Anchor\" href=\"#玩法\"></a> 玩法</h1>\n<h2 id=\"背景简介\"><a class=\"markdownIt-Anchor\" href=\"#背景简介\"></a> 背景简介</h2>\n<p>地球的环境愈演愈烈，气候灾祸成为人类生存的一大难题。人类为了抵抗灾祸继续生活在这片熟悉的土地上，发明了环境修复器。</p>\n<p>环境修复器需要在一定的时间内才能发挥作用，在此期间环境修复器仍会受到灾祸的攻击，导致无法发挥作用甚至损坏。人类需要收集资源，抵抗灾祸的攻击，保护环境修复器。</p>\n<p>灾祸的力量既强大又可怕，人类能否成功抵御灾祸，在自己曾经熟悉的土地上继续安身立命呢？</p>\n<h2 id=\"玩家目标\"><a class=\"markdownIt-Anchor\" href=\"#玩家目标\"></a> 玩家目标</h2>\n<p>三名玩家扮演保护地球的人类战士，第四名玩家则扮演毁灭世界的灾祸。人类需要在规定时间内修复该地区的环境，灾祸则需要阻止人类实现目标。</p>\n<p>玩家可以通过地图中散落的物资箱来装备自己，例如工具铲、灭火器等。拾取树苗种植在地上以抵御灾祸的进攻。成片的树木可以抵御像风沙，水灾这样的自然灾祸；但如果遇到了森林大火，再多的树也只不过是火焰的添头罢了。玩家之间需要合理分配工作，共同阻止灾祸袭来的同时修复净化器来永久解放该地区。</p>\n<h2 id=\"试玩地址\"><a class=\"markdownIt-Anchor\" href=\"#试玩地址\"></a> 试玩地址</h2>\n<p>注意：操作方法见这个链接里的PPT。本游戏由于是4人同屏操作，玩家人数可以是人类角色1-3人，vs 灾祸玩家1人，所以需要2-4个xbox系手柄才能玩。其他类型输入设备因为时间关系，没有做出来，未来可能会优化输入部分…吧？</p>\n<p><a href=\"https://itch.io/jam/gameforgood/rate/1163427\">https://itch.io/jam/gameforgood/rate/1163427</a></p>\n<h1 id=\"游戏截图\"><a class=\"markdownIt-Anchor\" href=\"#游戏截图\"></a> 游戏截图</h1>\n<p>（画面UI肉眼可见地赶时间Orz）</p>\n<p><img src=\"/img/2021YiYouWeiJin/screenshot.jpg\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/screenshot.jpg\" class=\"lozad post-image\"></p>\n<h1 id=\"特别感谢\"><a class=\"markdownIt-Anchor\" href=\"#特别感谢\"></a> 特别感谢</h1>\n<p>好耶，这次又拿了奖，<strong>最佳玩法奖</strong>！感谢小队各位的努力付出，你们都超棒的😀！下次有空还一起玩Game Jam啊</p>\n<p>（吐槽：由于线下的程序就我一个人，第一天还同时做了主角动画，这两天熬夜快升仙了💀。海螺这货第一天还跑去和女朋友露营…还好他第二天晚上，连夜给我打了一套框架方便开发，不然我一个线下程序就要忙吐了🤮。）</p>\n<h1 id=\"一些彩蛋\"><a class=\"markdownIt-Anchor\" href=\"#一些彩蛋\"></a> 一些彩蛋</h1>\n<p>比赛结束后，官方上传了这次比赛拍摄的照片，于是我创作欲上来了，连夜做了一堆我们小队的表情包（展示部分）：</p>\n<p><img src=\"/img/2021YiYouWeiJin/hungry_1.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/hungry_1.png\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/2021YiYouWeiJin/PsStopWork_1.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/PsStopWork_1.png\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/2021YiYouWeiJin/shine_1.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/shine_1.png\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/2021YiYouWeiJin/YouCantDoItCompletely_2.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/YouCantDoItCompletely_2.png\" class=\"lozad post-image\"></p>\n<p>感谢看到这里，游玩的时候有问题可以联系我~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>注意：本文建议关闭暗黑模式，不然有些图片有点暗，切换方式见如下图<br />\n<img src=\"/img/LightOrDark.gif\" alt=\"\" /></p>\n<h1 id=\"规则主题\"><a class=\"markdownIt-Anchor\" href=\"#规则主题\"></a> 规则&amp;主题</h1>\n<p>本次Game Jam开发时间是8月13号到8月15号。但这次的主题规则不太一样，主题于8月6号提前公布3个，这3个主题与最终主题是相关的。也就是说，可以提前押题，提前开发（只要押对了就OK）。于8月6号提前公布的3个主题分别是：</p>\n<blockquote>\n<p><strong>主题一：防灾救灾</strong><br />\n国家持证救援师、海豚救援队队长 黄维<br />\n每年，我们都直面挑战，经历洪水、台风、疫情、雪灾、地震等等。七月的河南特大暴雨已造成了河南全省超过120万人受灾，山洪、断联、路面被淹。如何将防灾意识融入到游戏中，让玩家在玩游戏的过程中提高自己的防灾意识？</p>\n<p><strong>主题二：节能环保</strong><br />\n海洋保护公益机构-无境深蓝创始人、联合国地球青年卫士、极地向导 王淼<br />\n去年的联合国气候峰会上，多家游戏巨头响应联合国号召，共同加入“Playing For The Planet”联盟，开启了环保与游戏结合的探索。如何在游戏中向人们传达有关节能环保、可再生能源等知识，通过游戏设计来提高人们对此的认知度？</p>\n<p><strong>主题三：生物生态</strong><br />\n国家林业局直属的中国绿化基金会-生物多样性保护项目处处长 黄红<br />\n2020世界环境日，人面把主题聚焦于生物多样性。自1970年以来，地球上动植物种类急剧减少，目前有100万种动植物物种正在面临灭绝的威胁。如何将有关保护生物多样性的挑战融入到游戏中，并激活玩家关于生物生态的思考？</p>\n</blockquote>\n<p>而8月13号确定的最终主题是：<strong>气候变化</strong></p>\n<p>很不幸的是，我们小队当初押题押错了，总结出来的题目是与医疗相关联的，还为此提前学习了心电图相关知识，并开发了一个心电图展示的功能（为了美观，我用了shader实现），以及画了一个“初级除颤仪”（设定是手摇式的）。</p>\n<p><img src=\"/img/2021YiYouWeiJin/ECG.gif\" alt=\"\" /></p>\n<p>（上图是正常心跳的波形循环）</p>\n<p><img src=\"/img/2021YiYouWeiJin/AED.png\" alt=\"\" /></p>\n<p>（手摇式的初级除颤仪）</p>\n<p>没办法，之前的工作都作废，只能重新设计一个游戏了！在经过第一天的头脑风暴之后，我们最终确定了一个这样的游戏：Party Game + 4人同屏 + 非对称竞技，于是就有了我们的《气候护卫队》。</p>\n<p><img src=\"/img/2021YiYouWeiJin/title.jpg\" alt=\"\" /></p>\n<h1 id=\"staff\"><a class=\"markdownIt-Anchor\" href=\"#staff\"></a> Staff</h1>\n<p>策划：Moxi<br />\n程序：鳗鱼、海螺、Gusuri<br />\n美术：蓬莱异形、魔琴kantele、鳗鱼<br />\n音乐：dx5<br />\nPPT：墨卿</p>\n<p>（基本上是之前2021CGJ的小队~不过这次线下的程序就我一个，忙死了😅）</p>\n<h1 id=\"玩法\"><a class=\"markdownIt-Anchor\" href=\"#玩法\"></a> 玩法</h1>\n<h2 id=\"背景简介\"><a class=\"markdownIt-Anchor\" href=\"#背景简介\"></a> 背景简介</h2>\n<p>地球的环境愈演愈烈，气候灾祸成为人类生存的一大难题。人类为了抵抗灾祸继续生活在这片熟悉的土地上，发明了环境修复器。</p>\n<p>环境修复器需要在一定的时间内才能发挥作用，在此期间环境修复器仍会受到灾祸的攻击，导致无法发挥作用甚至损坏。人类需要收集资源，抵抗灾祸的攻击，保护环境修复器。</p>\n<p>灾祸的力量既强大又可怕，人类能否成功抵御灾祸，在自己曾经熟悉的土地上继续安身立命呢？</p>\n<h2 id=\"玩家目标\"><a class=\"markdownIt-Anchor\" href=\"#玩家目标\"></a> 玩家目标</h2>\n<p>三名玩家扮演保护地球的人类战士，第四名玩家则扮演毁灭世界的灾祸。人类需要在规定时间内修复该地区的环境，灾祸则需要阻止人类实现目标。</p>\n<p>玩家可以通过地图中散落的物资箱来装备自己，例如工具铲、灭火器等。拾取树苗种植在地上以抵御灾祸的进攻。成片的树木可以抵御像风沙，水灾这样的自然灾祸；但如果遇到了森林大火，再多的树也只不过是火焰的添头罢了。玩家之间需要合理分配工作，共同阻止灾祸袭来的同时修复净化器来永久解放该地区。</p>\n<h2 id=\"试玩地址\"><a class=\"markdownIt-Anchor\" href=\"#试玩地址\"></a> 试玩地址</h2>\n<p>注意：操作方法见这个链接里的PPT。本游戏由于是4人同屏操作，玩家人数可以是人类角色1-3人，vs 灾祸玩家1人，所以需要2-4个xbox系手柄才能玩。其他类型输入设备因为时间关系，没有做出来，未来可能会优化输入部分…吧？</p>\n<p><a href=\"https://itch.io/jam/gameforgood/rate/1163427\">https://itch.io/jam/gameforgood/rate/1163427</a></p>\n<h1 id=\"游戏截图\"><a class=\"markdownIt-Anchor\" href=\"#游戏截图\"></a> 游戏截图</h1>\n<p>（画面UI肉眼可见地赶时间Orz）</p>\n<p><img src=\"/img/2021YiYouWeiJin/screenshot.jpg\" alt=\"\" /></p>\n<h1 id=\"特别感谢\"><a class=\"markdownIt-Anchor\" href=\"#特别感谢\"></a> 特别感谢</h1>\n<p>好耶，这次又拿了奖，<strong>最佳玩法奖</strong>！感谢小队各位的努力付出，你们都超棒的😀！下次有空还一起玩Game Jam啊</p>\n<p>（吐槽：由于线下的程序就我一个人，第一天还同时做了主角动画，这两天熬夜快升仙了💀。海螺这货第一天还跑去和女朋友露营…还好他第二天晚上，连夜给我打了一套框架方便开发，不然我一个线下程序就要忙吐了🤮。）</p>\n<h1 id=\"一些彩蛋\"><a class=\"markdownIt-Anchor\" href=\"#一些彩蛋\"></a> 一些彩蛋</h1>\n<p>比赛结束后，官方上传了这次比赛拍摄的照片，于是我创作欲上来了，连夜做了一堆我们小队的表情包（展示部分）：</p>\n<p><img src=\"/img/2021YiYouWeiJin/hungry_1.png\" alt=\"\" /></p>\n<p><img src=\"/img/2021YiYouWeiJin/PsStopWork_1.png\" alt=\"\" /></p>\n<p><img src=\"/img/2021YiYouWeiJin/shine_1.png\" alt=\"\" /></p>\n<p><img src=\"/img/2021YiYouWeiJin/YouCantDoItCompletely_2.png\" alt=\"\" /></p>\n<p>感谢看到这里，游玩的时候有问题可以联系我~</p>\n"},{"title":"C#实现“泛型字典”","date":"2021-10-01T02:30:00.000Z","toc":true,"banner_img":"/img/Dictionary.jpg","banner_img_set":"/img/Dictionary.jpg","_content":"\n曾经遇到的面试题，要求实现一个“泛型字典”，可以**同时存储多种类型**，且对于**值类型要避免装箱**。\n\n设计思路：\n\n1. C#和C/C++不一样，数据类型分为了两种，一种是值类型，一种是引用类型。\n2. 字典是一个模板类，本身为引用类型。对于```Dictionary<Key, Value>```，如果Value是一个值类型，那么Value数据不会被装箱，例如：```Dictionary<Key, int>```；而如果Value是引用类型...本来就是引用类型了，所以不存在装箱。\n3. 对于此题，初看可能会写出这样的设计：```Dictionary<Key, object>```，即所有数据都统一转成object。虽然同时存储多种类型的功能实现了，但是对于值类型没有避免装箱。\n4. 对上述第3条进行改进，结合上述第2条，如果```Dictionary<Key, object>```的object也是Dictionary呢，且这个Dictionary的Value模板参数不是object（防止再套一层...）。对于这样的字典套字典的结构，我的设计如下：\n\n```csharp\npublic class GenericDictionary<KEY> {\n    private Dictionary<string, object> _instance = new Dictionary<string, object>();\n    public void Add<VALUE>(KEY key, VALUE value) {\n        string typeName = typeof(VALUE).Name;\n        object outObject;\n        if (!_instance.TryGetValue(typeName, out outObject)) {\n            _instance.Add(typeName, new Dictionary<KEY, VALUE>());\n            outObject = _instance[typeName];\n        }\n        Dictionary<KEY, VALUE> dictionary = (Dictionary<KEY, VALUE>)outObject;\n        dictionary.Add(key, value);\n    }\n    public bool TryGetValue<VALUE>(KEY key, out VALUE value) {\n        object outObject;\n        if (!_instance.TryGetValue(typeof(VALUE).Name, out outObject)) {\n            value = default;\n            return false;\n        }\n        Dictionary<KEY, VALUE> dictionary = (Dictionary<KEY, VALUE>)outObject;\n        if (!dictionary.TryGetValue(key, out value)) {\n            return false;\n        }\n        return true;\n    }\n}\n\n// usage:\npublic class TestObject {\n    public int value = 123;\n}\n\nGenericDictionary<int> gd = new GenericDictionary<int>();\n\ngd.Add(1, 123);\n\nTestObject to = new TestObject();\nto.value = 777;\ngd.Add(6, to);\n\nint intOut;\nif (gd.TryGetValue(1, out intOut)) {\n    Debug.Log(intOut); // 123\n} else {\n    Debug.Log(\"Unable to get the int value\");\n}\n\nTestObject toOut;\nif (gd.TryGetValue(6, out toOut)) {\n    Debug.Log(toOut.value); // 777\n} else {\n    Debug.Log(\"Unable to get the TestObject value\");\n}\n```\n","source":"_posts/CSharp-GenericDictionary.md","raw":"---\ntitle: C#实现“泛型字典”\ndate: 2021-10-1 10:30:00\ntoc: true\ntags:\n- CSharp\ncategories:\n- CSharp\nbanner_img: /img/Dictionary.jpg\nbanner_img_set: /img/Dictionary.jpg\n---\n\n曾经遇到的面试题，要求实现一个“泛型字典”，可以**同时存储多种类型**，且对于**值类型要避免装箱**。\n\n设计思路：\n\n1. C#和C/C++不一样，数据类型分为了两种，一种是值类型，一种是引用类型。\n2. 字典是一个模板类，本身为引用类型。对于```Dictionary<Key, Value>```，如果Value是一个值类型，那么Value数据不会被装箱，例如：```Dictionary<Key, int>```；而如果Value是引用类型...本来就是引用类型了，所以不存在装箱。\n3. 对于此题，初看可能会写出这样的设计：```Dictionary<Key, object>```，即所有数据都统一转成object。虽然同时存储多种类型的功能实现了，但是对于值类型没有避免装箱。\n4. 对上述第3条进行改进，结合上述第2条，如果```Dictionary<Key, object>```的object也是Dictionary呢，且这个Dictionary的Value模板参数不是object（防止再套一层...）。对于这样的字典套字典的结构，我的设计如下：\n\n```csharp\npublic class GenericDictionary<KEY> {\n    private Dictionary<string, object> _instance = new Dictionary<string, object>();\n    public void Add<VALUE>(KEY key, VALUE value) {\n        string typeName = typeof(VALUE).Name;\n        object outObject;\n        if (!_instance.TryGetValue(typeName, out outObject)) {\n            _instance.Add(typeName, new Dictionary<KEY, VALUE>());\n            outObject = _instance[typeName];\n        }\n        Dictionary<KEY, VALUE> dictionary = (Dictionary<KEY, VALUE>)outObject;\n        dictionary.Add(key, value);\n    }\n    public bool TryGetValue<VALUE>(KEY key, out VALUE value) {\n        object outObject;\n        if (!_instance.TryGetValue(typeof(VALUE).Name, out outObject)) {\n            value = default;\n            return false;\n        }\n        Dictionary<KEY, VALUE> dictionary = (Dictionary<KEY, VALUE>)outObject;\n        if (!dictionary.TryGetValue(key, out value)) {\n            return false;\n        }\n        return true;\n    }\n}\n\n// usage:\npublic class TestObject {\n    public int value = 123;\n}\n\nGenericDictionary<int> gd = new GenericDictionary<int>();\n\ngd.Add(1, 123);\n\nTestObject to = new TestObject();\nto.value = 777;\ngd.Add(6, to);\n\nint intOut;\nif (gd.TryGetValue(1, out intOut)) {\n    Debug.Log(intOut); // 123\n} else {\n    Debug.Log(\"Unable to get the int value\");\n}\n\nTestObject toOut;\nif (gd.TryGetValue(6, out toOut)) {\n    Debug.Log(toOut.value); // 777\n} else {\n    Debug.Log(\"Unable to get the TestObject value\");\n}\n```\n","slug":"CSharp-GenericDictionary","published":1,"updated":"2021-10-02T16:34:42.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml460005jowzbq69ctcm","content":"<p>曾经遇到的面试题，要求实现一个“泛型字典”，可以<strong>同时存储多种类型</strong>，且对于<strong>值类型要避免装箱</strong>。</p>\n<p>设计思路：</p>\n<ol>\n<li>C#和C/C++不一样，数据类型分为了两种，一种是值类型，一种是引用类型。</li>\n<li>字典是一个模板类，本身为引用类型。对于<code>Dictionary&lt;Key, Value&gt;</code>，如果Value是一个值类型，那么Value数据不会被装箱，例如：<code>Dictionary&lt;Key, int&gt;</code>；而如果Value是引用类型…本来就是引用类型了，所以不存在装箱。</li>\n<li>对于此题，初看可能会写出这样的设计：<code>Dictionary&lt;Key, object&gt;</code>，即所有数据都统一转成object。虽然同时存储多种类型的功能实现了，但是对于值类型没有避免装箱。</li>\n<li>对上述第3条进行改进，结合上述第2条，如果<code>Dictionary&lt;Key, object&gt;</code>的object也是Dictionary呢，且这个Dictionary的Value模板参数不是object（防止再套一层…）。对于这样的字典套字典的结构，我的设计如下：</li>\n</ol>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericDictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>VALUE<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KEY</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">VALUE</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> typeName <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> outObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> outObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            _instance<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outObject <span class=\"token operator\">=</span> _instance<span class=\"token punctuation\">[</span>typeName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token punctuation\">></span></span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Dictionary<span class=\"token operator\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>outObject<span class=\"token punctuation\">;</span>\n        dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token generic-method\"><span class=\"token function\">TryGetValue</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>VALUE<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KEY</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">VALUE</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> outObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> outObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token punctuation\">></span></span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Dictionary<span class=\"token operator\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>outObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// usage:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">GenericDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> gd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GenericDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngd<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">TestObject</span> to <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nto<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">777</span><span class=\"token punctuation\">;</span>\ngd<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intOut<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gd<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> intOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>intOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to get the int value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">TestObject</span> toOut<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gd<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> toOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>toOut<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 777</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to get the TestObject value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>曾经遇到的面试题，要求实现一个“泛型字典”，可以<strong>同时存储多种类型</strong>，且对于<strong>值类型要避免装箱</strong>。</p>\n<p>设计思路：</p>\n<ol>\n<li>C#和C/C++不一样，数据类型分为了两种，一种是值类型，一种是引用类型。</li>\n<li>字典是一个模板类，本身为引用类型。对于<code>Dictionary&lt;Key, Value&gt;</code>，如果Value是一个值类型，那么Value数据不会被装箱，例如：<code>Dictionary&lt;Key, int&gt;</code>；而如果Value是引用类型…本来就是引用类型了，所以不存在装箱。</li>\n<li>对于此题，初看可能会写出这样的设计：<code>Dictionary&lt;Key, object&gt;</code>，即所有数据都统一转成object。虽然同时存储多种类型的功能实现了，但是对于值类型没有避免装箱。</li>\n<li>对上述第3条进行改进，结合上述第2条，如果<code>Dictionary&lt;Key, object&gt;</code>的object也是Dictionary呢，且这个Dictionary的Value模板参数不是object（防止再套一层…）。对于这样的字典套字典的结构，我的设计如下：</li>\n</ol>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericDictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>VALUE<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KEY</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">VALUE</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> typeName <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> outObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> outObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            _instance<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outObject <span class=\"token operator\">=</span> _instance<span class=\"token punctuation\">[</span>typeName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token punctuation\">></span></span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Dictionary<span class=\"token operator\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>outObject<span class=\"token punctuation\">;</span>\n        dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token generic-method\"><span class=\"token function\">TryGetValue</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>VALUE<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KEY</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">VALUE</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> outObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_instance<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> outObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token punctuation\">></span></span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Dictionary<span class=\"token operator\">&lt;</span>KEY<span class=\"token punctuation\">,</span> VALUE<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>outObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// usage:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">GenericDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> gd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GenericDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngd<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">TestObject</span> to <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nto<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">777</span><span class=\"token punctuation\">;</span>\ngd<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intOut<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gd<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> intOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>intOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to get the int value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">TestObject</span> toOut<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gd<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> toOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>toOut<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 777</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to get the TestObject value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"URP自定义后处理特效第一篇：次元斩！","date":"2022-02-22T13:50:00.000Z","toc":true,"banner_img":"/img/DimensionalCut/DimensionalCut.png","banner_img_set":"/img/DimensionalCut/DimensionalCut.png","_content":"\n# 一、效果展示\n\n![](/img/DimensionalCut/DimensionalCut.gif)\n\n# 二、起因\n\n前段时间刷B站看到的一个DNF刃影的补丁，空间斩，链接：https://www.bilibili.com/video/BV1io4y1D7R6\n\n虽然简单但很有视觉冲击力，因此打算自己也实现一个看看，我的这个就叫次元斩好了！\n\n# 三、思路\n\n## 3.1 确定参数\n\n次元斩切开屏幕是一条直线，显然我们可以用点斜式来描述。于是首先有点的坐标(x_p, y_p)，线的斜率k，为了方便，这里k改用角度制的θ描述，并且限制θ的取值范围为0°到360°，于是我们可以得到直线公式为：\n$$\nf(x)=kx+b\\\\k=tan(θ*\\pi/180)\\\\b=y_p-kx_p\n$$\n\n我们再引入一个变量o，来表示次元斩斩开空间的程度，用偏移量offset表示，数值越大，则斩开的两侧贴图越往中间靠拢，因此单位以uv的x轴为参考，只影响x方向而不影响y方向，为0时表示无斩开效果。斩开的过程，o将从一个正数值线性地减少到0为止，即逐渐恢复为未斩开的状态\n\n在使用次元斩后的某一时刻，shader的片元着色器函数frag中，对于每个位于(x, y)的像素点都有一个进行偏移后的取值点(x_o, y)，其自变量应该为o，下面分情况讨论：\n\n如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：$x_o(o)=x-o,0°<θ<90°|180°<θ<270°,f(x)>f(x_p)$\n\n如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：$x_o(o)=x+o,0°<θ<90°|180°<θ<270°,f(x)\\leq f(x_p)$\n\n如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到左侧，即：$x_o(o)=x+o,90°<θ<180°|270°<θ<360°,f(x)>f(x_p)$\n\n如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到右侧，即：$x_0(o)=x-o,90°<θ<180°|270°<θ<360°,f(x)\\leq f(x_p)$\n\n如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的左侧，我们让左侧图片切割后偏移到右侧，即：$x_o(o)=x-o,θ=0°|θ=180°,x<x_p$\n\n如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的右侧，我们让右侧图片切割后偏移到左侧，即：$x_o(o)=x+o,θ=0°|θ=180°,x>x_p$\n\n如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：$x_o(o)=x-o,θ=90°|θ=270°,y>y_p$\n\n如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：$x_o(o)=x+o,θ=90°|θ=270°,x>x_p$\n\n综上，我们可以由此写出shader程序：\n\n```hlsl\nShader \"Custom/DimensionalCut\" {\n    Properties {\n        _MainTex(\"Main Texture\", 2D) = \"\" {}\n        _X(\"X\", float) = 0 // 原点坐标x\n        _Y(\"Y\", float) = 0 // 原点坐标y\n        _Angle(\"Angle\", float) = 0 // 角度，由此推算斜率\n        _Offset(\"Offset\", float) = 0\n    }\n\n    SubShader {\n        Tags {\"Queue\" = \"Geometry\" \"RenderType\" = \"Opaque\"}\n\n        Pass {\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            #pragma target 2.0\n            #pragma fragment frag\n            #pragma vertex vert\n            #include \"UnityCG.cginc\"\n\n            sampler2D _MainTex;\n            float _X;\n            float _Y;\n            float _Angle;\n            float _Offset;\n\n            struct AppData {\n                float4 vertex : POSITION;\n                half2 texcoord : TEXCOORD0;\n            };\n\n            struct VertexToFragment {\n                float4 pos : POSITION;\n                half2 uv : TEXCOORD0;\n            };\n\n            VertexToFragment vert(AppData v) {\n                VertexToFragment o;\n                o.pos = UnityObjectToClipPos(v.vertex);\n                o.uv = v.texcoord.xy;\n                return o;\n            }\n            \n            float F(float x) {\n                float k = tan(_Angle * 0.01745); // 1度 = π / 180 ≈ 0.01745弧度\n                float b = _Y - k * _X;\n                return k * x + b;\n            }\n\n            float WhenNeq(float x, float y) {\n                return abs(sign(x - y));\n            }\n\n            fixed4 frag(VertexToFragment i) : COLOR {\n                /*\n                    x = c > d ? a : b;\n                    =>\n                    x = lerp(a, b, step(c, d));\n                *//*\n                    y = g == h ? e : f;\n                    =>\n                    y = lerp(e, f, WhenNeq(g, h));\n                */\n                float2 offset = i.uv;\n                float a = offset.x + _Offset;\n                float b = offset.x - _Offset;\n                float c = i.uv.x;\n                float d1 = _X;\n                float d2 = F(i.uv.y);\n                float e = lerp(a, b, step(c, d1));\n                float f = lerp(a, b, step(c, d2));\n                float g = _Angle % 180;\n                float h = 90;\n                offset.x = lerp(e, f, WhenNeq(g, h));\n                return tex2D(_MainTex, frac(offset));\n            }\n            ENDCG\n        }\n    }\n}\n```\n\n其中由于优化性能的原因，去掉了if判断，改为了性能更优的lerp，step，abs，sign的写法\n\n# 四、控制与视觉反馈优化\n\n以上完成了调整offset参数来完成不同程度屏幕斩开的效果，我们需要再写一个自动调整offset变化的脚本。除此之外，为了更好的视觉反馈，我还添加了切开时有Bloom的效果。\n\n关键代码如下：\n\n```csharp\nprivate void Update() {\n    timer -= Time.deltaTime;\n    if (timer < 0) {\n        timer = 0;\n    }\n    float percent = (timer / duration);\n    offset = maxOffset * percent;\n    bloom.threshold.SetValue(new MinFloatParameter(minBloomThrehold.value + (maxBloomThrehold.value - minBloomThrehold.value) * (1 - percent), 0));\n}\n```\n\n其中的timer变量随时间减小到0，如果使用了次元斩，则timer会被设置为一个定值，表示从斩开到完全恢复所需要的时长。maxOffset表示最大能斩开的程度，实际偏移量offset由timer控制，计算完毕后直接传参数给shader的_Offset属性：`material.SetFloat(\"_Offset\", offset.value)`。bloom由指定最小值（最亮）逐渐线性地变到指定最大值（最暗）。综合起来便得到了最终效果\n","source":"_posts/DimensionalCut.md","raw":"---\ntitle: URP自定义后处理特效第一篇：次元斩！\ndate: 2022-02-22 21:50:00\ntoc: true\ntags:\n- Unity\n- URP\n- PostEffect\ncategories:\n- Unity\nbanner_img: /img/DimensionalCut/DimensionalCut.png\nbanner_img_set: /img/DimensionalCut/DimensionalCut.png\n---\n\n# 一、效果展示\n\n![](/img/DimensionalCut/DimensionalCut.gif)\n\n# 二、起因\n\n前段时间刷B站看到的一个DNF刃影的补丁，空间斩，链接：https://www.bilibili.com/video/BV1io4y1D7R6\n\n虽然简单但很有视觉冲击力，因此打算自己也实现一个看看，我的这个就叫次元斩好了！\n\n# 三、思路\n\n## 3.1 确定参数\n\n次元斩切开屏幕是一条直线，显然我们可以用点斜式来描述。于是首先有点的坐标(x_p, y_p)，线的斜率k，为了方便，这里k改用角度制的θ描述，并且限制θ的取值范围为0°到360°，于是我们可以得到直线公式为：\n$$\nf(x)=kx+b\\\\k=tan(θ*\\pi/180)\\\\b=y_p-kx_p\n$$\n\n我们再引入一个变量o，来表示次元斩斩开空间的程度，用偏移量offset表示，数值越大，则斩开的两侧贴图越往中间靠拢，因此单位以uv的x轴为参考，只影响x方向而不影响y方向，为0时表示无斩开效果。斩开的过程，o将从一个正数值线性地减少到0为止，即逐渐恢复为未斩开的状态\n\n在使用次元斩后的某一时刻，shader的片元着色器函数frag中，对于每个位于(x, y)的像素点都有一个进行偏移后的取值点(x_o, y)，其自变量应该为o，下面分情况讨论：\n\n如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：$x_o(o)=x-o,0°<θ<90°|180°<θ<270°,f(x)>f(x_p)$\n\n如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：$x_o(o)=x+o,0°<θ<90°|180°<θ<270°,f(x)\\leq f(x_p)$\n\n如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到左侧，即：$x_o(o)=x+o,90°<θ<180°|270°<θ<360°,f(x)>f(x_p)$\n\n如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到右侧，即：$x_0(o)=x-o,90°<θ<180°|270°<θ<360°,f(x)\\leq f(x_p)$\n\n如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的左侧，我们让左侧图片切割后偏移到右侧，即：$x_o(o)=x-o,θ=0°|θ=180°,x<x_p$\n\n如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的右侧，我们让右侧图片切割后偏移到左侧，即：$x_o(o)=x+o,θ=0°|θ=180°,x>x_p$\n\n如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：$x_o(o)=x-o,θ=90°|θ=270°,y>y_p$\n\n如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：$x_o(o)=x+o,θ=90°|θ=270°,x>x_p$\n\n综上，我们可以由此写出shader程序：\n\n```hlsl\nShader \"Custom/DimensionalCut\" {\n    Properties {\n        _MainTex(\"Main Texture\", 2D) = \"\" {}\n        _X(\"X\", float) = 0 // 原点坐标x\n        _Y(\"Y\", float) = 0 // 原点坐标y\n        _Angle(\"Angle\", float) = 0 // 角度，由此推算斜率\n        _Offset(\"Offset\", float) = 0\n    }\n\n    SubShader {\n        Tags {\"Queue\" = \"Geometry\" \"RenderType\" = \"Opaque\"}\n\n        Pass {\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            #pragma target 2.0\n            #pragma fragment frag\n            #pragma vertex vert\n            #include \"UnityCG.cginc\"\n\n            sampler2D _MainTex;\n            float _X;\n            float _Y;\n            float _Angle;\n            float _Offset;\n\n            struct AppData {\n                float4 vertex : POSITION;\n                half2 texcoord : TEXCOORD0;\n            };\n\n            struct VertexToFragment {\n                float4 pos : POSITION;\n                half2 uv : TEXCOORD0;\n            };\n\n            VertexToFragment vert(AppData v) {\n                VertexToFragment o;\n                o.pos = UnityObjectToClipPos(v.vertex);\n                o.uv = v.texcoord.xy;\n                return o;\n            }\n            \n            float F(float x) {\n                float k = tan(_Angle * 0.01745); // 1度 = π / 180 ≈ 0.01745弧度\n                float b = _Y - k * _X;\n                return k * x + b;\n            }\n\n            float WhenNeq(float x, float y) {\n                return abs(sign(x - y));\n            }\n\n            fixed4 frag(VertexToFragment i) : COLOR {\n                /*\n                    x = c > d ? a : b;\n                    =>\n                    x = lerp(a, b, step(c, d));\n                *//*\n                    y = g == h ? e : f;\n                    =>\n                    y = lerp(e, f, WhenNeq(g, h));\n                */\n                float2 offset = i.uv;\n                float a = offset.x + _Offset;\n                float b = offset.x - _Offset;\n                float c = i.uv.x;\n                float d1 = _X;\n                float d2 = F(i.uv.y);\n                float e = lerp(a, b, step(c, d1));\n                float f = lerp(a, b, step(c, d2));\n                float g = _Angle % 180;\n                float h = 90;\n                offset.x = lerp(e, f, WhenNeq(g, h));\n                return tex2D(_MainTex, frac(offset));\n            }\n            ENDCG\n        }\n    }\n}\n```\n\n其中由于优化性能的原因，去掉了if判断，改为了性能更优的lerp，step，abs，sign的写法\n\n# 四、控制与视觉反馈优化\n\n以上完成了调整offset参数来完成不同程度屏幕斩开的效果，我们需要再写一个自动调整offset变化的脚本。除此之外，为了更好的视觉反馈，我还添加了切开时有Bloom的效果。\n\n关键代码如下：\n\n```csharp\nprivate void Update() {\n    timer -= Time.deltaTime;\n    if (timer < 0) {\n        timer = 0;\n    }\n    float percent = (timer / duration);\n    offset = maxOffset * percent;\n    bloom.threshold.SetValue(new MinFloatParameter(minBloomThrehold.value + (maxBloomThrehold.value - minBloomThrehold.value) * (1 - percent), 0));\n}\n```\n\n其中的timer变量随时间减小到0，如果使用了次元斩，则timer会被设置为一个定值，表示从斩开到完全恢复所需要的时长。maxOffset表示最大能斩开的程度，实际偏移量offset由timer控制，计算完毕后直接传参数给shader的_Offset属性：`material.SetFloat(\"_Offset\", offset.value)`。bloom由指定最小值（最亮）逐渐线性地变到指定最大值（最暗）。综合起来便得到了最终效果\n","slug":"DimensionalCut","published":1,"updated":"2022-02-27T06:47:56.249Z","_id":"cl04wml490006jowze9hwa1pb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-效果展示\"><a class=\"markdownIt-Anchor\" href=\"#一-效果展示\"></a> 一、效果展示</h1>\n<p><img src=\"/img/DimensionalCut/DimensionalCut.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/DimensionalCut/DimensionalCut.gif\" class=\"lozad post-image lozad post-image lozad post-image lozad post-image lozad post-image lozad post-image lozad post-image\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/DimensionalCut/DimensionalCut.gif\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/DimensionalCut/DimensionalCut.gif\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/DimensionalCut/DimensionalCut.gif\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/DimensionalCut/DimensionalCut.gif\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/DimensionalCut/DimensionalCut.gif\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/DimensionalCut/DimensionalCut.gif\"></p>\n<h1 id=\"二-起因\"><a class=\"markdownIt-Anchor\" href=\"#二-起因\"></a> 二、起因</h1>\n<p>前段时间刷B站看到的一个DNF刃影的补丁，空间斩，链接：<a href=\"https://www.bilibili.com/video/BV1io4y1D7R6\">https://www.bilibili.com/video/BV1io4y1D7R6</a></p>\n<p>虽然简单但很有视觉冲击力，因此打算自己也实现一个看看，我的这个就叫次元斩好了！</p>\n<h1 id=\"三-思路\"><a class=\"markdownIt-Anchor\" href=\"#三-思路\"></a> 三、思路</h1>\n<h2 id=\"31-确定参数\"><a class=\"markdownIt-Anchor\" href=\"#31-确定参数\"></a> 3.1 确定参数</h2>\n<p>次元斩切开屏幕是一条直线，显然我们可以用点斜式来描述。于是首先有点的坐标(x_p, y_p)，线的斜率k，为了方便，这里k改用角度制的θ描述，并且限制θ的取值范围为0°到360°，于是我们可以得到直线公式为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi><mi>x</mi><mo>+</mo><mi>b</mi><mspace linebreak=\"newline\"></mspace><mi>k</mi><mo>=</mo><mi>t</mi><mi>a</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo>∗</mo><mi>π</mi><mi mathvariant=\"normal\">/</mi><mn>180</mn><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>b</mi><mo>=</mo><msub><mi>y</mi><mi>p</mi></msub><mo>−</mo><mi>k</mi><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">f(x)=kx+b\\\\k=tan(θ*\\pi/180)\\\\b=y_p-kx_p\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8694379999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>我们再引入一个变量o，来表示次元斩斩开空间的程度，用偏移量offset表示，数值越大，则斩开的两侧贴图越往中间靠拢，因此单位以uv的x轴为参考，只影响x方向而不影响y方向，为0时表示无斩开效果。斩开的过程，o将从一个正数值线性地减少到0为止，即逐渐恢复为未斩开的状态</p>\n<p>在使用次元斩后的某一时刻，shader的片元着色器函数frag中，对于每个位于(x, y)的像素点都有一个进行偏移后的取值点(x_o, y)，其自变量应该为o，下面分情况讨论：</p>\n<p>如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x-o,0°&lt;θ&lt;90°|180°&lt;θ&lt;270°,f(x)&gt;f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,0°&lt;θ&lt;90°|180°&lt;θ&lt;270°,f(x)\\leq f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>360</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,90°&lt;θ&lt;180°|270°&lt;θ&lt;360°,f(x)&gt;f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>360</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_0(o)=x-o,90°&lt;θ&lt;180°|270°&lt;θ&lt;360°,f(x)\\leq f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的左侧，我们让左侧图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&lt;</mo><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x-o,θ=0°|θ=180°,x&lt;x_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的右侧，我们让右侧图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&gt;</mo><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,θ=0°|θ=180°,x&gt;x_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>&gt;</mo><msub><mi>y</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x-o,θ=90°|θ=270°,y&gt;y_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&gt;</mo><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,θ=90°|θ=270°,x&gt;x_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>综上，我们可以由此写出shader程序：</p>\n<pre class=\"line-numbers language-hlsl\" data-language=\"hlsl\"><code class=\"language-hlsl\">Shader <span class=\"token string\">\"Custom/DimensionalCut\"</span> <span class=\"token punctuation\">&#123;</span>\n    Properties <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_MainTex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Texture\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 原点坐标x</span>\n        <span class=\"token function\">_Y</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 原点坐标y</span>\n        <span class=\"token function\">_Angle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Angle\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 角度，由此推算斜率</span>\n        <span class=\"token function\">_Offset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    SubShader <span class=\"token punctuation\">&#123;</span>\n        Tags <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Queue\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Geometry\"</span> <span class=\"token string\">\"RenderType\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Opaque\"</span><span class=\"token punctuation\">&#125;</span>\n\n        Pass <span class=\"token punctuation\">&#123;</span>\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">target <span class=\"token number\">2.0</span></span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _X<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Y<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Angle<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Offset<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">AppData</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexToFragment</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> pos <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            VertexToFragment <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>AppData v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                VertexToFragment o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token keyword\">float</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float</span> k <span class=\"token operator\">=</span> <span class=\"token function\">tan</span><span class=\"token punctuation\">(</span>_Angle <span class=\"token operator\">*</span> <span class=\"token number\">0.01745</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1度 = π / 180 ≈ 0.01745弧度</span>\n                <span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> _Y <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> _X<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> k <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">float</span> <span class=\"token function\">WhenNeq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>VertexToFragment i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> COLOR <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">/*\n                    x = c > d ? a : b;\n                    =>\n                    x = lerp(a, b, step(c, d));\n                */</span><span class=\"token comment\">/*\n                    y = g == h ? e : f;\n                    =>\n                    y = lerp(e, f, WhenNeq(g, h));\n                */</span>\n                <span class=\"token keyword\">float2</span> offset <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _Offset<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> _Offset<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> d1 <span class=\"token operator\">=</span> _X<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> d2 <span class=\"token operator\">=</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> e <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> g <span class=\"token operator\">=</span> _Angle <span class=\"token operator\">%</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> h <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n                offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token function\">WhenNeq</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ENDCG\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中由于优化性能的原因，去掉了if判断，改为了性能更优的lerp，step，abs，sign的写法</p>\n<h1 id=\"四-控制与视觉反馈优化\"><a class=\"markdownIt-Anchor\" href=\"#四-控制与视觉反馈优化\"></a> 四、控制与视觉反馈优化</h1>\n<p>以上完成了调整offset参数来完成不同程度屏幕斩开的效果，我们需要再写一个自动调整offset变化的脚本。除此之外，为了更好的视觉反馈，我还添加了切开时有Bloom的效果。</p>\n<p>关键代码如下：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    timer <span class=\"token operator\">-=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> percent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timer <span class=\"token operator\">/</span> duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    offset <span class=\"token operator\">=</span> maxOffset <span class=\"token operator\">*</span> percent<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MinFloatParameter</span><span class=\"token punctuation\">(</span>minBloomThrehold<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>maxBloomThrehold<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">-</span> minBloomThrehold<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中的timer变量随时间减小到0，如果使用了次元斩，则timer会被设置为一个定值，表示从斩开到完全恢复所需要的时长。maxOffset表示最大能斩开的程度，实际偏移量offset由timer控制，计算完毕后直接传参数给shader的_Offset属性：<code>material.SetFloat(&quot;_Offset&quot;, offset.value)</code>。bloom由指定最小值（最亮）逐渐线性地变到指定最大值（最暗）。综合起来便得到了最终效果</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-效果展示\"><a class=\"markdownIt-Anchor\" href=\"#一-效果展示\"></a> 一、效果展示</h1>\n<p><img src=\"/img/DimensionalCut/DimensionalCut.gif\" alt=\"\" /></p>\n<h1 id=\"二-起因\"><a class=\"markdownIt-Anchor\" href=\"#二-起因\"></a> 二、起因</h1>\n<p>前段时间刷B站看到的一个DNF刃影的补丁，空间斩，链接：<a href=\"https://www.bilibili.com/video/BV1io4y1D7R6\">https://www.bilibili.com/video/BV1io4y1D7R6</a></p>\n<p>虽然简单但很有视觉冲击力，因此打算自己也实现一个看看，我的这个就叫次元斩好了！</p>\n<h1 id=\"三-思路\"><a class=\"markdownIt-Anchor\" href=\"#三-思路\"></a> 三、思路</h1>\n<h2 id=\"31-确定参数\"><a class=\"markdownIt-Anchor\" href=\"#31-确定参数\"></a> 3.1 确定参数</h2>\n<p>次元斩切开屏幕是一条直线，显然我们可以用点斜式来描述。于是首先有点的坐标(x_p, y_p)，线的斜率k，为了方便，这里k改用角度制的θ描述，并且限制θ的取值范围为0°到360°，于是我们可以得到直线公式为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi><mi>x</mi><mo>+</mo><mi>b</mi><mspace linebreak=\"newline\"></mspace><mi>k</mi><mo>=</mo><mi>t</mi><mi>a</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo>∗</mo><mi>π</mi><mi mathvariant=\"normal\">/</mi><mn>180</mn><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>b</mi><mo>=</mo><msub><mi>y</mi><mi>p</mi></msub><mo>−</mo><mi>k</mi><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">f(x)=kx+b\\\\k=tan(θ*\\pi/180)\\\\b=y_p-kx_p\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8694379999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>我们再引入一个变量o，来表示次元斩斩开空间的程度，用偏移量offset表示，数值越大，则斩开的两侧贴图越往中间靠拢，因此单位以uv的x轴为参考，只影响x方向而不影响y方向，为0时表示无斩开效果。斩开的过程，o将从一个正数值线性地减少到0为止，即逐渐恢复为未斩开的状态</p>\n<p>在使用次元斩后的某一时刻，shader的片元着色器函数frag中，对于每个位于(x, y)的像素点都有一个进行偏移后的取值点(x_o, y)，其自变量应该为o，下面分情况讨论：</p>\n<p>如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x-o,0°&lt;θ&lt;90°|180°&lt;θ&lt;270°,f(x)&gt;f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ在1，3象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,0°&lt;θ&lt;90°|180°&lt;θ&lt;270°,f(x)\\leq f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>360</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,90°&lt;θ&lt;180°|270°&lt;θ&lt;360°,f(x)&gt;f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ在2，4象限，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo>&lt;</mo><mi>θ</mi><mo>&lt;</mo><mn>360</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_0(o)=x-o,90°&lt;θ&lt;180°|270°&lt;θ&lt;360°,f(x)\\leq f(x_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的左侧，我们让左侧图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&lt;</mo><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x-o,θ=0°|θ=180°,x&lt;x_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>如果θ为0°或180°，且当前像素点坐标位于次元斩切割直线的右侧，我们让右侧图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>0</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>180</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&gt;</mo><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,θ=0°|θ=180°,x&gt;x_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的上方，我们让上方图片切割后偏移到右侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>&gt;</mo><msub><mi>y</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x-o,θ=90°|θ=270°,y&gt;y_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>如果θ为90°或270° ，且当前像素点坐标位于次元斩切割直线的下方，我们让下方图片切割后偏移到左侧，即：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mi>o</mi></msub><mo stretchy=\"false\">(</mo><mi>o</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>o</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo>=</mo><mn>90</mn><mi mathvariant=\"normal\">°</mi><mi mathvariant=\"normal\">∣</mi><mi>θ</mi><mo>=</mo><mn>270</mn><mi mathvariant=\"normal\">°</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&gt;</mo><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_o(o)=x+o,θ=90°|θ=270°,x&gt;x_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">°</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>综上，我们可以由此写出shader程序：</p>\n<pre class=\"line-numbers language-hlsl\" data-language=\"hlsl\"><code class=\"language-hlsl\">Shader <span class=\"token string\">\"Custom/DimensionalCut\"</span> <span class=\"token punctuation\">&#123;</span>\n    Properties <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_MainTex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Texture\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 原点坐标x</span>\n        <span class=\"token function\">_Y</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 原点坐标y</span>\n        <span class=\"token function\">_Angle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Angle\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 角度，由此推算斜率</span>\n        <span class=\"token function\">_Offset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    SubShader <span class=\"token punctuation\">&#123;</span>\n        Tags <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Queue\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Geometry\"</span> <span class=\"token string\">\"RenderType\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Opaque\"</span><span class=\"token punctuation\">&#125;</span>\n\n        Pass <span class=\"token punctuation\">&#123;</span>\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">target <span class=\"token number\">2.0</span></span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _X<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Y<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Angle<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Offset<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">AppData</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexToFragment</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> pos <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            VertexToFragment <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>AppData v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                VertexToFragment o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token keyword\">float</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float</span> k <span class=\"token operator\">=</span> <span class=\"token function\">tan</span><span class=\"token punctuation\">(</span>_Angle <span class=\"token operator\">*</span> <span class=\"token number\">0.01745</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1度 = π / 180 ≈ 0.01745弧度</span>\n                <span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> _Y <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> _X<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> k <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">float</span> <span class=\"token function\">WhenNeq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>VertexToFragment i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> COLOR <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">/*\n                    x = c > d ? a : b;\n                    =>\n                    x = lerp(a, b, step(c, d));\n                */</span><span class=\"token comment\">/*\n                    y = g == h ? e : f;\n                    =>\n                    y = lerp(e, f, WhenNeq(g, h));\n                */</span>\n                <span class=\"token keyword\">float2</span> offset <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _Offset<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> _Offset<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> d1 <span class=\"token operator\">=</span> _X<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> d2 <span class=\"token operator\">=</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> e <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> g <span class=\"token operator\">=</span> _Angle <span class=\"token operator\">%</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float</span> h <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n                offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token function\">WhenNeq</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ENDCG\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中由于优化性能的原因，去掉了if判断，改为了性能更优的lerp，step，abs，sign的写法</p>\n<h1 id=\"四-控制与视觉反馈优化\"><a class=\"markdownIt-Anchor\" href=\"#四-控制与视觉反馈优化\"></a> 四、控制与视觉反馈优化</h1>\n<p>以上完成了调整offset参数来完成不同程度屏幕斩开的效果，我们需要再写一个自动调整offset变化的脚本。除此之外，为了更好的视觉反馈，我还添加了切开时有Bloom的效果。</p>\n<p>关键代码如下：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    timer <span class=\"token operator\">-=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> percent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timer <span class=\"token operator\">/</span> duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    offset <span class=\"token operator\">=</span> maxOffset <span class=\"token operator\">*</span> percent<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MinFloatParameter</span><span class=\"token punctuation\">(</span>minBloomThrehold<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>maxBloomThrehold<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">-</span> minBloomThrehold<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中的timer变量随时间减小到0，如果使用了次元斩，则timer会被设置为一个定值，表示从斩开到完全恢复所需要的时长。maxOffset表示最大能斩开的程度，实际偏移量offset由timer控制，计算完毕后直接传参数给shader的_Offset属性：<code>material.SetFloat(&quot;_Offset&quot;, offset.value)</code>。bloom由指定最小值（最亮）逐渐线性地变到指定最大值（最暗）。综合起来便得到了最终效果</p>\n"},{"title":"心电图Shader","date":"2021-09-30T18:20:00.000Z","toc":true,"banner_img":"/img/ECG.jpg","banner_img_set":"/img/ECG.jpg","_content":"\n# 效果预览\n\n这个Shader是比赛的废案，至于为什么是废案？详见文章：[2021 益游未尽 作品——《气候护卫队》](https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/2021/09/30/2021YiYouWeiJin/)\n\n效果如下，这里演示的是正常心跳的波形循环\n![](/img/2021YiYouWeiJin/ECG.gif)\n\n# Shader代码\n\nfrag中的主要工作是，把所有的效果叠加（波形线条、拖尾特效、闪烁特效、格子）\n\n```glsl\nShader \"Custom/ECG\" {\n    Properties {\n        [Header(Color Setting)]\n        _backgroundColor(\"Background Color\", Color) = (0, 0, 0, 1)\n        _lineColor(\"Line Color\", Color) = (0, 1, 0, 1)\n\n        [Header(Line Setting)]\n        [PowerSlider(3)]\n        _lineWidth(\"Line Width\", Range(0, 0.5)) = 0.02\n        _lightTailLength(\"Light Tail Length\", Range(0, 2)) = 1\n        \n        [Header(Grid Setting _ 1 small grid.xy equal 0.04s 0.1mV)]\n        _bigGridCount(\"Big Grid Count\", vector) = (5, 5, 0, 0)\n        _bigGridWidth(\"Big Grid Width\", Range(0, 1)) = 0.15\n        _bigGridAlpha(\"Big Grid Alpha\", Range(0, 1)) = 1\n        _smallGridWidth(\"Small Grid Width\", Range(0, 1)) = 0.2\n        _smallGridAlpha(\"Small Grid Alpha\", Range(0, 1)) = 0.75\n\n        [Header(Other Setting)]\n        _lightPoundAlpha(\"Light Pound Alpha\", Range(0, 1)) = 0.125\n    }\n\n    SubShader{\n        Pass {\n            CGPROGRAM\n\n            #pragma vertex vert\n            #pragma fragment frag\n\n            #include \"UnityCG.cginc\"\n\n            #define PI 3.14159\n\n            // 一大格所代表的量, x为时间, y为电压\n            #define GRID_X_SECOND (0.04 * 5)\n            #define GRID_Y_MV (0.1 * 5)\n\n            #define _ECG_Len 100\n            fixed _ECG_Arr[_ECG_Len]; // 心电图波形数据，由C#代码传入，长度固定100\n\n            struct appdata {\n                float4 vertex : POSITION;\n                fixed4 uv : TEXCOORD0;\n            };\n\n            struct v2f {\n                float4 pos : SV_POSITION;\n                fixed4 uv : TEXCOORD0;\n            };\n\n            // Color Setting\n            fixed4 _backgroundColor;\n            fixed4 _lineColor;\n            // Line Setting\n            fixed _lineWidth;\n            fixed _lightTailLength;\n            // Grid Setting\n            half4 _bigGridCount;\n            fixed _bigGridWidth;\n            fixed _bigGridAlpha;\n            fixed _smallGridWidth;\n            fixed _smallGridAlpha;\n            // Other Setting\n            fixed _lightPoundAlpha;\n\n            // 心跳波形\n            fixed HeartbeatFunc(fixed2 uv, fixed lightWidth) {\n                half x = uv.x * (_ECG_Len - 1); // [0, 1] => [0, len - 1]\n                int xl = floor(x);\n                int xr = (xl + 1) % _ECG_Len;\n                fixed y = lerp(_ECG_Arr[xl], _ECG_Arr[xr], frac(x)) / 2 + 0.5; // y值+0.5以将曲线移动到屏幕中间\n                return 1.0 - smoothstep(0.0, lightWidth, abs(uv.y - y));\n            }\n\n            // 光拖尾(按时间透明化尾部)效果\n            half LightFunc(fixed2 uv, half lightInterval, fixed lightTail) {\n                half tt = _Time[1] % lightInterval;\n                half lightSpeed = 1 / lightInterval;\n                half highlightX = tt * lightSpeed; // the leftest highlightX\n                half delta; // pixel distance from the first hightlightX on the right, delta~[0,1]\n                if (uv.x <= highlightX) {\n                    delta = highlightX - uv.x;\n                } else {\n                    delta = 1 - frac(uv.x - highlightX);\n                }\n                half light = lightTail > delta ? (lightTail - delta) : 0.0;\n                return light;\n            }\n\n            // take the screen coordinates, return the 0~1 alpha according to the pound function\n            // 屏幕闪烁效果\n            fixed PoundFunc(fixed2 uv, half lightInterval) {\n                half tt = (_Time[1] - uv.x * lightInterval / 2.0) % lightInterval;\n                half percent = tt / 0.8f; // pound lasts 0.8 seconds\n                return percent > 0.1 ? (-1.0 / 0.9 * (percent - 1.0)) : 0;\n            }\n\n            fixed TriangularWave(half x) { // => [-1, 1]\n                return abs(frac(x) * 2 - 1) - 0.5;\n            }\n\n            // take the screen coordinates, return the 0~1 alpha according to the grid function\n            fixed GridFunc(fixed2 uv, half2 gridXY) {\n                fixed scanlineX = TriangularWave(uv.x * gridXY.x) - 0.5;\n                fixed scanlineY = TriangularWave(uv.y * gridXY.y) - 0.5;\n                return max(scanlineX, scanlineY);\n            }\n\n            v2f vert(appdata v) {\n                v2f o;\n                o.pos = UnityObjectToClipPos(v.vertex);\n                o.uv = v.uv;\n                return o;\n            }\n\n            fixed4 frag(v2f i) : SV_Target {\n                fixed heartbeat = HeartbeatFunc(i.uv, _lineWidth);\n                half totalInterval = GRID_X_SECOND * _bigGridCount.x;\n                half light = LightFunc(i.uv, totalInterval, _lightTailLength);\n                fixed pound = PoundFunc(i.uv, totalInterval) * _lightPoundAlpha;\n                fixed bigGrid = (GridFunc(i.uv, _bigGridCount) + _bigGridWidth) * _bigGridAlpha;\n                fixed smallGrid = (GridFunc(i.uv, _bigGridCount * 5) + _smallGridWidth) * _smallGridAlpha;\n                fixed grid = max(bigGrid, smallGrid);\n\n                fixed alpha = heartbeat * light + pound;\n                alpha = max(alpha, grid);\n                fixed4 fragColor = lerp(_backgroundColor, _lineColor, alpha);\n                return fragColor;\n            }\n            ENDCG\n        }\n    }\n}\n```\n# C#代码：传递波形数据给Shader\n\nC#代码的主要工作是传入波形数据数组给Shader\n\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ECG : MonoBehaviour {\n    public Material material;\n    public Renderer renderer;\n\n    private Vector2 bigGridCount;\n    private float totalInterval;\n\n    private float heartRate = 0;\n    private int preX = 0;\n\n    private const int WAVE_ARR_LEN = 100;\n    private float[] wave = new float[WAVE_ARR_LEN];\n\n    // 一大格所代表的量, x为时间(s), y为电压(mV)\n    private const float GRID_X_SEC = 0.04f * 5;\n    private const float GRID_Y_MV = 0.1f * 5;\n\n    // 正常波形, 参考周期 = 0.8s, 参考峰值 = 1mV\n    private const float REGULAR_WAVE_REFER_T = 0.8f; // time s\n    private const float REGULAR_WAVE_REFER_F = 1 / REGULAR_WAVE_REFER_T * 60; // frequency bpm\n    private const float REGULAR_WAVE_REFER_P = 1; // peak val mV\n    private readonly float[] REGULAR_WAVE_ARR = { 0.025f, 0.025f, 0.025f, 0.025f, 0.022f, 0.031f, 0.058f, 0.099f, 0.133f, 0.161f, 0.181f, 0.19f, 0.191f, 0.182f, 0.163f, 0.135f, 0.102f, 0.06f, 0.032f, 0.022f, 0.025f, 0.025f, 0.029f, 0.018f, -0.023f, -0.068f, -0.037f, 0.059f, 0.255f, 0.578f, 0.983f, 1.0f, 0.498f, -0.097f, -0.273f, -0.13f, 0.002f, 0.037f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.024f, 0.032f, 0.052f, 0.078f, 0.1f, 0.12f, 0.14f, 0.159f, 0.179f, 0.196f, 0.212f, 0.225f, 0.237f, 0.246f, 0.25f, 0.248f, 0.24f, 0.225f, 0.206f, 0.184f, 0.161f, 0.134f, 0.101f, 0.06f, 0.031f, 0.022f, 0.025f, 0.025f, 0.023f, 0.03f, 0.052f, 0.082f, 0.101f, 0.111f, 0.11f, 0.098f, 0.078f, 0.06f, 0.043f, 0.031f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f };\n\n    // 插值计算波形值\n    float GetWaveY(float[] waveArr, float x, float peakVal) {\n        if (x < 0) {\n            x += ((-x / WAVE_ARR_LEN) + 1) * WAVE_ARR_LEN;\n        }\n        x %= WAVE_ARR_LEN;\n        int xl = Mathf.FloorToInt(x) % WAVE_ARR_LEN;\n        int xr = (xl + 1) % WAVE_ARR_LEN;\n        return Mathf.Lerp(waveArr[xl], waveArr[xr], x - xl) * peakVal;\n    }\n\n    void Start() {\n        // 获取必要属性\n        bigGridCount = material.GetVector(\"_bigGridCount\");\n        totalInterval = GRID_X_SEC * bigGridCount.x; // 总时长 = 大格子时间 * 大格子数量.x\n        material.SetFloatArray(\"_ECG_Arr\", wave);\n        renderer.material = material;\n    }\n\n    delegate void FillLambda(int end);\n\n    // 展示单独一种波的循环\n    void ShowSingleWave(float[] waveArr, float interval, float peakVal) {\n        // 根据shader时间获取当前扫描进度，相当于获取了x坐标\n        float shaderTime1 = Shader.GetGlobalVector(\"_Time\")[1];\n        float scanProcess = shaderTime1 % totalInterval / totalInterval; // 值域[0, 1]\n        int x = (int)(scanProcess * WAVE_ARR_LEN);\n\n        // 根据波形周期计算此时波形进度\n        float waveProcess = (shaderTime1 % interval) / interval;\n\n        // 更新此时x位置波形数据\n        wave[x] = GetWaveY(waveArr, waveProcess * WAVE_ARR_LEN, peakVal);\n\n        // 补上上一帧和这一帧中间未打的点\n        FillLambda Fill = (int end) => {\n            for (; preX < end; ++preX) {\n                float preShaderTime1 = shaderTime1 - (totalInterval / WAVE_ARR_LEN) * (end - preX);\n                float preWaveProcess = (preShaderTime1 % interval) / interval;\n                wave[preX] = GetWaveY(waveArr, preWaveProcess * WAVE_ARR_LEN, peakVal);\n            }\n        };\n        Fill(x);\n        if (preX > x) {\n            Fill(WAVE_ARR_LEN);\n            preX = 0;\n            Fill(x);\n        }\n\n        // 赋值给shader\n        material.SetFloatArray(\"_ECG_Arr\", wave);\n        Debug.Log(\"scanProcess: \" + (scanProcess * 100) + \"%\");\n    }\n\n    void Update() {\n        ShowSingleWave(REGULAR_WAVE_ARR, REGULAR_WAVE_REFER_T, REGULAR_WAVE_REFER_P);\n    }\n}\n```\n\n# Python代码：用于生成特定长度的波形数组\n\n代码中的REGULAR_WAVE_ARR数组，来源于一个Python脚本\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.signal import savgol_filter\nimport pyperclip\n\n# 原始数据，用图片画格子数出来的\n# 正常波形, 参考心率 = 75bpm, 参考峰值 = 1mV\n# y = [0.2, 0.2,                                         # |\n#      0.2, 1.0, 1.5, 1.5, 1.0, 0.2,                     # P\n#      0.2, 0.2,                                         # |\n#     -0.8,                                              # Q\n#      2.0, 10.0,                                        # R\n#     -3.0, 0.2,                                         # S\n#      0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # |\n#      0.2, 0.7, 1.1, 1.5, 1.8, 2.0, 1.9, 1.5, 1.0, 0.2, # T\n#      0.2,                                              # |\n#      0.2, 0.8, 0.9, 0.5, 0.2,                          # U\n#      0.2, 0.2]                                         # |\n\n# 房颤 = (正常 - P + f杂波) & 心律不齐, 参考心率 = 75bpm, 参考峰值 = 1mV\n# f杂波频率350~600bpm, 此参考波形数据未添加杂乱和心律不齐两种特征, 请自行使用sin和rand等函数实现\ny = [0.2, 0.2,                                         # |\n     0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # | (P)\n     0.2, 0.2,                                         # |\n    -0.8,                                              # Q\n     2.0, 10.0,                                        # R\n    -3.0, 0.2,                                         # S\n     0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # |\n     0.2, 0.7, 1.1, 1.5, 1.8, 2.0, 1.9, 1.5, 1.0, 0.2, # T\n     0.2,                                              # |\n     0.2, 0.8, 0.9, 0.5, 0.2,                          # U\n     0.2, 0.2]                                         # |\n\n# 室颤 = 杂波\n\ny = np.array(y)\nx = np.arange(0, len(y), 1)\n\n# 线性插值扩展数组长度\nlenEx = 100\nxEx = np.arange(0, len(y), len(y) / lenEx)\ny = np.interp(xEx, x, y)\n\n# 平滑曲线。参数1为输入曲线；参数2为卷积窗口值，越大越平滑，越小越接近原始曲线；参数3为方程次数，这里用三次方程拟合\ny_smooth = savgol_filter(y, 5, 3, mode = 'nearest')\ny_normalize = y_smooth / max(y_smooth) # 归一化\n\n# 调整小数精度为3, 并以C#代码格式打印目标数据\ncsOutput = \"{ \" + \"f, \".join(str(round(i, 3)) for i in y_normalize) + \"f };\"\npyperclip.copy(csOutput)\nprint(\"### 输出数据已复制至剪贴板！ ###\")\nprint(csOutput)\nprint(\"### 输出数据已复制至剪贴板！ ###\")\n\n# 绘制目标曲线\nplt.ylim(min(y), max(y))\nplt.xlim(min(xEx), max(xEx))\nplt.plot(xEx, y, '1-', label = 'raw')\nplt.plot(xEx, y_smooth, 'r-', label = 'smooth')\nplt.plot(xEx, y_normalize, 'b-', label = 'normalize')\nplt.legend()\nplt.show()\n```\n\n波形的原始数据是直接用截图，数格子数出来的，上面的注释P、Q、R、S、T、U分别对应着心电图的特征线段，这里需要学习专业知识，当然也可以简单看看下图的描述（此波形为正常波形）\n\n![](/img/ECG_regular.jpg)\n\n# 使用方法\n\n1. 创建一个3D Object: Plane，面向屏幕，铺满屏幕\n\n2. 创建一个Material，选择Shader: Custom/ECG\n\n3. Plane替换上述材质\n\n4. Plane挂载ECG.cs脚本，脚本上挂载上述材质，挂载自己的Renderer\n\n5. 可修改C#脚本内的心电图数组数据来输出不同的波形。数据可由上述Python代码来插值生成平滑曲线\n\n# 总结\n\n这些代码虽然是废案，但是其实也可以使用。如果要再优化的话，或许应该考虑一下数据来源部分——如何才能更好地模拟游戏中各种情况下病人的心电数据？这里还有很多需要学习的地方，专业知识还需要再多学习，最好至少能摸一次心电监护仪，有专业人士讲解等等...\n\n总之这些代码暂时先这样吧，等之后有需要了再调整。","source":"_posts/ECG-Shader.md","raw":"---\ntitle: 心电图Shader\ndate: 2021-10-1 02:20:00\ntoc: true\ntags:\n- Shader\ncategories:\n- Shader\nbanner_img: /img/ECG.jpg\nbanner_img_set: /img/ECG.jpg\n---\n\n# 效果预览\n\n这个Shader是比赛的废案，至于为什么是废案？详见文章：[2021 益游未尽 作品——《气候护卫队》](https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/2021/09/30/2021YiYouWeiJin/)\n\n效果如下，这里演示的是正常心跳的波形循环\n![](/img/2021YiYouWeiJin/ECG.gif)\n\n# Shader代码\n\nfrag中的主要工作是，把所有的效果叠加（波形线条、拖尾特效、闪烁特效、格子）\n\n```glsl\nShader \"Custom/ECG\" {\n    Properties {\n        [Header(Color Setting)]\n        _backgroundColor(\"Background Color\", Color) = (0, 0, 0, 1)\n        _lineColor(\"Line Color\", Color) = (0, 1, 0, 1)\n\n        [Header(Line Setting)]\n        [PowerSlider(3)]\n        _lineWidth(\"Line Width\", Range(0, 0.5)) = 0.02\n        _lightTailLength(\"Light Tail Length\", Range(0, 2)) = 1\n        \n        [Header(Grid Setting _ 1 small grid.xy equal 0.04s 0.1mV)]\n        _bigGridCount(\"Big Grid Count\", vector) = (5, 5, 0, 0)\n        _bigGridWidth(\"Big Grid Width\", Range(0, 1)) = 0.15\n        _bigGridAlpha(\"Big Grid Alpha\", Range(0, 1)) = 1\n        _smallGridWidth(\"Small Grid Width\", Range(0, 1)) = 0.2\n        _smallGridAlpha(\"Small Grid Alpha\", Range(0, 1)) = 0.75\n\n        [Header(Other Setting)]\n        _lightPoundAlpha(\"Light Pound Alpha\", Range(0, 1)) = 0.125\n    }\n\n    SubShader{\n        Pass {\n            CGPROGRAM\n\n            #pragma vertex vert\n            #pragma fragment frag\n\n            #include \"UnityCG.cginc\"\n\n            #define PI 3.14159\n\n            // 一大格所代表的量, x为时间, y为电压\n            #define GRID_X_SECOND (0.04 * 5)\n            #define GRID_Y_MV (0.1 * 5)\n\n            #define _ECG_Len 100\n            fixed _ECG_Arr[_ECG_Len]; // 心电图波形数据，由C#代码传入，长度固定100\n\n            struct appdata {\n                float4 vertex : POSITION;\n                fixed4 uv : TEXCOORD0;\n            };\n\n            struct v2f {\n                float4 pos : SV_POSITION;\n                fixed4 uv : TEXCOORD0;\n            };\n\n            // Color Setting\n            fixed4 _backgroundColor;\n            fixed4 _lineColor;\n            // Line Setting\n            fixed _lineWidth;\n            fixed _lightTailLength;\n            // Grid Setting\n            half4 _bigGridCount;\n            fixed _bigGridWidth;\n            fixed _bigGridAlpha;\n            fixed _smallGridWidth;\n            fixed _smallGridAlpha;\n            // Other Setting\n            fixed _lightPoundAlpha;\n\n            // 心跳波形\n            fixed HeartbeatFunc(fixed2 uv, fixed lightWidth) {\n                half x = uv.x * (_ECG_Len - 1); // [0, 1] => [0, len - 1]\n                int xl = floor(x);\n                int xr = (xl + 1) % _ECG_Len;\n                fixed y = lerp(_ECG_Arr[xl], _ECG_Arr[xr], frac(x)) / 2 + 0.5; // y值+0.5以将曲线移动到屏幕中间\n                return 1.0 - smoothstep(0.0, lightWidth, abs(uv.y - y));\n            }\n\n            // 光拖尾(按时间透明化尾部)效果\n            half LightFunc(fixed2 uv, half lightInterval, fixed lightTail) {\n                half tt = _Time[1] % lightInterval;\n                half lightSpeed = 1 / lightInterval;\n                half highlightX = tt * lightSpeed; // the leftest highlightX\n                half delta; // pixel distance from the first hightlightX on the right, delta~[0,1]\n                if (uv.x <= highlightX) {\n                    delta = highlightX - uv.x;\n                } else {\n                    delta = 1 - frac(uv.x - highlightX);\n                }\n                half light = lightTail > delta ? (lightTail - delta) : 0.0;\n                return light;\n            }\n\n            // take the screen coordinates, return the 0~1 alpha according to the pound function\n            // 屏幕闪烁效果\n            fixed PoundFunc(fixed2 uv, half lightInterval) {\n                half tt = (_Time[1] - uv.x * lightInterval / 2.0) % lightInterval;\n                half percent = tt / 0.8f; // pound lasts 0.8 seconds\n                return percent > 0.1 ? (-1.0 / 0.9 * (percent - 1.0)) : 0;\n            }\n\n            fixed TriangularWave(half x) { // => [-1, 1]\n                return abs(frac(x) * 2 - 1) - 0.5;\n            }\n\n            // take the screen coordinates, return the 0~1 alpha according to the grid function\n            fixed GridFunc(fixed2 uv, half2 gridXY) {\n                fixed scanlineX = TriangularWave(uv.x * gridXY.x) - 0.5;\n                fixed scanlineY = TriangularWave(uv.y * gridXY.y) - 0.5;\n                return max(scanlineX, scanlineY);\n            }\n\n            v2f vert(appdata v) {\n                v2f o;\n                o.pos = UnityObjectToClipPos(v.vertex);\n                o.uv = v.uv;\n                return o;\n            }\n\n            fixed4 frag(v2f i) : SV_Target {\n                fixed heartbeat = HeartbeatFunc(i.uv, _lineWidth);\n                half totalInterval = GRID_X_SECOND * _bigGridCount.x;\n                half light = LightFunc(i.uv, totalInterval, _lightTailLength);\n                fixed pound = PoundFunc(i.uv, totalInterval) * _lightPoundAlpha;\n                fixed bigGrid = (GridFunc(i.uv, _bigGridCount) + _bigGridWidth) * _bigGridAlpha;\n                fixed smallGrid = (GridFunc(i.uv, _bigGridCount * 5) + _smallGridWidth) * _smallGridAlpha;\n                fixed grid = max(bigGrid, smallGrid);\n\n                fixed alpha = heartbeat * light + pound;\n                alpha = max(alpha, grid);\n                fixed4 fragColor = lerp(_backgroundColor, _lineColor, alpha);\n                return fragColor;\n            }\n            ENDCG\n        }\n    }\n}\n```\n# C#代码：传递波形数据给Shader\n\nC#代码的主要工作是传入波形数据数组给Shader\n\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ECG : MonoBehaviour {\n    public Material material;\n    public Renderer renderer;\n\n    private Vector2 bigGridCount;\n    private float totalInterval;\n\n    private float heartRate = 0;\n    private int preX = 0;\n\n    private const int WAVE_ARR_LEN = 100;\n    private float[] wave = new float[WAVE_ARR_LEN];\n\n    // 一大格所代表的量, x为时间(s), y为电压(mV)\n    private const float GRID_X_SEC = 0.04f * 5;\n    private const float GRID_Y_MV = 0.1f * 5;\n\n    // 正常波形, 参考周期 = 0.8s, 参考峰值 = 1mV\n    private const float REGULAR_WAVE_REFER_T = 0.8f; // time s\n    private const float REGULAR_WAVE_REFER_F = 1 / REGULAR_WAVE_REFER_T * 60; // frequency bpm\n    private const float REGULAR_WAVE_REFER_P = 1; // peak val mV\n    private readonly float[] REGULAR_WAVE_ARR = { 0.025f, 0.025f, 0.025f, 0.025f, 0.022f, 0.031f, 0.058f, 0.099f, 0.133f, 0.161f, 0.181f, 0.19f, 0.191f, 0.182f, 0.163f, 0.135f, 0.102f, 0.06f, 0.032f, 0.022f, 0.025f, 0.025f, 0.029f, 0.018f, -0.023f, -0.068f, -0.037f, 0.059f, 0.255f, 0.578f, 0.983f, 1.0f, 0.498f, -0.097f, -0.273f, -0.13f, 0.002f, 0.037f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.024f, 0.032f, 0.052f, 0.078f, 0.1f, 0.12f, 0.14f, 0.159f, 0.179f, 0.196f, 0.212f, 0.225f, 0.237f, 0.246f, 0.25f, 0.248f, 0.24f, 0.225f, 0.206f, 0.184f, 0.161f, 0.134f, 0.101f, 0.06f, 0.031f, 0.022f, 0.025f, 0.025f, 0.023f, 0.03f, 0.052f, 0.082f, 0.101f, 0.111f, 0.11f, 0.098f, 0.078f, 0.06f, 0.043f, 0.031f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f, 0.025f };\n\n    // 插值计算波形值\n    float GetWaveY(float[] waveArr, float x, float peakVal) {\n        if (x < 0) {\n            x += ((-x / WAVE_ARR_LEN) + 1) * WAVE_ARR_LEN;\n        }\n        x %= WAVE_ARR_LEN;\n        int xl = Mathf.FloorToInt(x) % WAVE_ARR_LEN;\n        int xr = (xl + 1) % WAVE_ARR_LEN;\n        return Mathf.Lerp(waveArr[xl], waveArr[xr], x - xl) * peakVal;\n    }\n\n    void Start() {\n        // 获取必要属性\n        bigGridCount = material.GetVector(\"_bigGridCount\");\n        totalInterval = GRID_X_SEC * bigGridCount.x; // 总时长 = 大格子时间 * 大格子数量.x\n        material.SetFloatArray(\"_ECG_Arr\", wave);\n        renderer.material = material;\n    }\n\n    delegate void FillLambda(int end);\n\n    // 展示单独一种波的循环\n    void ShowSingleWave(float[] waveArr, float interval, float peakVal) {\n        // 根据shader时间获取当前扫描进度，相当于获取了x坐标\n        float shaderTime1 = Shader.GetGlobalVector(\"_Time\")[1];\n        float scanProcess = shaderTime1 % totalInterval / totalInterval; // 值域[0, 1]\n        int x = (int)(scanProcess * WAVE_ARR_LEN);\n\n        // 根据波形周期计算此时波形进度\n        float waveProcess = (shaderTime1 % interval) / interval;\n\n        // 更新此时x位置波形数据\n        wave[x] = GetWaveY(waveArr, waveProcess * WAVE_ARR_LEN, peakVal);\n\n        // 补上上一帧和这一帧中间未打的点\n        FillLambda Fill = (int end) => {\n            for (; preX < end; ++preX) {\n                float preShaderTime1 = shaderTime1 - (totalInterval / WAVE_ARR_LEN) * (end - preX);\n                float preWaveProcess = (preShaderTime1 % interval) / interval;\n                wave[preX] = GetWaveY(waveArr, preWaveProcess * WAVE_ARR_LEN, peakVal);\n            }\n        };\n        Fill(x);\n        if (preX > x) {\n            Fill(WAVE_ARR_LEN);\n            preX = 0;\n            Fill(x);\n        }\n\n        // 赋值给shader\n        material.SetFloatArray(\"_ECG_Arr\", wave);\n        Debug.Log(\"scanProcess: \" + (scanProcess * 100) + \"%\");\n    }\n\n    void Update() {\n        ShowSingleWave(REGULAR_WAVE_ARR, REGULAR_WAVE_REFER_T, REGULAR_WAVE_REFER_P);\n    }\n}\n```\n\n# Python代码：用于生成特定长度的波形数组\n\n代码中的REGULAR_WAVE_ARR数组，来源于一个Python脚本\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.signal import savgol_filter\nimport pyperclip\n\n# 原始数据，用图片画格子数出来的\n# 正常波形, 参考心率 = 75bpm, 参考峰值 = 1mV\n# y = [0.2, 0.2,                                         # |\n#      0.2, 1.0, 1.5, 1.5, 1.0, 0.2,                     # P\n#      0.2, 0.2,                                         # |\n#     -0.8,                                              # Q\n#      2.0, 10.0,                                        # R\n#     -3.0, 0.2,                                         # S\n#      0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # |\n#      0.2, 0.7, 1.1, 1.5, 1.8, 2.0, 1.9, 1.5, 1.0, 0.2, # T\n#      0.2,                                              # |\n#      0.2, 0.8, 0.9, 0.5, 0.2,                          # U\n#      0.2, 0.2]                                         # |\n\n# 房颤 = (正常 - P + f杂波) & 心律不齐, 参考心率 = 75bpm, 参考峰值 = 1mV\n# f杂波频率350~600bpm, 此参考波形数据未添加杂乱和心律不齐两种特征, 请自行使用sin和rand等函数实现\ny = [0.2, 0.2,                                         # |\n     0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # | (P)\n     0.2, 0.2,                                         # |\n    -0.8,                                              # Q\n     2.0, 10.0,                                        # R\n    -3.0, 0.2,                                         # S\n     0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # |\n     0.2, 0.7, 1.1, 1.5, 1.8, 2.0, 1.9, 1.5, 1.0, 0.2, # T\n     0.2,                                              # |\n     0.2, 0.8, 0.9, 0.5, 0.2,                          # U\n     0.2, 0.2]                                         # |\n\n# 室颤 = 杂波\n\ny = np.array(y)\nx = np.arange(0, len(y), 1)\n\n# 线性插值扩展数组长度\nlenEx = 100\nxEx = np.arange(0, len(y), len(y) / lenEx)\ny = np.interp(xEx, x, y)\n\n# 平滑曲线。参数1为输入曲线；参数2为卷积窗口值，越大越平滑，越小越接近原始曲线；参数3为方程次数，这里用三次方程拟合\ny_smooth = savgol_filter(y, 5, 3, mode = 'nearest')\ny_normalize = y_smooth / max(y_smooth) # 归一化\n\n# 调整小数精度为3, 并以C#代码格式打印目标数据\ncsOutput = \"{ \" + \"f, \".join(str(round(i, 3)) for i in y_normalize) + \"f };\"\npyperclip.copy(csOutput)\nprint(\"### 输出数据已复制至剪贴板！ ###\")\nprint(csOutput)\nprint(\"### 输出数据已复制至剪贴板！ ###\")\n\n# 绘制目标曲线\nplt.ylim(min(y), max(y))\nplt.xlim(min(xEx), max(xEx))\nplt.plot(xEx, y, '1-', label = 'raw')\nplt.plot(xEx, y_smooth, 'r-', label = 'smooth')\nplt.plot(xEx, y_normalize, 'b-', label = 'normalize')\nplt.legend()\nplt.show()\n```\n\n波形的原始数据是直接用截图，数格子数出来的，上面的注释P、Q、R、S、T、U分别对应着心电图的特征线段，这里需要学习专业知识，当然也可以简单看看下图的描述（此波形为正常波形）\n\n![](/img/ECG_regular.jpg)\n\n# 使用方法\n\n1. 创建一个3D Object: Plane，面向屏幕，铺满屏幕\n\n2. 创建一个Material，选择Shader: Custom/ECG\n\n3. Plane替换上述材质\n\n4. Plane挂载ECG.cs脚本，脚本上挂载上述材质，挂载自己的Renderer\n\n5. 可修改C#脚本内的心电图数组数据来输出不同的波形。数据可由上述Python代码来插值生成平滑曲线\n\n# 总结\n\n这些代码虽然是废案，但是其实也可以使用。如果要再优化的话，或许应该考虑一下数据来源部分——如何才能更好地模拟游戏中各种情况下病人的心电数据？这里还有很多需要学习的地方，专业知识还需要再多学习，最好至少能摸一次心电监护仪，有专业人士讲解等等...\n\n总之这些代码暂时先这样吧，等之后有需要了再调整。","slug":"ECG-Shader","published":1,"updated":"2021-10-02T08:55:45.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4a0007jowz97z457wd","content":"<h1 id=\"效果预览\"><a class=\"markdownIt-Anchor\" href=\"#效果预览\"></a> 效果预览</h1>\n<p>这个Shader是比赛的废案，至于为什么是废案？详见文章：<a href=\"https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/2021/09/30/2021YiYouWeiJin/\">2021 益游未尽 作品——《气候护卫队》</a></p>\n<p>效果如下，这里演示的是正常心跳的波形循环<br />\n<img src=\"/img/2021YiYouWeiJin/ECG.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/2021YiYouWeiJin/ECG.gif\" class=\"lozad post-image\"></p>\n<h1 id=\"shader代码\"><a class=\"markdownIt-Anchor\" href=\"#shader代码\"></a> Shader代码</h1>\n<p>frag中的主要工作是，把所有的效果叠加（波形线条、拖尾特效、闪烁特效、格子）</p>\n<pre class=\"line-numbers language-glsl\" data-language=\"glsl\"><code class=\"language-glsl\">Shader <span class=\"token string\">\"Custom/ECG\"</span> <span class=\"token punctuation\">&#123;</span>\n    Properties <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Color Setting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_backgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Background Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_lineColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Line Setting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">PowerSlider</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_lineWidth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line Width\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.02</span>\n        <span class=\"token function\">_lightTailLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light Tail Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        \n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Grid Setting _ <span class=\"token number\">1</span> small grid<span class=\"token punctuation\">.</span>xy equal <span class=\"token number\">0.04</span>s <span class=\"token number\">0.1</span>mV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_bigGridCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Big Grid Count\"</span><span class=\"token punctuation\">,</span> vector<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_bigGridWidth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Big Grid Width\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.15</span>\n        <span class=\"token function\">_bigGridAlpha</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Big Grid Alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token function\">_smallGridWidth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Small Grid Width\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span>\n        <span class=\"token function\">_smallGridAlpha</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Small Grid Alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Other Setting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_lightPoundAlpha</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light Pound Alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    SubShader<span class=\"token punctuation\">&#123;</span>\n        Pass <span class=\"token punctuation\">&#123;</span>\n            CGPROGRAM\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span>\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14159</span></span></span>\n\n            <span class=\"token comment\">// 一大格所代表的量, x为时间, y为电压</span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GRID_X_SECOND</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">0.04</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GRID_Y_MV</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span>\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_ECG_Len</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n            <span class=\"token keyword\">fixed</span> _ECG_Arr<span class=\"token punctuation\">[</span>_ECG_Len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 心电图波形数据，由C#代码传入，长度固定100</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">appdata</span> <span class=\"token punctuation\">&#123;</span>\n                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                fixed4 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">v2f</span> <span class=\"token punctuation\">&#123;</span>\n                float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                fixed4 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Color Setting</span>\n            fixed4 _backgroundColor<span class=\"token punctuation\">;</span>\n            fixed4 _lineColor<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Line Setting</span>\n            <span class=\"token keyword\">fixed</span> _lineWidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _lightTailLength<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Grid Setting</span>\n            half4 _bigGridCount<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _bigGridWidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _bigGridAlpha<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _smallGridWidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _smallGridAlpha<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Other Setting</span>\n            <span class=\"token keyword\">fixed</span> _lightPoundAlpha<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 心跳波形</span>\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">HeartbeatFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">fixed</span> lightWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">half</span> x <span class=\"token operator\">=</span> uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>_ECG_Len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 1] => [0, len - 1]</span>\n                <span class=\"token keyword\">int</span> xl <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> xr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _ECG_Len<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> y <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>_ECG_Arr<span class=\"token punctuation\">[</span>xl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _ECG_Arr<span class=\"token punctuation\">[</span>xr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// y值+0.5以将曲线移动到屏幕中间</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token function\">smoothstep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> lightWidth<span class=\"token punctuation\">,</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">// 光拖尾(按时间透明化尾部)效果</span>\n            <span class=\"token keyword\">half</span> <span class=\"token function\">LightFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">half</span> lightInterval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">fixed</span> lightTail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">half</span> tt <span class=\"token operator\">=</span> _Time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> lightInterval<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> lightSpeed <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> lightInterval<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> highlightX <span class=\"token operator\">=</span> tt <span class=\"token operator\">*</span> lightSpeed<span class=\"token punctuation\">;</span> <span class=\"token comment\">// the leftest highlightX</span>\n                <span class=\"token keyword\">half</span> delta<span class=\"token punctuation\">;</span> <span class=\"token comment\">// pixel distance from the first hightlightX on the right, delta~[0,1]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> highlightX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    delta <span class=\"token operator\">=</span> highlightX <span class=\"token operator\">-</span> uv<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    delta <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> highlightX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">half</span> light <span class=\"token operator\">=</span> lightTail <span class=\"token operator\">></span> delta <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>lightTail <span class=\"token operator\">-</span> delta<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> light<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">// take the screen coordinates, return the 0~1 alpha according to the pound function</span>\n            <span class=\"token comment\">// 屏幕闪烁效果</span>\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">PoundFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">half</span> lightInterval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">half</span> tt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_Time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> lightInterval <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> lightInterval<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> percent <span class=\"token operator\">=</span> tt <span class=\"token operator\">/</span> <span class=\"token number\">0.8f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pound lasts 0.8 seconds</span>\n                <span class=\"token keyword\">return</span> percent <span class=\"token operator\">></span> <span class=\"token number\">0.1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">0.9</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>percent <span class=\"token operator\">-</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">TriangularWave</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">half</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// => [-1, 1]</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">// take the screen coordinates, return the 0~1 alpha according to the grid function</span>\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">GridFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> half2 gridXY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">fixed</span> scanlineX <span class=\"token operator\">=</span> <span class=\"token function\">TriangularWave</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> gridXY<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> scanlineY <span class=\"token operator\">=</span> <span class=\"token function\">TriangularWave</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> gridXY<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>scanlineX<span class=\"token punctuation\">,</span> scanlineY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">fixed</span> heartbeat <span class=\"token operator\">=</span> <span class=\"token function\">HeartbeatFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _lineWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> totalInterval <span class=\"token operator\">=</span> GRID_X_SECOND <span class=\"token operator\">*</span> _bigGridCount<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> light <span class=\"token operator\">=</span> <span class=\"token function\">LightFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> totalInterval<span class=\"token punctuation\">,</span> _lightTailLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> pound <span class=\"token operator\">=</span> <span class=\"token function\">PoundFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> totalInterval<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _lightPoundAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> bigGrid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GridFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _bigGridCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> _bigGridWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _bigGridAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> smallGrid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GridFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _bigGridCount <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> _smallGridWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _smallGridAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> grid <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>bigGrid<span class=\"token punctuation\">,</span> smallGrid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">fixed</span> alpha <span class=\"token operator\">=</span> heartbeat <span class=\"token operator\">*</span> light <span class=\"token operator\">+</span> pound<span class=\"token punctuation\">;</span>\n                alpha <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>alpha<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                fixed4 fragColor <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>_backgroundColor<span class=\"token punctuation\">,</span> _lineColor<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> fragColor<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ENDCG\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"c代码传递波形数据给shader\"><a class=\"markdownIt-Anchor\" href=\"#c代码传递波形数据给shader\"></a> C#代码：传递波形数据给Shader</h1>\n<p>C#代码的主要工作是传入波形数据数组给Shader</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ECG</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Material</span> material<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Renderer</span> renderer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Vector2</span> bigGridCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> totalInterval<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> heartRate <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> preX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> WAVE_ARR_LEN <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> wave <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span>WAVE_ARR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 一大格所代表的量, x为时间(s), y为电压(mV)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> GRID_X_SEC <span class=\"token operator\">=</span> <span class=\"token number\">0.04f</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> GRID_Y_MV <span class=\"token operator\">=</span> <span class=\"token number\">0.1f</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 正常波形, 参考周期 = 0.8s, 参考峰值 = 1mV</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> REGULAR_WAVE_REFER_T <span class=\"token operator\">=</span> <span class=\"token number\">0.8f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// time s</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> REGULAR_WAVE_REFER_F <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> REGULAR_WAVE_REFER_T <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// frequency bpm</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> REGULAR_WAVE_REFER_P <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// peak val mV</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> REGULAR_WAVE_ARR <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.022f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.031f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.058f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.099f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.133f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.161f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.181f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.19f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.191f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.182f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.163f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.135f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.102f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.032f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.022f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.029f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.018f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.023f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.068f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.037f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.059f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.255f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.578f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.983f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.498f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.097f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.273f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.13f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.002f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.037f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.024f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.032f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.052f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.078f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.12f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.14f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.159f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.179f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.196f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.212f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.237f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.246f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.248f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.24f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.206f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.184f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.161f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.134f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.101f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.031f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.022f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.023f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.03f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.052f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.082f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.101f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.111f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.11f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.098f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.078f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.043f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.031f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 插值计算波形值</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> <span class=\"token function\">GetWaveY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waveArr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> peakVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            x <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x <span class=\"token operator\">/</span> WAVE_ARR_LEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        x <span class=\"token operator\">%=</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> xl <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> xr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Lerp</span><span class=\"token punctuation\">(</span>waveArr<span class=\"token punctuation\">[</span>xl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> waveArr<span class=\"token punctuation\">[</span>xr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> xl<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> peakVal<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取必要属性</span>\n        bigGridCount <span class=\"token operator\">=</span> material<span class=\"token punctuation\">.</span><span class=\"token function\">GetVector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_bigGridCount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        totalInterval <span class=\"token operator\">=</span> GRID_X_SEC <span class=\"token operator\">*</span> bigGridCount<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总时长 = 大格子时间 * 大格子数量.x</span>\n        material<span class=\"token punctuation\">.</span><span class=\"token function\">SetFloatArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_ECG_Arr\"</span><span class=\"token punctuation\">,</span> wave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        renderer<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> material<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FillLambda</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 展示单独一种波的循环</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowSingleWave</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waveArr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> interval<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> peakVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 根据shader时间获取当前扫描进度，相当于获取了x坐标</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> shaderTime1 <span class=\"token operator\">=</span> Shader<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobalVector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> scanProcess <span class=\"token operator\">=</span> shaderTime1 <span class=\"token operator\">%</span> totalInterval <span class=\"token operator\">/</span> totalInterval<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值域[0, 1]</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>scanProcess <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 根据波形周期计算此时波形进度</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> waveProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>shaderTime1 <span class=\"token operator\">%</span> interval<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> interval<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 更新此时x位置波形数据</span>\n        wave<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetWaveY</span><span class=\"token punctuation\">(</span>waveArr<span class=\"token punctuation\">,</span> waveProcess <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">,</span> peakVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 补上上一帧和这一帧中间未打的点</span>\n        <span class=\"token class-name\">FillLambda</span> Fill <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> preX <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>preX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> preShaderTime1 <span class=\"token operator\">=</span> shaderTime1 <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>totalInterval <span class=\"token operator\">/</span> WAVE_ARR_LEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> preX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> preWaveProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>preShaderTime1 <span class=\"token operator\">%</span> interval<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> interval<span class=\"token punctuation\">;</span>\n                wave<span class=\"token punctuation\">[</span>preX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetWaveY</span><span class=\"token punctuation\">(</span>waveArr<span class=\"token punctuation\">,</span> preWaveProcess <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">,</span> peakVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preX <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>WAVE_ARR_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 赋值给shader</span>\n        material<span class=\"token punctuation\">.</span><span class=\"token function\">SetFloatArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_ECG_Arr\"</span><span class=\"token punctuation\">,</span> wave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scanProcess: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>scanProcess <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">ShowSingleWave</span><span class=\"token punctuation\">(</span>REGULAR_WAVE_ARR<span class=\"token punctuation\">,</span> REGULAR_WAVE_REFER_T<span class=\"token punctuation\">,</span> REGULAR_WAVE_REFER_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"python代码用于生成特定长度的波形数组\"><a class=\"markdownIt-Anchor\" href=\"#python代码用于生成特定长度的波形数组\"></a> Python代码：用于生成特定长度的波形数组</h1>\n<p>代码中的REGULAR_WAVE_ARR数组，来源于一个Python脚本</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>signal <span class=\"token keyword\">import</span> savgol_filter\n<span class=\"token keyword\">import</span> pyperclip\n\n<span class=\"token comment\"># 原始数据，用图片画格子数出来的</span>\n<span class=\"token comment\"># 正常波形, 参考心率 = 75bpm, 参考峰值 = 1mV</span>\n<span class=\"token comment\"># y = [0.2, 0.2,                                         # |</span>\n<span class=\"token comment\">#      0.2, 1.0, 1.5, 1.5, 1.0, 0.2,                     # P</span>\n<span class=\"token comment\">#      0.2, 0.2,                                         # |</span>\n<span class=\"token comment\">#     -0.8,                                              # Q</span>\n<span class=\"token comment\">#      2.0, 10.0,                                        # R</span>\n<span class=\"token comment\">#     -3.0, 0.2,                                         # S</span>\n<span class=\"token comment\">#      0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # |</span>\n<span class=\"token comment\">#      0.2, 0.7, 1.1, 1.5, 1.8, 2.0, 1.9, 1.5, 1.0, 0.2, # T</span>\n<span class=\"token comment\">#      0.2,                                              # |</span>\n<span class=\"token comment\">#      0.2, 0.8, 0.9, 0.5, 0.2,                          # U</span>\n<span class=\"token comment\">#      0.2, 0.2]                                         # |</span>\n\n<span class=\"token comment\"># 房颤 = (正常 - P + f杂波) &amp; 心律不齐, 参考心率 = 75bpm, 参考峰值 = 1mV</span>\n<span class=\"token comment\"># f杂波频率350~600bpm, 此参考波形数据未添加杂乱和心律不齐两种特征, 请自行使用sin和rand等函数实现</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                         <span class=\"token comment\"># |</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\"># | (P)</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                         <span class=\"token comment\"># |</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>                                              <span class=\"token comment\"># Q</span>\n     <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span>                                        <span class=\"token comment\"># R</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                         <span class=\"token comment\"># S</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\"># |</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># T</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                              <span class=\"token comment\"># |</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                          <span class=\"token comment\"># U</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span>                                         <span class=\"token comment\"># |</span>\n\n<span class=\"token comment\"># 室颤 = 杂波</span>\n\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 线性插值扩展数组长度</span>\nlenEx <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nxEx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> lenEx<span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 平滑曲线。参数1为输入曲线；参数2为卷积窗口值，越大越平滑，越小越接近原始曲线；参数3为方程次数，这里用三次方程拟合</span>\ny_smooth <span class=\"token operator\">=</span> savgol_filter<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> mode <span class=\"token operator\">=</span> <span class=\"token string\">'nearest'</span><span class=\"token punctuation\">)</span>\ny_normalize <span class=\"token operator\">=</span> y_smooth <span class=\"token operator\">/</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>y_smooth<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 归一化</span>\n\n<span class=\"token comment\"># 调整小数精度为3, 并以C#代码格式打印目标数据</span>\ncsOutput <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123; \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"f, \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> y_normalize<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"f &#125;;\"</span>\npyperclip<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>csOutput<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"### 输出数据已复制至剪贴板！ ###\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>csOutput<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"### 输出数据已复制至剪贴板！ ###\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制目标曲线</span>\nplt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token string\">'1-'</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'raw'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> y_smooth<span class=\"token punctuation\">,</span> <span class=\"token string\">'r-'</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'smooth'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> y_normalize<span class=\"token punctuation\">,</span> <span class=\"token string\">'b-'</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'normalize'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>波形的原始数据是直接用截图，数格子数出来的，上面的注释P、Q、R、S、T、U分别对应着心电图的特征线段，这里需要学习专业知识，当然也可以简单看看下图的描述（此波形为正常波形）</p>\n<p><img src=\"/img/ECG_regular.jpg\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/ECG_regular.jpg\" class=\"lozad post-image\"></p>\n<h1 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\"></a> 使用方法</h1>\n<ol>\n<li>\n<p>创建一个3D Object: Plane，面向屏幕，铺满屏幕</p>\n</li>\n<li>\n<p>创建一个Material，选择Shader: Custom/ECG</p>\n</li>\n<li>\n<p>Plane替换上述材质</p>\n</li>\n<li>\n<p>Plane挂载ECG.cs脚本，脚本上挂载上述材质，挂载自己的Renderer</p>\n</li>\n<li>\n<p>可修改C#脚本内的心电图数组数据来输出不同的波形。数据可由上述Python代码来插值生成平滑曲线</p>\n</li>\n</ol>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>这些代码虽然是废案，但是其实也可以使用。如果要再优化的话，或许应该考虑一下数据来源部分——如何才能更好地模拟游戏中各种情况下病人的心电数据？这里还有很多需要学习的地方，专业知识还需要再多学习，最好至少能摸一次心电监护仪，有专业人士讲解等等…</p>\n<p>总之这些代码暂时先这样吧，等之后有需要了再调整。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"效果预览\"><a class=\"markdownIt-Anchor\" href=\"#效果预览\"></a> 效果预览</h1>\n<p>这个Shader是比赛的废案，至于为什么是废案？详见文章：<a href=\"https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/2021/09/30/2021YiYouWeiJin/\">2021 益游未尽 作品——《气候护卫队》</a></p>\n<p>效果如下，这里演示的是正常心跳的波形循环<br />\n<img src=\"/img/2021YiYouWeiJin/ECG.gif\" alt=\"\" /></p>\n<h1 id=\"shader代码\"><a class=\"markdownIt-Anchor\" href=\"#shader代码\"></a> Shader代码</h1>\n<p>frag中的主要工作是，把所有的效果叠加（波形线条、拖尾特效、闪烁特效、格子）</p>\n<pre class=\"line-numbers language-glsl\" data-language=\"glsl\"><code class=\"language-glsl\">Shader <span class=\"token string\">\"Custom/ECG\"</span> <span class=\"token punctuation\">&#123;</span>\n    Properties <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Color Setting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_backgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Background Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_lineColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Line Setting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">PowerSlider</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_lineWidth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line Width\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.02</span>\n        <span class=\"token function\">_lightTailLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light Tail Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        \n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Grid Setting _ <span class=\"token number\">1</span> small grid<span class=\"token punctuation\">.</span>xy equal <span class=\"token number\">0.04</span>s <span class=\"token number\">0.1</span>mV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_bigGridCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Big Grid Count\"</span><span class=\"token punctuation\">,</span> vector<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_bigGridWidth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Big Grid Width\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.15</span>\n        <span class=\"token function\">_bigGridAlpha</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Big Grid Alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token function\">_smallGridWidth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Small Grid Width\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span>\n        <span class=\"token function\">_smallGridAlpha</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Small Grid Alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>Other Setting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">_lightPoundAlpha</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Light Pound Alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    SubShader<span class=\"token punctuation\">&#123;</span>\n        Pass <span class=\"token punctuation\">&#123;</span>\n            CGPROGRAM\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span>\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14159</span></span></span>\n\n            <span class=\"token comment\">// 一大格所代表的量, x为时间, y为电压</span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GRID_X_SECOND</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">0.04</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GRID_Y_MV</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span>\n\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_ECG_Len</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n            <span class=\"token keyword\">fixed</span> _ECG_Arr<span class=\"token punctuation\">[</span>_ECG_Len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 心电图波形数据，由C#代码传入，长度固定100</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">appdata</span> <span class=\"token punctuation\">&#123;</span>\n                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                fixed4 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">v2f</span> <span class=\"token punctuation\">&#123;</span>\n                float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                fixed4 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Color Setting</span>\n            fixed4 _backgroundColor<span class=\"token punctuation\">;</span>\n            fixed4 _lineColor<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Line Setting</span>\n            <span class=\"token keyword\">fixed</span> _lineWidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _lightTailLength<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Grid Setting</span>\n            half4 _bigGridCount<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _bigGridWidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _bigGridAlpha<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _smallGridWidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">fixed</span> _smallGridAlpha<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Other Setting</span>\n            <span class=\"token keyword\">fixed</span> _lightPoundAlpha<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 心跳波形</span>\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">HeartbeatFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">fixed</span> lightWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">half</span> x <span class=\"token operator\">=</span> uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>_ECG_Len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 1] => [0, len - 1]</span>\n                <span class=\"token keyword\">int</span> xl <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> xr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _ECG_Len<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> y <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>_ECG_Arr<span class=\"token punctuation\">[</span>xl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _ECG_Arr<span class=\"token punctuation\">[</span>xr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// y值+0.5以将曲线移动到屏幕中间</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token function\">smoothstep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> lightWidth<span class=\"token punctuation\">,</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">// 光拖尾(按时间透明化尾部)效果</span>\n            <span class=\"token keyword\">half</span> <span class=\"token function\">LightFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">half</span> lightInterval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">fixed</span> lightTail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">half</span> tt <span class=\"token operator\">=</span> _Time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> lightInterval<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> lightSpeed <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> lightInterval<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> highlightX <span class=\"token operator\">=</span> tt <span class=\"token operator\">*</span> lightSpeed<span class=\"token punctuation\">;</span> <span class=\"token comment\">// the leftest highlightX</span>\n                <span class=\"token keyword\">half</span> delta<span class=\"token punctuation\">;</span> <span class=\"token comment\">// pixel distance from the first hightlightX on the right, delta~[0,1]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> highlightX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    delta <span class=\"token operator\">=</span> highlightX <span class=\"token operator\">-</span> uv<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    delta <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> highlightX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">half</span> light <span class=\"token operator\">=</span> lightTail <span class=\"token operator\">></span> delta <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>lightTail <span class=\"token operator\">-</span> delta<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> light<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">// take the screen coordinates, return the 0~1 alpha according to the pound function</span>\n            <span class=\"token comment\">// 屏幕闪烁效果</span>\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">PoundFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">half</span> lightInterval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">half</span> tt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_Time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> lightInterval <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> lightInterval<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> percent <span class=\"token operator\">=</span> tt <span class=\"token operator\">/</span> <span class=\"token number\">0.8f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pound lasts 0.8 seconds</span>\n                <span class=\"token keyword\">return</span> percent <span class=\"token operator\">></span> <span class=\"token number\">0.1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">0.9</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>percent <span class=\"token operator\">-</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">TriangularWave</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">half</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// => [-1, 1]</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">// take the screen coordinates, return the 0~1 alpha according to the grid function</span>\n            <span class=\"token keyword\">fixed</span> <span class=\"token function\">GridFunc</span><span class=\"token punctuation\">(</span>fixed2 uv<span class=\"token punctuation\">,</span> half2 gridXY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">fixed</span> scanlineX <span class=\"token operator\">=</span> <span class=\"token function\">TriangularWave</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> gridXY<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> scanlineY <span class=\"token operator\">=</span> <span class=\"token function\">TriangularWave</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> gridXY<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>scanlineX<span class=\"token punctuation\">,</span> scanlineY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">fixed</span> heartbeat <span class=\"token operator\">=</span> <span class=\"token function\">HeartbeatFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _lineWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> totalInterval <span class=\"token operator\">=</span> GRID_X_SECOND <span class=\"token operator\">*</span> _bigGridCount<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half</span> light <span class=\"token operator\">=</span> <span class=\"token function\">LightFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> totalInterval<span class=\"token punctuation\">,</span> _lightTailLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> pound <span class=\"token operator\">=</span> <span class=\"token function\">PoundFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> totalInterval<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _lightPoundAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> bigGrid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GridFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _bigGridCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> _bigGridWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _bigGridAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> smallGrid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GridFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">,</span> _bigGridCount <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> _smallGridWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _smallGridAlpha<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">fixed</span> grid <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>bigGrid<span class=\"token punctuation\">,</span> smallGrid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">fixed</span> alpha <span class=\"token operator\">=</span> heartbeat <span class=\"token operator\">*</span> light <span class=\"token operator\">+</span> pound<span class=\"token punctuation\">;</span>\n                alpha <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>alpha<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                fixed4 fragColor <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>_backgroundColor<span class=\"token punctuation\">,</span> _lineColor<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> fragColor<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ENDCG\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"c代码传递波形数据给shader\"><a class=\"markdownIt-Anchor\" href=\"#c代码传递波形数据给shader\"></a> C#代码：传递波形数据给Shader</h1>\n<p>C#代码的主要工作是传入波形数据数组给Shader</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ECG</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Material</span> material<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Renderer</span> renderer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Vector2</span> bigGridCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> totalInterval<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> heartRate <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> preX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> WAVE_ARR_LEN <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> wave <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span>WAVE_ARR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 一大格所代表的量, x为时间(s), y为电压(mV)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> GRID_X_SEC <span class=\"token operator\">=</span> <span class=\"token number\">0.04f</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> GRID_Y_MV <span class=\"token operator\">=</span> <span class=\"token number\">0.1f</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 正常波形, 参考周期 = 0.8s, 参考峰值 = 1mV</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> REGULAR_WAVE_REFER_T <span class=\"token operator\">=</span> <span class=\"token number\">0.8f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// time s</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> REGULAR_WAVE_REFER_F <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> REGULAR_WAVE_REFER_T <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// frequency bpm</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> REGULAR_WAVE_REFER_P <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// peak val mV</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> REGULAR_WAVE_ARR <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.022f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.031f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.058f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.099f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.133f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.161f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.181f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.19f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.191f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.182f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.163f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.135f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.102f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.032f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.022f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.029f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.018f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.023f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.068f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.037f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.059f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.255f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.578f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.983f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.498f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.097f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.273f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.13f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.002f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.037f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.024f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.032f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.052f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.078f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.12f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.14f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.159f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.179f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.196f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.212f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.237f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.246f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.248f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.24f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.206f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.184f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.161f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.134f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.101f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.031f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.022f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.023f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.03f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.052f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.082f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.101f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.111f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.11f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.098f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.078f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.06f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.043f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.031f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.025f</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 插值计算波形值</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> <span class=\"token function\">GetWaveY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waveArr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> peakVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            x <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x <span class=\"token operator\">/</span> WAVE_ARR_LEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        x <span class=\"token operator\">%=</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> xl <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> xr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> WAVE_ARR_LEN<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Lerp</span><span class=\"token punctuation\">(</span>waveArr<span class=\"token punctuation\">[</span>xl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> waveArr<span class=\"token punctuation\">[</span>xr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> xl<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> peakVal<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取必要属性</span>\n        bigGridCount <span class=\"token operator\">=</span> material<span class=\"token punctuation\">.</span><span class=\"token function\">GetVector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_bigGridCount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        totalInterval <span class=\"token operator\">=</span> GRID_X_SEC <span class=\"token operator\">*</span> bigGridCount<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总时长 = 大格子时间 * 大格子数量.x</span>\n        material<span class=\"token punctuation\">.</span><span class=\"token function\">SetFloatArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_ECG_Arr\"</span><span class=\"token punctuation\">,</span> wave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        renderer<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> material<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FillLambda</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 展示单独一种波的循环</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShowSingleWave</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> waveArr<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> interval<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> peakVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 根据shader时间获取当前扫描进度，相当于获取了x坐标</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> shaderTime1 <span class=\"token operator\">=</span> Shader<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobalVector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> scanProcess <span class=\"token operator\">=</span> shaderTime1 <span class=\"token operator\">%</span> totalInterval <span class=\"token operator\">/</span> totalInterval<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值域[0, 1]</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>scanProcess <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 根据波形周期计算此时波形进度</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> waveProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>shaderTime1 <span class=\"token operator\">%</span> interval<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> interval<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 更新此时x位置波形数据</span>\n        wave<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetWaveY</span><span class=\"token punctuation\">(</span>waveArr<span class=\"token punctuation\">,</span> waveProcess <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">,</span> peakVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 补上上一帧和这一帧中间未打的点</span>\n        <span class=\"token class-name\">FillLambda</span> Fill <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> preX <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>preX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> preShaderTime1 <span class=\"token operator\">=</span> shaderTime1 <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>totalInterval <span class=\"token operator\">/</span> WAVE_ARR_LEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> preX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> preWaveProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>preShaderTime1 <span class=\"token operator\">%</span> interval<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> interval<span class=\"token punctuation\">;</span>\n                wave<span class=\"token punctuation\">[</span>preX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetWaveY</span><span class=\"token punctuation\">(</span>waveArr<span class=\"token punctuation\">,</span> preWaveProcess <span class=\"token operator\">*</span> WAVE_ARR_LEN<span class=\"token punctuation\">,</span> peakVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preX <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>WAVE_ARR_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 赋值给shader</span>\n        material<span class=\"token punctuation\">.</span><span class=\"token function\">SetFloatArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_ECG_Arr\"</span><span class=\"token punctuation\">,</span> wave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scanProcess: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>scanProcess <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">ShowSingleWave</span><span class=\"token punctuation\">(</span>REGULAR_WAVE_ARR<span class=\"token punctuation\">,</span> REGULAR_WAVE_REFER_T<span class=\"token punctuation\">,</span> REGULAR_WAVE_REFER_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"python代码用于生成特定长度的波形数组\"><a class=\"markdownIt-Anchor\" href=\"#python代码用于生成特定长度的波形数组\"></a> Python代码：用于生成特定长度的波形数组</h1>\n<p>代码中的REGULAR_WAVE_ARR数组，来源于一个Python脚本</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>signal <span class=\"token keyword\">import</span> savgol_filter\n<span class=\"token keyword\">import</span> pyperclip\n\n<span class=\"token comment\"># 原始数据，用图片画格子数出来的</span>\n<span class=\"token comment\"># 正常波形, 参考心率 = 75bpm, 参考峰值 = 1mV</span>\n<span class=\"token comment\"># y = [0.2, 0.2,                                         # |</span>\n<span class=\"token comment\">#      0.2, 1.0, 1.5, 1.5, 1.0, 0.2,                     # P</span>\n<span class=\"token comment\">#      0.2, 0.2,                                         # |</span>\n<span class=\"token comment\">#     -0.8,                                              # Q</span>\n<span class=\"token comment\">#      2.0, 10.0,                                        # R</span>\n<span class=\"token comment\">#     -3.0, 0.2,                                         # S</span>\n<span class=\"token comment\">#      0.2, 0.2, 0.2, 0.2, 0.2, 0.2,                     # |</span>\n<span class=\"token comment\">#      0.2, 0.7, 1.1, 1.5, 1.8, 2.0, 1.9, 1.5, 1.0, 0.2, # T</span>\n<span class=\"token comment\">#      0.2,                                              # |</span>\n<span class=\"token comment\">#      0.2, 0.8, 0.9, 0.5, 0.2,                          # U</span>\n<span class=\"token comment\">#      0.2, 0.2]                                         # |</span>\n\n<span class=\"token comment\"># 房颤 = (正常 - P + f杂波) &amp; 心律不齐, 参考心率 = 75bpm, 参考峰值 = 1mV</span>\n<span class=\"token comment\"># f杂波频率350~600bpm, 此参考波形数据未添加杂乱和心律不齐两种特征, 请自行使用sin和rand等函数实现</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                         <span class=\"token comment\"># |</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\"># | (P)</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                         <span class=\"token comment\"># |</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>                                              <span class=\"token comment\"># Q</span>\n     <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span>                                        <span class=\"token comment\"># R</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                         <span class=\"token comment\"># S</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\"># |</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># T</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                                              <span class=\"token comment\"># |</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>                          <span class=\"token comment\"># U</span>\n     <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span>                                         <span class=\"token comment\"># |</span>\n\n<span class=\"token comment\"># 室颤 = 杂波</span>\n\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 线性插值扩展数组长度</span>\nlenEx <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nxEx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> lenEx<span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>interp<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 平滑曲线。参数1为输入曲线；参数2为卷积窗口值，越大越平滑，越小越接近原始曲线；参数3为方程次数，这里用三次方程拟合</span>\ny_smooth <span class=\"token operator\">=</span> savgol_filter<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> mode <span class=\"token operator\">=</span> <span class=\"token string\">'nearest'</span><span class=\"token punctuation\">)</span>\ny_normalize <span class=\"token operator\">=</span> y_smooth <span class=\"token operator\">/</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>y_smooth<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 归一化</span>\n\n<span class=\"token comment\"># 调整小数精度为3, 并以C#代码格式打印目标数据</span>\ncsOutput <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123; \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"f, \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> y_normalize<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"f &#125;;\"</span>\npyperclip<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>csOutput<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"### 输出数据已复制至剪贴板！ ###\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>csOutput<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"### 输出数据已复制至剪贴板！ ###\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制目标曲线</span>\nplt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token string\">'1-'</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'raw'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> y_smooth<span class=\"token punctuation\">,</span> <span class=\"token string\">'r-'</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'smooth'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>xEx<span class=\"token punctuation\">,</span> y_normalize<span class=\"token punctuation\">,</span> <span class=\"token string\">'b-'</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'normalize'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>波形的原始数据是直接用截图，数格子数出来的，上面的注释P、Q、R、S、T、U分别对应着心电图的特征线段，这里需要学习专业知识，当然也可以简单看看下图的描述（此波形为正常波形）</p>\n<p><img src=\"/img/ECG_regular.jpg\" alt=\"\" /></p>\n<h1 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\"></a> 使用方法</h1>\n<ol>\n<li>\n<p>创建一个3D Object: Plane，面向屏幕，铺满屏幕</p>\n</li>\n<li>\n<p>创建一个Material，选择Shader: Custom/ECG</p>\n</li>\n<li>\n<p>Plane替换上述材质</p>\n</li>\n<li>\n<p>Plane挂载ECG.cs脚本，脚本上挂载上述材质，挂载自己的Renderer</p>\n</li>\n<li>\n<p>可修改C#脚本内的心电图数组数据来输出不同的波形。数据可由上述Python代码来插值生成平滑曲线</p>\n</li>\n</ol>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>这些代码虽然是废案，但是其实也可以使用。如果要再优化的话，或许应该考虑一下数据来源部分——如何才能更好地模拟游戏中各种情况下病人的心电数据？这里还有很多需要学习的地方，专业知识还需要再多学习，最好至少能摸一次心电监护仪，有专业人士讲解等等…</p>\n<p>总之这些代码暂时先这样吧，等之后有需要了再调整。</p>\n"},{"title":"一个超简易的卡牌游戏局域网设计","date":"2021-10-06T10:30:00.000Z","toc":true,"banner_img":"/img/FantasyWorld.jpg","banner_img_set":"/img/FantasyWorld.jpg","_content":"\n# 一、基础设计\n\n| Name       | Value                                                        |\n| ---------- | ------------------------------------------------------------ |\n| 同步方式   | 状态同步                                                     |\n| 网络协议   | TCP/IP                                                       |\n| 客户端     | 封装输入信息报文给服务器                                     |\n| 服务器     | 接收客户端信息，处理游戏逻辑后把结果以报文形式反馈给指定客户端 |\n| 序列化工具 | LitJSON（报文根据协议封装&解析，称之为序列化&反序列化）      |\n| 报文协议   | 由于我的目标是快速做一个卡牌游戏，所以选用房间制，但简化成只有一个房间 |\n\n# 二、报文协议设计\n\n## 2.1 报文类型\n\n| Name      | Description                                            |\n| --------- | ------------------------------------------------------ |\n| HeartBeat | 心跳，每隔一段时间发送一次，以确保网络是畅通的         |\n| LogIn     | 玩家登录                                               |\n| LogOut    | 玩家注销                                               |\n| StartGame | 开始游戏                                               |\n| Play      | 玩家操作，最复杂的报文，与游戏进行时的数据交互息息相关 |\n\n## 2.2 心跳报文 HeartBeat\n\n### 2.2.1 上传\n\n客户端每隔n秒上传1次心跳报文给服务端，若m秒内仍然未收到客户端的心跳报文，则视为离线，进行注销操作。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n| msgId      | int    | 报文id      |\n\n数据包中msgId是条件递增的，只有收到服务端的心跳反馈时才递增，否则msgId不变\n\n### 2.2.2 下发\n\n服务端接收到客户端的心跳报文后，发送心跳反馈报文给客户端。若客户端n秒内仍然未收到服务端的心跳反馈，则视为连接服务器失败。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n| msgId      | int    | 报文id      |\n\n## 2.3 玩家登录报文 LogIn\n\n### 2.3.1 上传\n\n登录请求。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n\n### 2.3.2 下发\n\n登录反馈。若客户端n秒内仍然未收到服务端的登录反馈，则视为登录服务器失败。\n\n数据包：\n\n| Name       | Type   | Description                                                  |\n| ---------- | ------ | ------------------------------------------------------------ |\n| playerName | string | 玩家名称                                                     |\n| fail       | bool   | 登录是否失败                                                 |\n| error      | int    | 登录失败原因，0-成功，1-已经登录了，2-房间已满, ...，255-未知原因 |\n\n## 2.4 玩家注销报文 LogOut\n\n### 2.4.1 上传\n\n注销。该报文不需要反馈报文。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n\n## 2.5 开始游戏 StartGame\n\n### 2.5.1 上传\n\n开始游戏请求。\n\n数据包：\n\n| Name       | Type   | Description  |\n| ---------- | ------ | ------------ |\n| playerName | string | 玩家名称     |\n| ready      | bool   | 是否准备就绪 |\n\n### 2.5.2 下发\n\n开始游戏反馈。若所有玩家都确定开始了，则服务端通知客户端开始游戏。\n\n数据包：\n\n| Name         | Type     | Description                               |\n| ------------ | -------- | ----------------------------------------- |\n| playerCount  | int      | 玩家数量                                  |\n| playersName  | string[] | 玩家名称列表，列表长度等于playerCount     |\n| playersReady | bool[]   | 玩家准备就绪列表，列表长度等于playerCount |\n| start        | bool     | 是否开始游戏                              |\n\n## 2.6 玩家操作报文 Play\n\n### 2.6.1 上传\n\n玩家操作报文，每隔n秒发送1次，若m秒内仍然未收到服务端反馈，则视为请求超时。\n\n数据包：\n\n| Name       | Type   | Description                           |\n| ---------- | ------ | ------------------------------------- |\n| playerName | string | 玩家名称                              |\n| msgId      | int    | 报文id                                |\n| type       | int    | 玩家操作枚举，0-无, ...，255-未知操作 |\n| data       | ?      | type操作对应的数据包                  |\n\n数据包中msgId是该玩家操作报文序列的当前标识id，此id是条件递增的，只有收到了服务端同样类型的玩家操作报文反馈才执行递增；数据包中type表示各种操作，例如出牌操作，抽卡操作等，其对应的操作数据包data也需要根据不同的操作来设计。\n\n### 2.6.2 下发\n\n玩家操作报文反馈。\n\n数据包：\n\n| Name       | Type   | Description                                     |\n| ---------- | ------ | ----------------------------------------------- |\n| playerName | string | 玩家名称                                        |\n| msgId      | int    | 报文id                                          |\n| type       | int    | 玩家操作枚举，0-无, ...，255-未知操作           |\n| data       | ?      | type操作对应的数据包                            |\n| fail       | bool   | 玩家操作请求是否失败                            |\n| error      | int    | 玩家操作请求失败原因，0-成功，...，255-未知原因 |\n\n# 三、服务端程序设计\n\n\n\n# 四、客户端程序设计\n\n","source":"_posts/LAN.md","raw":"---\ntitle: 一个超简易的卡牌游戏局域网设计\ndate: 2021-10-6 18:30:00\ntoc: true\ntags:\n- Unity\n- Network\n- CSharp\ncategories:\n- Unity\nbanner_img: /img/FantasyWorld.jpg\nbanner_img_set: /img/FantasyWorld.jpg\n---\n\n# 一、基础设计\n\n| Name       | Value                                                        |\n| ---------- | ------------------------------------------------------------ |\n| 同步方式   | 状态同步                                                     |\n| 网络协议   | TCP/IP                                                       |\n| 客户端     | 封装输入信息报文给服务器                                     |\n| 服务器     | 接收客户端信息，处理游戏逻辑后把结果以报文形式反馈给指定客户端 |\n| 序列化工具 | LitJSON（报文根据协议封装&解析，称之为序列化&反序列化）      |\n| 报文协议   | 由于我的目标是快速做一个卡牌游戏，所以选用房间制，但简化成只有一个房间 |\n\n# 二、报文协议设计\n\n## 2.1 报文类型\n\n| Name      | Description                                            |\n| --------- | ------------------------------------------------------ |\n| HeartBeat | 心跳，每隔一段时间发送一次，以确保网络是畅通的         |\n| LogIn     | 玩家登录                                               |\n| LogOut    | 玩家注销                                               |\n| StartGame | 开始游戏                                               |\n| Play      | 玩家操作，最复杂的报文，与游戏进行时的数据交互息息相关 |\n\n## 2.2 心跳报文 HeartBeat\n\n### 2.2.1 上传\n\n客户端每隔n秒上传1次心跳报文给服务端，若m秒内仍然未收到客户端的心跳报文，则视为离线，进行注销操作。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n| msgId      | int    | 报文id      |\n\n数据包中msgId是条件递增的，只有收到服务端的心跳反馈时才递增，否则msgId不变\n\n### 2.2.2 下发\n\n服务端接收到客户端的心跳报文后，发送心跳反馈报文给客户端。若客户端n秒内仍然未收到服务端的心跳反馈，则视为连接服务器失败。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n| msgId      | int    | 报文id      |\n\n## 2.3 玩家登录报文 LogIn\n\n### 2.3.1 上传\n\n登录请求。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n\n### 2.3.2 下发\n\n登录反馈。若客户端n秒内仍然未收到服务端的登录反馈，则视为登录服务器失败。\n\n数据包：\n\n| Name       | Type   | Description                                                  |\n| ---------- | ------ | ------------------------------------------------------------ |\n| playerName | string | 玩家名称                                                     |\n| fail       | bool   | 登录是否失败                                                 |\n| error      | int    | 登录失败原因，0-成功，1-已经登录了，2-房间已满, ...，255-未知原因 |\n\n## 2.4 玩家注销报文 LogOut\n\n### 2.4.1 上传\n\n注销。该报文不需要反馈报文。\n\n数据包：\n\n| Name       | Type   | Description |\n| ---------- | ------ | ----------- |\n| playerName | string | 玩家名称    |\n\n## 2.5 开始游戏 StartGame\n\n### 2.5.1 上传\n\n开始游戏请求。\n\n数据包：\n\n| Name       | Type   | Description  |\n| ---------- | ------ | ------------ |\n| playerName | string | 玩家名称     |\n| ready      | bool   | 是否准备就绪 |\n\n### 2.5.2 下发\n\n开始游戏反馈。若所有玩家都确定开始了，则服务端通知客户端开始游戏。\n\n数据包：\n\n| Name         | Type     | Description                               |\n| ------------ | -------- | ----------------------------------------- |\n| playerCount  | int      | 玩家数量                                  |\n| playersName  | string[] | 玩家名称列表，列表长度等于playerCount     |\n| playersReady | bool[]   | 玩家准备就绪列表，列表长度等于playerCount |\n| start        | bool     | 是否开始游戏                              |\n\n## 2.6 玩家操作报文 Play\n\n### 2.6.1 上传\n\n玩家操作报文，每隔n秒发送1次，若m秒内仍然未收到服务端反馈，则视为请求超时。\n\n数据包：\n\n| Name       | Type   | Description                           |\n| ---------- | ------ | ------------------------------------- |\n| playerName | string | 玩家名称                              |\n| msgId      | int    | 报文id                                |\n| type       | int    | 玩家操作枚举，0-无, ...，255-未知操作 |\n| data       | ?      | type操作对应的数据包                  |\n\n数据包中msgId是该玩家操作报文序列的当前标识id，此id是条件递增的，只有收到了服务端同样类型的玩家操作报文反馈才执行递增；数据包中type表示各种操作，例如出牌操作，抽卡操作等，其对应的操作数据包data也需要根据不同的操作来设计。\n\n### 2.6.2 下发\n\n玩家操作报文反馈。\n\n数据包：\n\n| Name       | Type   | Description                                     |\n| ---------- | ------ | ----------------------------------------------- |\n| playerName | string | 玩家名称                                        |\n| msgId      | int    | 报文id                                          |\n| type       | int    | 玩家操作枚举，0-无, ...，255-未知操作           |\n| data       | ?      | type操作对应的数据包                            |\n| fail       | bool   | 玩家操作请求是否失败                            |\n| error      | int    | 玩家操作请求失败原因，0-成功，...，255-未知原因 |\n\n# 三、服务端程序设计\n\n\n\n# 四、客户端程序设计\n\n","slug":"LAN","published":1,"updated":"2021-10-06T10:37:28.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4c000bjowz2kn719bw","content":"<h1 id=\"一-基础设计\"><a class=\"markdownIt-Anchor\" href=\"#一-基础设计\"></a> 一、基础设计</h1>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步方式</td>\n<td>状态同步</td>\n</tr>\n<tr>\n<td>网络协议</td>\n<td>TCP/IP</td>\n</tr>\n<tr>\n<td>客户端</td>\n<td>封装输入信息报文给服务器</td>\n</tr>\n<tr>\n<td>服务器</td>\n<td>接收客户端信息，处理游戏逻辑后把结果以报文形式反馈给指定客户端</td>\n</tr>\n<tr>\n<td>序列化工具</td>\n<td>LitJSON（报文根据协议封装&amp;解析，称之为序列化&amp;反序列化）</td>\n</tr>\n<tr>\n<td>报文协议</td>\n<td>由于我的目标是快速做一个卡牌游戏，所以选用房间制，但简化成只有一个房间</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"二-报文协议设计\"><a class=\"markdownIt-Anchor\" href=\"#二-报文协议设计\"></a> 二、报文协议设计</h1>\n<h2 id=\"21-报文类型\"><a class=\"markdownIt-Anchor\" href=\"#21-报文类型\"></a> 2.1 报文类型</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HeartBeat</td>\n<td>心跳，每隔一段时间发送一次，以确保网络是畅通的</td>\n</tr>\n<tr>\n<td>LogIn</td>\n<td>玩家登录</td>\n</tr>\n<tr>\n<td>LogOut</td>\n<td>玩家注销</td>\n</tr>\n<tr>\n<td>StartGame</td>\n<td>开始游戏</td>\n</tr>\n<tr>\n<td>Play</td>\n<td>玩家操作，最复杂的报文，与游戏进行时的数据交互息息相关</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"22-心跳报文-heartbeat\"><a class=\"markdownIt-Anchor\" href=\"#22-心跳报文-heartbeat\"></a> 2.2 心跳报文 HeartBeat</h2>\n<h3 id=\"221-上传\"><a class=\"markdownIt-Anchor\" href=\"#221-上传\"></a> 2.2.1 上传</h3>\n<p>客户端每隔n秒上传1次心跳报文给服务端，若m秒内仍然未收到客户端的心跳报文，则视为离线，进行注销操作。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n</tbody>\n</table>\n<p>数据包中msgId是条件递增的，只有收到服务端的心跳反馈时才递增，否则msgId不变</p>\n<h3 id=\"222-下发\"><a class=\"markdownIt-Anchor\" href=\"#222-下发\"></a> 2.2.2 下发</h3>\n<p>服务端接收到客户端的心跳报文后，发送心跳反馈报文给客户端。若客户端n秒内仍然未收到服务端的心跳反馈，则视为连接服务器失败。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"23-玩家登录报文-login\"><a class=\"markdownIt-Anchor\" href=\"#23-玩家登录报文-login\"></a> 2.3 玩家登录报文 LogIn</h2>\n<h3 id=\"231-上传\"><a class=\"markdownIt-Anchor\" href=\"#231-上传\"></a> 2.3.1 上传</h3>\n<p>登录请求。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"232-下发\"><a class=\"markdownIt-Anchor\" href=\"#232-下发\"></a> 2.3.2 下发</h3>\n<p>登录反馈。若客户端n秒内仍然未收到服务端的登录反馈，则视为登录服务器失败。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>bool</td>\n<td>登录是否失败</td>\n</tr>\n<tr>\n<td>error</td>\n<td>int</td>\n<td>登录失败原因，0-成功，1-已经登录了，2-房间已满, …，255-未知原因</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"24-玩家注销报文-logout\"><a class=\"markdownIt-Anchor\" href=\"#24-玩家注销报文-logout\"></a> 2.4 玩家注销报文 LogOut</h2>\n<h3 id=\"241-上传\"><a class=\"markdownIt-Anchor\" href=\"#241-上传\"></a> 2.4.1 上传</h3>\n<p>注销。该报文不需要反馈报文。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"25-开始游戏-startgame\"><a class=\"markdownIt-Anchor\" href=\"#25-开始游戏-startgame\"></a> 2.5 开始游戏 StartGame</h2>\n<h3 id=\"251-上传\"><a class=\"markdownIt-Anchor\" href=\"#251-上传\"></a> 2.5.1 上传</h3>\n<p>开始游戏请求。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>ready</td>\n<td>bool</td>\n<td>是否准备就绪</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"252-下发\"><a class=\"markdownIt-Anchor\" href=\"#252-下发\"></a> 2.5.2 下发</h3>\n<p>开始游戏反馈。若所有玩家都确定开始了，则服务端通知客户端开始游戏。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerCount</td>\n<td>int</td>\n<td>玩家数量</td>\n</tr>\n<tr>\n<td>playersName</td>\n<td>string[]</td>\n<td>玩家名称列表，列表长度等于playerCount</td>\n</tr>\n<tr>\n<td>playersReady</td>\n<td>bool[]</td>\n<td>玩家准备就绪列表，列表长度等于playerCount</td>\n</tr>\n<tr>\n<td>start</td>\n<td>bool</td>\n<td>是否开始游戏</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"26-玩家操作报文-play\"><a class=\"markdownIt-Anchor\" href=\"#26-玩家操作报文-play\"></a> 2.6 玩家操作报文 Play</h2>\n<h3 id=\"261-上传\"><a class=\"markdownIt-Anchor\" href=\"#261-上传\"></a> 2.6.1 上传</h3>\n<p>玩家操作报文，每隔n秒发送1次，若m秒内仍然未收到服务端反馈，则视为请求超时。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n<tr>\n<td>type</td>\n<td>int</td>\n<td>玩家操作枚举，0-无, …，255-未知操作</td>\n</tr>\n<tr>\n<td>data</td>\n<td>?</td>\n<td>type操作对应的数据包</td>\n</tr>\n</tbody>\n</table>\n<p>数据包中msgId是该玩家操作报文序列的当前标识id，此id是条件递增的，只有收到了服务端同样类型的玩家操作报文反馈才执行递增；数据包中type表示各种操作，例如出牌操作，抽卡操作等，其对应的操作数据包data也需要根据不同的操作来设计。</p>\n<h3 id=\"262-下发\"><a class=\"markdownIt-Anchor\" href=\"#262-下发\"></a> 2.6.2 下发</h3>\n<p>玩家操作报文反馈。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n<tr>\n<td>type</td>\n<td>int</td>\n<td>玩家操作枚举，0-无, …，255-未知操作</td>\n</tr>\n<tr>\n<td>data</td>\n<td>?</td>\n<td>type操作对应的数据包</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>bool</td>\n<td>玩家操作请求是否失败</td>\n</tr>\n<tr>\n<td>error</td>\n<td>int</td>\n<td>玩家操作请求失败原因，0-成功，…，255-未知原因</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"三-服务端程序设计\"><a class=\"markdownIt-Anchor\" href=\"#三-服务端程序设计\"></a> 三、服务端程序设计</h1>\n<h1 id=\"四-客户端程序设计\"><a class=\"markdownIt-Anchor\" href=\"#四-客户端程序设计\"></a> 四、客户端程序设计</h1>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础设计\"><a class=\"markdownIt-Anchor\" href=\"#一-基础设计\"></a> 一、基础设计</h1>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步方式</td>\n<td>状态同步</td>\n</tr>\n<tr>\n<td>网络协议</td>\n<td>TCP/IP</td>\n</tr>\n<tr>\n<td>客户端</td>\n<td>封装输入信息报文给服务器</td>\n</tr>\n<tr>\n<td>服务器</td>\n<td>接收客户端信息，处理游戏逻辑后把结果以报文形式反馈给指定客户端</td>\n</tr>\n<tr>\n<td>序列化工具</td>\n<td>LitJSON（报文根据协议封装&amp;解析，称之为序列化&amp;反序列化）</td>\n</tr>\n<tr>\n<td>报文协议</td>\n<td>由于我的目标是快速做一个卡牌游戏，所以选用房间制，但简化成只有一个房间</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"二-报文协议设计\"><a class=\"markdownIt-Anchor\" href=\"#二-报文协议设计\"></a> 二、报文协议设计</h1>\n<h2 id=\"21-报文类型\"><a class=\"markdownIt-Anchor\" href=\"#21-报文类型\"></a> 2.1 报文类型</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HeartBeat</td>\n<td>心跳，每隔一段时间发送一次，以确保网络是畅通的</td>\n</tr>\n<tr>\n<td>LogIn</td>\n<td>玩家登录</td>\n</tr>\n<tr>\n<td>LogOut</td>\n<td>玩家注销</td>\n</tr>\n<tr>\n<td>StartGame</td>\n<td>开始游戏</td>\n</tr>\n<tr>\n<td>Play</td>\n<td>玩家操作，最复杂的报文，与游戏进行时的数据交互息息相关</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"22-心跳报文-heartbeat\"><a class=\"markdownIt-Anchor\" href=\"#22-心跳报文-heartbeat\"></a> 2.2 心跳报文 HeartBeat</h2>\n<h3 id=\"221-上传\"><a class=\"markdownIt-Anchor\" href=\"#221-上传\"></a> 2.2.1 上传</h3>\n<p>客户端每隔n秒上传1次心跳报文给服务端，若m秒内仍然未收到客户端的心跳报文，则视为离线，进行注销操作。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n</tbody>\n</table>\n<p>数据包中msgId是条件递增的，只有收到服务端的心跳反馈时才递增，否则msgId不变</p>\n<h3 id=\"222-下发\"><a class=\"markdownIt-Anchor\" href=\"#222-下发\"></a> 2.2.2 下发</h3>\n<p>服务端接收到客户端的心跳报文后，发送心跳反馈报文给客户端。若客户端n秒内仍然未收到服务端的心跳反馈，则视为连接服务器失败。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"23-玩家登录报文-login\"><a class=\"markdownIt-Anchor\" href=\"#23-玩家登录报文-login\"></a> 2.3 玩家登录报文 LogIn</h2>\n<h3 id=\"231-上传\"><a class=\"markdownIt-Anchor\" href=\"#231-上传\"></a> 2.3.1 上传</h3>\n<p>登录请求。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"232-下发\"><a class=\"markdownIt-Anchor\" href=\"#232-下发\"></a> 2.3.2 下发</h3>\n<p>登录反馈。若客户端n秒内仍然未收到服务端的登录反馈，则视为登录服务器失败。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>bool</td>\n<td>登录是否失败</td>\n</tr>\n<tr>\n<td>error</td>\n<td>int</td>\n<td>登录失败原因，0-成功，1-已经登录了，2-房间已满, …，255-未知原因</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"24-玩家注销报文-logout\"><a class=\"markdownIt-Anchor\" href=\"#24-玩家注销报文-logout\"></a> 2.4 玩家注销报文 LogOut</h2>\n<h3 id=\"241-上传\"><a class=\"markdownIt-Anchor\" href=\"#241-上传\"></a> 2.4.1 上传</h3>\n<p>注销。该报文不需要反馈报文。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"25-开始游戏-startgame\"><a class=\"markdownIt-Anchor\" href=\"#25-开始游戏-startgame\"></a> 2.5 开始游戏 StartGame</h2>\n<h3 id=\"251-上传\"><a class=\"markdownIt-Anchor\" href=\"#251-上传\"></a> 2.5.1 上传</h3>\n<p>开始游戏请求。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>ready</td>\n<td>bool</td>\n<td>是否准备就绪</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"252-下发\"><a class=\"markdownIt-Anchor\" href=\"#252-下发\"></a> 2.5.2 下发</h3>\n<p>开始游戏反馈。若所有玩家都确定开始了，则服务端通知客户端开始游戏。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerCount</td>\n<td>int</td>\n<td>玩家数量</td>\n</tr>\n<tr>\n<td>playersName</td>\n<td>string[]</td>\n<td>玩家名称列表，列表长度等于playerCount</td>\n</tr>\n<tr>\n<td>playersReady</td>\n<td>bool[]</td>\n<td>玩家准备就绪列表，列表长度等于playerCount</td>\n</tr>\n<tr>\n<td>start</td>\n<td>bool</td>\n<td>是否开始游戏</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"26-玩家操作报文-play\"><a class=\"markdownIt-Anchor\" href=\"#26-玩家操作报文-play\"></a> 2.6 玩家操作报文 Play</h2>\n<h3 id=\"261-上传\"><a class=\"markdownIt-Anchor\" href=\"#261-上传\"></a> 2.6.1 上传</h3>\n<p>玩家操作报文，每隔n秒发送1次，若m秒内仍然未收到服务端反馈，则视为请求超时。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n<tr>\n<td>type</td>\n<td>int</td>\n<td>玩家操作枚举，0-无, …，255-未知操作</td>\n</tr>\n<tr>\n<td>data</td>\n<td>?</td>\n<td>type操作对应的数据包</td>\n</tr>\n</tbody>\n</table>\n<p>数据包中msgId是该玩家操作报文序列的当前标识id，此id是条件递增的，只有收到了服务端同样类型的玩家操作报文反馈才执行递增；数据包中type表示各种操作，例如出牌操作，抽卡操作等，其对应的操作数据包data也需要根据不同的操作来设计。</p>\n<h3 id=\"262-下发\"><a class=\"markdownIt-Anchor\" href=\"#262-下发\"></a> 2.6.2 下发</h3>\n<p>玩家操作报文反馈。</p>\n<p>数据包：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>playerName</td>\n<td>string</td>\n<td>玩家名称</td>\n</tr>\n<tr>\n<td>msgId</td>\n<td>int</td>\n<td>报文id</td>\n</tr>\n<tr>\n<td>type</td>\n<td>int</td>\n<td>玩家操作枚举，0-无, …，255-未知操作</td>\n</tr>\n<tr>\n<td>data</td>\n<td>?</td>\n<td>type操作对应的数据包</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>bool</td>\n<td>玩家操作请求是否失败</td>\n</tr>\n<tr>\n<td>error</td>\n<td>int</td>\n<td>玩家操作请求失败原因，0-成功，…，255-未知原因</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"三-服务端程序设计\"><a class=\"markdownIt-Anchor\" href=\"#三-服务端程序设计\"></a> 三、服务端程序设计</h1>\n<h1 id=\"四-客户端程序设计\"><a class=\"markdownIt-Anchor\" href=\"#四-客户端程序设计\"></a> 四、客户端程序设计</h1>\n"},{"title":"火焰类法术粒子特效设计思路解析","date":"2022-02-22T11:50:00.000Z","toc":true,"banner_img":"/img/Particle/Title.png","banner_img_set":"/img/Particle/Title.png","_content":"\n# 一、效果展示\n\n**前排注意，本文动图较多，请耐心等待加载完毕！！**\n\n![](/img/Particle/FireBall.gif)\n\n![](/img/Particle/MagicMissile.gif)\n\n![](/img/Particle/Explosion.gif)\n\n![](/img/Particle/Torch.gif)\n\n主要参考了《Lost Ruins》的粒子效果设计，下面进行设计思路解析（具体粒子特效属性设置请移步至项目https://github.com/NumbFish-Luo/Project01 ）\n\n# 二、设计思路解析\n\n## 2.1 火球术\n\n![](/img/Particle/FireBall.gif)\n\n![](/img/Particle/Explosion.gif)\n\n![](/img/Particle/FireBallPrefab.png)\n\n火球术的设计，从上到下，分成了：\n\n- 中间拖尾粒子（MiddleParticle1）\n- 中间的头部粒子（MiddleParticle2）\n- 外围稀疏的粒子（OutsideParticle）\n- 黑色烟雾粒子（BlackFogParticle）\n- 2D光源中的红色光（Light2D/RedLight）\n- 镜头光晕（Light2D/LensFlare）\n- 爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）\n- 随风消逝的粒子（ExplosionEffect/Particle2）\n- 三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）\n- 热扭曲特效（HeatDistortion）\n\n![](/img/Particle/FireParticleSprite.png)\n\n火球术粒子的贴图本身是长方形的白色虚边缘图片（上图，请在暗黑模式下观看）。默认情况下粒子不会往一个明确的方向飘，不过它具有一定的飞行速度，并且在设置中，所有粒子的simulation space改成world，shape为cone，方向从后往前（xyz的旋转角度都为0），color over lifetime设置颜色随生命周期逐渐变深变透明，rotation over lifetime和rotation by speed的范围在-360°到360°之间，打开noise进行一定程度上的扰动……通过这些设置后，火球术在移动时就会展示出漂亮的拖尾效果了！\n\n![](/img/Particle/LensFlare.png)\n\n火球术本身带有碰撞盒，当火球术击中物体时，会播放爆炸特效部分，爆炸时会显示3段上中下放置的较强的镜头光晕（上图，同样请在暗黑模式下观看），1个炸开花的粒子特效，1个随风消逝的粒子特效。在爆炸特效播放结束后将销毁火球术本身\n\n另外的热扭曲特效部分在这里不展开讲，请移步至 [文章链接未定]\n\n## 2.2 魔法飞弹\n\n![](/img/Particle/MagicMissile.gif)\n\n![](/img/Particle/Explosion.gif)\n\n![](/img/Particle/MagicMissilePrefab.png)\n\n魔法飞弹的设计，参考了火球术，从上到下，分成了：\n\n- 中间拖尾粒子（MiddleParticle1）\n- 中间的头部粒子（MiddleParticle2）\n- 中间稀疏的粒子（MiddleParticle2）\n- 2D光源中的紫色光（Light2D/PurpleLight）\n- 镜头光晕（Light2D/LensFlare）\n- 爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）\n- 随风消逝的粒子（ExplosionEffect/Particle2）\n- 三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）\n\n![](/img/Particle/MagicMissileParticleSprite.png)\n\n魔法飞弹有两种贴图，一种是使用了上面火球术的长方形白色虚边缘图片，还有一种是白色的魔法火焰序列帧（上图，同样请在暗黑模式下观看）。魔法飞弹和火球术一样具有飞行速度和碰撞盒，但是没有热扭曲特效。\n\n## 2.3 火把\n\n![](/img/Particle/Torch.gif)\n\n![](/img/Particle/TorchPrefab.png)\n\n火把的设计，同样参考了火球术，不过火把本身不带有速度（虽然有也没关系），所以其粒子默认情况下是会自动往上飘的。其结构从上到下，分成了：\n\n- 中间往上飘的粒子（MiddleParticle）\n- 外围稀疏的往上飘的粒子（OutsideParticle）\n- 背景的往上飘的黑色烟雾（BlackFogParticle）\n- 2D光源中的两个红色光（Light2D/RedLight1-RedLight2）\n- 镜头光晕（Light2D/LensFlare）\n- 热扭曲特效（HeatDistortion）\n\n## 2.4 其他\n\n更多粒子特效后续再补充...","source":"_posts/Particle.md","raw":"---\ntitle: 火焰类法术粒子特效设计思路解析\ndate: 2022-02-22 19:50:00\ntoc: true\ntags:\n- Unity\n- Particle\ncategories:\n- Unity\nbanner_img: /img/Particle/Title.png\nbanner_img_set: /img/Particle/Title.png\n---\n\n# 一、效果展示\n\n**前排注意，本文动图较多，请耐心等待加载完毕！！**\n\n![](/img/Particle/FireBall.gif)\n\n![](/img/Particle/MagicMissile.gif)\n\n![](/img/Particle/Explosion.gif)\n\n![](/img/Particle/Torch.gif)\n\n主要参考了《Lost Ruins》的粒子效果设计，下面进行设计思路解析（具体粒子特效属性设置请移步至项目https://github.com/NumbFish-Luo/Project01 ）\n\n# 二、设计思路解析\n\n## 2.1 火球术\n\n![](/img/Particle/FireBall.gif)\n\n![](/img/Particle/Explosion.gif)\n\n![](/img/Particle/FireBallPrefab.png)\n\n火球术的设计，从上到下，分成了：\n\n- 中间拖尾粒子（MiddleParticle1）\n- 中间的头部粒子（MiddleParticle2）\n- 外围稀疏的粒子（OutsideParticle）\n- 黑色烟雾粒子（BlackFogParticle）\n- 2D光源中的红色光（Light2D/RedLight）\n- 镜头光晕（Light2D/LensFlare）\n- 爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）\n- 随风消逝的粒子（ExplosionEffect/Particle2）\n- 三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）\n- 热扭曲特效（HeatDistortion）\n\n![](/img/Particle/FireParticleSprite.png)\n\n火球术粒子的贴图本身是长方形的白色虚边缘图片（上图，请在暗黑模式下观看）。默认情况下粒子不会往一个明确的方向飘，不过它具有一定的飞行速度，并且在设置中，所有粒子的simulation space改成world，shape为cone，方向从后往前（xyz的旋转角度都为0），color over lifetime设置颜色随生命周期逐渐变深变透明，rotation over lifetime和rotation by speed的范围在-360°到360°之间，打开noise进行一定程度上的扰动……通过这些设置后，火球术在移动时就会展示出漂亮的拖尾效果了！\n\n![](/img/Particle/LensFlare.png)\n\n火球术本身带有碰撞盒，当火球术击中物体时，会播放爆炸特效部分，爆炸时会显示3段上中下放置的较强的镜头光晕（上图，同样请在暗黑模式下观看），1个炸开花的粒子特效，1个随风消逝的粒子特效。在爆炸特效播放结束后将销毁火球术本身\n\n另外的热扭曲特效部分在这里不展开讲，请移步至 [文章链接未定]\n\n## 2.2 魔法飞弹\n\n![](/img/Particle/MagicMissile.gif)\n\n![](/img/Particle/Explosion.gif)\n\n![](/img/Particle/MagicMissilePrefab.png)\n\n魔法飞弹的设计，参考了火球术，从上到下，分成了：\n\n- 中间拖尾粒子（MiddleParticle1）\n- 中间的头部粒子（MiddleParticle2）\n- 中间稀疏的粒子（MiddleParticle2）\n- 2D光源中的紫色光（Light2D/PurpleLight）\n- 镜头光晕（Light2D/LensFlare）\n- 爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）\n- 随风消逝的粒子（ExplosionEffect/Particle2）\n- 三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）\n\n![](/img/Particle/MagicMissileParticleSprite.png)\n\n魔法飞弹有两种贴图，一种是使用了上面火球术的长方形白色虚边缘图片，还有一种是白色的魔法火焰序列帧（上图，同样请在暗黑模式下观看）。魔法飞弹和火球术一样具有飞行速度和碰撞盒，但是没有热扭曲特效。\n\n## 2.3 火把\n\n![](/img/Particle/Torch.gif)\n\n![](/img/Particle/TorchPrefab.png)\n\n火把的设计，同样参考了火球术，不过火把本身不带有速度（虽然有也没关系），所以其粒子默认情况下是会自动往上飘的。其结构从上到下，分成了：\n\n- 中间往上飘的粒子（MiddleParticle）\n- 外围稀疏的往上飘的粒子（OutsideParticle）\n- 背景的往上飘的黑色烟雾（BlackFogParticle）\n- 2D光源中的两个红色光（Light2D/RedLight1-RedLight2）\n- 镜头光晕（Light2D/LensFlare）\n- 热扭曲特效（HeatDistortion）\n\n## 2.4 其他\n\n更多粒子特效后续再补充...","slug":"Particle","published":1,"updated":"2022-02-22T12:37:53.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4d000cjowz1izlgq4b","content":"<h1 id=\"一-效果展示\"><a class=\"markdownIt-Anchor\" href=\"#一-效果展示\"></a> 一、效果展示</h1>\n<p><strong>前排注意，本文动图较多，请耐心等待加载完毕！！</strong></p>\n<p><img src=\"/img/Particle/FireBall.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/FireBall.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/MagicMissile.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/MagicMissile.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/Explosion.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/Explosion.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/Torch.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/Torch.gif\" class=\"lozad post-image\"></p>\n<p>主要参考了《Lost Ruins》的粒子效果设计，下面进行设计思路解析（具体粒子特效属性设置请移步至项目https://github.com/NumbFish-Luo/Project01 ）</p>\n<h1 id=\"二-设计思路解析\"><a class=\"markdownIt-Anchor\" href=\"#二-设计思路解析\"></a> 二、设计思路解析</h1>\n<h2 id=\"21-火球术\"><a class=\"markdownIt-Anchor\" href=\"#21-火球术\"></a> 2.1 火球术</h2>\n<p><img src=\"/img/Particle/FireBall.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/FireBall.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/Explosion.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/Explosion.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/FireBallPrefab.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/FireBallPrefab.png\" class=\"lozad post-image\"></p>\n<p>火球术的设计，从上到下，分成了：</p>\n<ul>\n<li>中间拖尾粒子（MiddleParticle1）</li>\n<li>中间的头部粒子（MiddleParticle2）</li>\n<li>外围稀疏的粒子（OutsideParticle）</li>\n<li>黑色烟雾粒子（BlackFogParticle）</li>\n<li>2D光源中的红色光（Light2D/RedLight）</li>\n<li>镜头光晕（Light2D/LensFlare）</li>\n<li>爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）</li>\n<li>随风消逝的粒子（ExplosionEffect/Particle2）</li>\n<li>三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）</li>\n<li>热扭曲特效（HeatDistortion）</li>\n</ul>\n<p><img src=\"/img/Particle/FireParticleSprite.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/FireParticleSprite.png\" class=\"lozad post-image\"></p>\n<p>火球术粒子的贴图本身是长方形的白色虚边缘图片（上图，请在暗黑模式下观看）。默认情况下粒子不会往一个明确的方向飘，不过它具有一定的飞行速度，并且在设置中，所有粒子的simulation space改成world，shape为cone，方向从后往前（xyz的旋转角度都为0），color over lifetime设置颜色随生命周期逐渐变深变透明，rotation over lifetime和rotation by speed的范围在-360°到360°之间，打开noise进行一定程度上的扰动……通过这些设置后，火球术在移动时就会展示出漂亮的拖尾效果了！</p>\n<p><img src=\"/img/Particle/LensFlare.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/LensFlare.png\" class=\"lozad post-image\"></p>\n<p>火球术本身带有碰撞盒，当火球术击中物体时，会播放爆炸特效部分，爆炸时会显示3段上中下放置的较强的镜头光晕（上图，同样请在暗黑模式下观看），1个炸开花的粒子特效，1个随风消逝的粒子特效。在爆炸特效播放结束后将销毁火球术本身</p>\n<p>另外的热扭曲特效部分在这里不展开讲，请移步至 [文章链接未定]</p>\n<h2 id=\"22-魔法飞弹\"><a class=\"markdownIt-Anchor\" href=\"#22-魔法飞弹\"></a> 2.2 魔法飞弹</h2>\n<p><img src=\"/img/Particle/MagicMissile.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/MagicMissile.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/Explosion.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/Explosion.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/MagicMissilePrefab.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/MagicMissilePrefab.png\" class=\"lozad post-image\"></p>\n<p>魔法飞弹的设计，参考了火球术，从上到下，分成了：</p>\n<ul>\n<li>中间拖尾粒子（MiddleParticle1）</li>\n<li>中间的头部粒子（MiddleParticle2）</li>\n<li>中间稀疏的粒子（MiddleParticle2）</li>\n<li>2D光源中的紫色光（Light2D/PurpleLight）</li>\n<li>镜头光晕（Light2D/LensFlare）</li>\n<li>爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）</li>\n<li>随风消逝的粒子（ExplosionEffect/Particle2）</li>\n<li>三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）</li>\n</ul>\n<p><img src=\"/img/Particle/MagicMissileParticleSprite.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/MagicMissileParticleSprite.png\" class=\"lozad post-image\"></p>\n<p>魔法飞弹有两种贴图，一种是使用了上面火球术的长方形白色虚边缘图片，还有一种是白色的魔法火焰序列帧（上图，同样请在暗黑模式下观看）。魔法飞弹和火球术一样具有飞行速度和碰撞盒，但是没有热扭曲特效。</p>\n<h2 id=\"23-火把\"><a class=\"markdownIt-Anchor\" href=\"#23-火把\"></a> 2.3 火把</h2>\n<p><img src=\"/img/Particle/Torch.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/Torch.gif\" class=\"lozad post-image\"></p>\n<p><img src=\"/img/Particle/TorchPrefab.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Particle/TorchPrefab.png\" class=\"lozad post-image\"></p>\n<p>火把的设计，同样参考了火球术，不过火把本身不带有速度（虽然有也没关系），所以其粒子默认情况下是会自动往上飘的。其结构从上到下，分成了：</p>\n<ul>\n<li>中间往上飘的粒子（MiddleParticle）</li>\n<li>外围稀疏的往上飘的粒子（OutsideParticle）</li>\n<li>背景的往上飘的黑色烟雾（BlackFogParticle）</li>\n<li>2D光源中的两个红色光（Light2D/RedLight1-RedLight2）</li>\n<li>镜头光晕（Light2D/LensFlare）</li>\n<li>热扭曲特效（HeatDistortion）</li>\n</ul>\n<h2 id=\"24-其他\"><a class=\"markdownIt-Anchor\" href=\"#24-其他\"></a> 2.4 其他</h2>\n<p>更多粒子特效后续再补充…</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-效果展示\"><a class=\"markdownIt-Anchor\" href=\"#一-效果展示\"></a> 一、效果展示</h1>\n<p><strong>前排注意，本文动图较多，请耐心等待加载完毕！！</strong></p>\n<p><img src=\"/img/Particle/FireBall.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/MagicMissile.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/Explosion.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/Torch.gif\" alt=\"\" /></p>\n<p>主要参考了《Lost Ruins》的粒子效果设计，下面进行设计思路解析（具体粒子特效属性设置请移步至项目https://github.com/NumbFish-Luo/Project01 ）</p>\n<h1 id=\"二-设计思路解析\"><a class=\"markdownIt-Anchor\" href=\"#二-设计思路解析\"></a> 二、设计思路解析</h1>\n<h2 id=\"21-火球术\"><a class=\"markdownIt-Anchor\" href=\"#21-火球术\"></a> 2.1 火球术</h2>\n<p><img src=\"/img/Particle/FireBall.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/Explosion.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/FireBallPrefab.png\" alt=\"\" /></p>\n<p>火球术的设计，从上到下，分成了：</p>\n<ul>\n<li>中间拖尾粒子（MiddleParticle1）</li>\n<li>中间的头部粒子（MiddleParticle2）</li>\n<li>外围稀疏的粒子（OutsideParticle）</li>\n<li>黑色烟雾粒子（BlackFogParticle）</li>\n<li>2D光源中的红色光（Light2D/RedLight）</li>\n<li>镜头光晕（Light2D/LensFlare）</li>\n<li>爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）</li>\n<li>随风消逝的粒子（ExplosionEffect/Particle2）</li>\n<li>三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）</li>\n<li>热扭曲特效（HeatDistortion）</li>\n</ul>\n<p><img src=\"/img/Particle/FireParticleSprite.png\" alt=\"\" /></p>\n<p>火球术粒子的贴图本身是长方形的白色虚边缘图片（上图，请在暗黑模式下观看）。默认情况下粒子不会往一个明确的方向飘，不过它具有一定的飞行速度，并且在设置中，所有粒子的simulation space改成world，shape为cone，方向从后往前（xyz的旋转角度都为0），color over lifetime设置颜色随生命周期逐渐变深变透明，rotation over lifetime和rotation by speed的范围在-360°到360°之间，打开noise进行一定程度上的扰动……通过这些设置后，火球术在移动时就会展示出漂亮的拖尾效果了！</p>\n<p><img src=\"/img/Particle/LensFlare.png\" alt=\"\" /></p>\n<p>火球术本身带有碰撞盒，当火球术击中物体时，会播放爆炸特效部分，爆炸时会显示3段上中下放置的较强的镜头光晕（上图，同样请在暗黑模式下观看），1个炸开花的粒子特效，1个随风消逝的粒子特效。在爆炸特效播放结束后将销毁火球术本身</p>\n<p>另外的热扭曲特效部分在这里不展开讲，请移步至 [文章链接未定]</p>\n<h2 id=\"22-魔法飞弹\"><a class=\"markdownIt-Anchor\" href=\"#22-魔法飞弹\"></a> 2.2 魔法飞弹</h2>\n<p><img src=\"/img/Particle/MagicMissile.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/Explosion.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/MagicMissilePrefab.png\" alt=\"\" /></p>\n<p>魔法飞弹的设计，参考了火球术，从上到下，分成了：</p>\n<ul>\n<li>中间拖尾粒子（MiddleParticle1）</li>\n<li>中间的头部粒子（MiddleParticle2）</li>\n<li>中间稀疏的粒子（MiddleParticle2）</li>\n<li>2D光源中的紫色光（Light2D/PurpleLight）</li>\n<li>镜头光晕（Light2D/LensFlare）</li>\n<li>爆炸特效中的炸开花的粒子（ExplosionEffect/Particle1）</li>\n<li>随风消逝的粒子（ExplosionEffect/Particle2）</li>\n<li>三段镜头爆炸光晕（ExplosionEffect/Light2D/LensFlare1-LensFlare3）</li>\n</ul>\n<p><img src=\"/img/Particle/MagicMissileParticleSprite.png\" alt=\"\" /></p>\n<p>魔法飞弹有两种贴图，一种是使用了上面火球术的长方形白色虚边缘图片，还有一种是白色的魔法火焰序列帧（上图，同样请在暗黑模式下观看）。魔法飞弹和火球术一样具有飞行速度和碰撞盒，但是没有热扭曲特效。</p>\n<h2 id=\"23-火把\"><a class=\"markdownIt-Anchor\" href=\"#23-火把\"></a> 2.3 火把</h2>\n<p><img src=\"/img/Particle/Torch.gif\" alt=\"\" /></p>\n<p><img src=\"/img/Particle/TorchPrefab.png\" alt=\"\" /></p>\n<p>火把的设计，同样参考了火球术，不过火把本身不带有速度（虽然有也没关系），所以其粒子默认情况下是会自动往上飘的。其结构从上到下，分成了：</p>\n<ul>\n<li>中间往上飘的粒子（MiddleParticle）</li>\n<li>外围稀疏的往上飘的粒子（OutsideParticle）</li>\n<li>背景的往上飘的黑色烟雾（BlackFogParticle）</li>\n<li>2D光源中的两个红色光（Light2D/RedLight1-RedLight2）</li>\n<li>镜头光晕（Light2D/LensFlare）</li>\n<li>热扭曲特效（HeatDistortion）</li>\n</ul>\n<h2 id=\"24-其他\"><a class=\"markdownIt-Anchor\" href=\"#24-其他\"></a> 2.4 其他</h2>\n<p>更多粒子特效后续再补充…</p>\n"},{"title":"安利列表","date":"2021-07-28T12:00:00.000Z","toc":true,"banner_img":"/img/Aranya.jpg","banner_img_set":"/img/Aranya.jpg","_content":"\n> 封面图：秦皇岛阿那亚艺术中心内部，个人摄影作品\n\n| 名称                                    | 标签             | 描述                                                         | 地址/命令行                                                  |\n| --------------------------------------- | ---------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Everything                              | 搜索             | 一个比Windows自带的搜索工具要快n倍的搜索工具                 | http://www.voidtools.com/                                    |\n| Uninstall Tool                          | 卸载             | 一个比Windows自带的卸载工具要快n倍的卸载工具                 | https://www.crystalidea.com/uninstall-tool                   |\n| Notepad++                               | 文本编辑器       | 一个比Windows自带的文本编辑器要好用n倍的文本编辑器           | https://notepad-plus-plus.org/                               |\n| TicKeys                                 | 玩具             | 模拟机械键盘按键音的程序，打字的时候很爽:-)                  | http://www.yingdev.com/projects/tickeys                      |\n| PowerMode插件                           | 编程、玩具       | 敲代码的时候屏幕会跳动，配合TicKeys食用效果更佳:-)           | https://github.com/codeinthedark/awesome-power-mode          |\n| EV录屏                                  | 视频录制         | 免费的录屏工具，没有水印                                     | https://www.ieway.cn/evcapture.html                          |\n| LICEcap                                 | 视频录制         | 开源的、简单易用的Gif录屏工具，配合ps后期编辑效果更佳        | https://www.cockos.com/licecap/                              |\n| Umlet                                   | 编程             | 免费的、很好用的UML类图编辑工具，学编程设计模式的朋友可以用一下 | https://www.umlet.com/                                       |\n| MagicaVoxel                             | 绘画             | 立体像素画绘图工具，像在玩mc的感觉（晕3D的朋友慎用...），可惜绘图区域有限 | https://ephtracy.github.io/                                  |\n| 0CC-FamiTracker                         | 音乐             | 芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐 | http://hertzdevil.info/programs/                             |\n| FamiStudio                              | 音乐             | 芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐。编辑界面相比FamiTracker更加现代化 | https://famistudio.org/                                      |\n| SpaceSniffer                            | 磁盘整理         | 一个能扫描磁盘，以帮助整理删除磁盘文件的工具，扫描过程很帅，C盘快满的朋友可以用一下 | http://www.uderzo.it/main_products/space_sniffer/            |\n| AutoHotKey                              | 脚本语言         | 简写AHK，直译就是“自动热键”。本质上是一个脚本语言，有一套自己的语法，可以快速写出一些有用的脚本程序 | https://www.autohotkey.com/                                  |\n| Capslock+                               | 效率工具         | 一个加强Capslock键（大写锁键）的功能，以提高效率的工具。因为是用AHK写的，所以要先下载AHK才行 | https://cjkis.me/capslock+/                                  |\n| Golly                                   | 数学             | 称为“生命游戏”的数学游戏（可搜索“生命游戏”了解一下），挺有趣的:-) | http://golly.sourceforge.net/                                |\n| TranslucentTB                           | 美化             | 可以让工具栏变成透明效果、模糊效果                           | https://github.com/TranslucentTB/TranslucentTB               |\n| XMPlay                                  | 音乐             | 一个支持很多格式的音乐播放器，程序界面看上去挺好看的         | http://www.xmplay.com/                                       |\n| ZType                                   | 游戏             | 一个很不错的打字游戏，网站后缀是.pe不是.com                  | https://zty.pe/                                              |\n| Insert No Coins                         | 极客动画         | 不到64kb的3D动画！                                           | https://github.com/razordemo/Insert-No-Coins<br/>https://www.pouet.net/prod.php?which=55991 |\n| SuperFlight                             | 游戏             | 直译就是“超级飞行”，飞行越贴近地面分数就越高的游戏           | https://superflightgame.com/                                 |\n| One Piece - Grand Battle Swan Colloseum | 怀旧掌机游戏     | WSC掌机上的海贼王格斗游戏，需要下载一个WSC模拟器才能玩       | https://emulator.games/roms/wonderswan/one-piece-grand-battle-swan-colloseum/ |\n| cmatrix                                 | Linux命令        | 黑客帝国字节流效果模拟，可以假装自己是一个黑客               | $ sudo apt-get install cmatrix<br/>$ cmatrix                 |\n| sl                                      | Linux命令        | 火车动画，没什么用                                           | $ sudo apt-get install sl<br/>$ sl                           |\n| thefuck                                 | Linux命令        | 敲错命令的时候可以大喊一声fuck，详细操作请自行百度:-)        | $ sudo apt update<br/>$ sudo apt install python3-dev python3-pip<br/>$ sudo pip3 install thefuck<br/>$ vim ~/.bashrc<br/>$ eval \"$(thefuck --alias fuck)\"<br/>$ source ~/.bashrc |\n| Mindustry                               | 游戏             | 建造资源运输线，建造防御塔，抵御敌人入侵的塔防游戏。steam有售 | https://anuke.itch.io/mindustry                              |\n| Kraftwerk                               | 乐队             | 60年代末的德国前卫摇滚、实验电子                             | http://www.kraftwerk.com/                                    |\n| Nazo_Game                               | 游戏             | 运用电脑知识、语言学、梗等等的解谜游戏                       | http://nazo.one-story.cn/                                    |\n| EYEZMAZE                                | 个人游戏网站     | 很有趣的游戏网站，站长是一位日本的游戏开发者，Grow系列游戏的制作人 | http://www.eyezmaze.com/                                     |\n| http://ikyo.ys168.com/                  | 怀旧游戏         | 里面包含了FC游戏大全，Famitracker汉化之类的东西              | http://ikyo.ys168.com/                                       |\n| donjon                                  | 随机地图生成器   | RPG游戏制作必备！随机世界地图生成器                          | http://donjon.bin.sh/                                        |\n| TinyPNG                                 | 压图工具         | TinyPNG使用智能有损压缩技术将您的PNG文件的**文件大小降低**。 通过选择性的减少图片中的颜色，只需要很少的字节数就能保存数据。 对视觉的影响几乎不可见，但是在文件大小上有非常大的差别 | https://tinify.cn/                                           |\n| DeepL Translate                         | 深度学习翻译软件 | 一家德国科技公司开发的翻译软件。号称强过谷歌翻译，机器翻译在盲测中秒杀同行业产品 | https://www.deepl.com/translator                             |\n\n","source":"_posts/Recommendations.md","raw":"---\ntitle: 安利列表\ndate: 2021-07-28 20:00:00\ntoc: true\ntags:\n- Recommendation\ncategories:\n- Recommendation\nbanner_img: /img/Aranya.jpg\nbanner_img_set: /img/Aranya.jpg\n---\n\n> 封面图：秦皇岛阿那亚艺术中心内部，个人摄影作品\n\n| 名称                                    | 标签             | 描述                                                         | 地址/命令行                                                  |\n| --------------------------------------- | ---------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Everything                              | 搜索             | 一个比Windows自带的搜索工具要快n倍的搜索工具                 | http://www.voidtools.com/                                    |\n| Uninstall Tool                          | 卸载             | 一个比Windows自带的卸载工具要快n倍的卸载工具                 | https://www.crystalidea.com/uninstall-tool                   |\n| Notepad++                               | 文本编辑器       | 一个比Windows自带的文本编辑器要好用n倍的文本编辑器           | https://notepad-plus-plus.org/                               |\n| TicKeys                                 | 玩具             | 模拟机械键盘按键音的程序，打字的时候很爽:-)                  | http://www.yingdev.com/projects/tickeys                      |\n| PowerMode插件                           | 编程、玩具       | 敲代码的时候屏幕会跳动，配合TicKeys食用效果更佳:-)           | https://github.com/codeinthedark/awesome-power-mode          |\n| EV录屏                                  | 视频录制         | 免费的录屏工具，没有水印                                     | https://www.ieway.cn/evcapture.html                          |\n| LICEcap                                 | 视频录制         | 开源的、简单易用的Gif录屏工具，配合ps后期编辑效果更佳        | https://www.cockos.com/licecap/                              |\n| Umlet                                   | 编程             | 免费的、很好用的UML类图编辑工具，学编程设计模式的朋友可以用一下 | https://www.umlet.com/                                       |\n| MagicaVoxel                             | 绘画             | 立体像素画绘图工具，像在玩mc的感觉（晕3D的朋友慎用...），可惜绘图区域有限 | https://ephtracy.github.io/                                  |\n| 0CC-FamiTracker                         | 音乐             | 芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐 | http://hertzdevil.info/programs/                             |\n| FamiStudio                              | 音乐             | 芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐。编辑界面相比FamiTracker更加现代化 | https://famistudio.org/                                      |\n| SpaceSniffer                            | 磁盘整理         | 一个能扫描磁盘，以帮助整理删除磁盘文件的工具，扫描过程很帅，C盘快满的朋友可以用一下 | http://www.uderzo.it/main_products/space_sniffer/            |\n| AutoHotKey                              | 脚本语言         | 简写AHK，直译就是“自动热键”。本质上是一个脚本语言，有一套自己的语法，可以快速写出一些有用的脚本程序 | https://www.autohotkey.com/                                  |\n| Capslock+                               | 效率工具         | 一个加强Capslock键（大写锁键）的功能，以提高效率的工具。因为是用AHK写的，所以要先下载AHK才行 | https://cjkis.me/capslock+/                                  |\n| Golly                                   | 数学             | 称为“生命游戏”的数学游戏（可搜索“生命游戏”了解一下），挺有趣的:-) | http://golly.sourceforge.net/                                |\n| TranslucentTB                           | 美化             | 可以让工具栏变成透明效果、模糊效果                           | https://github.com/TranslucentTB/TranslucentTB               |\n| XMPlay                                  | 音乐             | 一个支持很多格式的音乐播放器，程序界面看上去挺好看的         | http://www.xmplay.com/                                       |\n| ZType                                   | 游戏             | 一个很不错的打字游戏，网站后缀是.pe不是.com                  | https://zty.pe/                                              |\n| Insert No Coins                         | 极客动画         | 不到64kb的3D动画！                                           | https://github.com/razordemo/Insert-No-Coins<br/>https://www.pouet.net/prod.php?which=55991 |\n| SuperFlight                             | 游戏             | 直译就是“超级飞行”，飞行越贴近地面分数就越高的游戏           | https://superflightgame.com/                                 |\n| One Piece - Grand Battle Swan Colloseum | 怀旧掌机游戏     | WSC掌机上的海贼王格斗游戏，需要下载一个WSC模拟器才能玩       | https://emulator.games/roms/wonderswan/one-piece-grand-battle-swan-colloseum/ |\n| cmatrix                                 | Linux命令        | 黑客帝国字节流效果模拟，可以假装自己是一个黑客               | $ sudo apt-get install cmatrix<br/>$ cmatrix                 |\n| sl                                      | Linux命令        | 火车动画，没什么用                                           | $ sudo apt-get install sl<br/>$ sl                           |\n| thefuck                                 | Linux命令        | 敲错命令的时候可以大喊一声fuck，详细操作请自行百度:-)        | $ sudo apt update<br/>$ sudo apt install python3-dev python3-pip<br/>$ sudo pip3 install thefuck<br/>$ vim ~/.bashrc<br/>$ eval \"$(thefuck --alias fuck)\"<br/>$ source ~/.bashrc |\n| Mindustry                               | 游戏             | 建造资源运输线，建造防御塔，抵御敌人入侵的塔防游戏。steam有售 | https://anuke.itch.io/mindustry                              |\n| Kraftwerk                               | 乐队             | 60年代末的德国前卫摇滚、实验电子                             | http://www.kraftwerk.com/                                    |\n| Nazo_Game                               | 游戏             | 运用电脑知识、语言学、梗等等的解谜游戏                       | http://nazo.one-story.cn/                                    |\n| EYEZMAZE                                | 个人游戏网站     | 很有趣的游戏网站，站长是一位日本的游戏开发者，Grow系列游戏的制作人 | http://www.eyezmaze.com/                                     |\n| http://ikyo.ys168.com/                  | 怀旧游戏         | 里面包含了FC游戏大全，Famitracker汉化之类的东西              | http://ikyo.ys168.com/                                       |\n| donjon                                  | 随机地图生成器   | RPG游戏制作必备！随机世界地图生成器                          | http://donjon.bin.sh/                                        |\n| TinyPNG                                 | 压图工具         | TinyPNG使用智能有损压缩技术将您的PNG文件的**文件大小降低**。 通过选择性的减少图片中的颜色，只需要很少的字节数就能保存数据。 对视觉的影响几乎不可见，但是在文件大小上有非常大的差别 | https://tinify.cn/                                           |\n| DeepL Translate                         | 深度学习翻译软件 | 一家德国科技公司开发的翻译软件。号称强过谷歌翻译，机器翻译在盲测中秒杀同行业产品 | https://www.deepl.com/translator                             |\n\n","slug":"Recommendations","published":1,"updated":"2021-10-02T08:26:47.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4g000hjowzgb4n6t8p","content":"<blockquote>\n<p>封面图：秦皇岛阿那亚艺术中心内部，个人摄影作品</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>标签</th>\n<th>描述</th>\n<th>地址/命令行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Everything</td>\n<td>搜索</td>\n<td>一个比Windows自带的搜索工具要快n倍的搜索工具</td>\n<td><a href=\"http://www.voidtools.com/\">http://www.voidtools.com/</a></td>\n</tr>\n<tr>\n<td>Uninstall Tool</td>\n<td>卸载</td>\n<td>一个比Windows自带的卸载工具要快n倍的卸载工具</td>\n<td><a href=\"https://www.crystalidea.com/uninstall-tool\">https://www.crystalidea.com/uninstall-tool</a></td>\n</tr>\n<tr>\n<td>Notepad++</td>\n<td>文本编辑器</td>\n<td>一个比Windows自带的文本编辑器要好用n倍的文本编辑器</td>\n<td><a href=\"https://notepad-plus-plus.org/\">https://notepad-plus-plus.org/</a></td>\n</tr>\n<tr>\n<td>TicKeys</td>\n<td>玩具</td>\n<td>模拟机械键盘按键音的程序，打字的时候很爽:-)</td>\n<td><a href=\"http://www.yingdev.com/projects/tickeys\">http://www.yingdev.com/projects/tickeys</a></td>\n</tr>\n<tr>\n<td>PowerMode插件</td>\n<td>编程、玩具</td>\n<td>敲代码的时候屏幕会跳动，配合TicKeys食用效果更佳:-)</td>\n<td><a href=\"https://github.com/codeinthedark/awesome-power-mode\">https://github.com/codeinthedark/awesome-power-mode</a></td>\n</tr>\n<tr>\n<td>EV录屏</td>\n<td>视频录制</td>\n<td>免费的录屏工具，没有水印</td>\n<td><a href=\"https://www.ieway.cn/evcapture.html\">https://www.ieway.cn/evcapture.html</a></td>\n</tr>\n<tr>\n<td>LICEcap</td>\n<td>视频录制</td>\n<td>开源的、简单易用的Gif录屏工具，配合ps后期编辑效果更佳</td>\n<td><a href=\"https://www.cockos.com/licecap/\">https://www.cockos.com/licecap/</a></td>\n</tr>\n<tr>\n<td>Umlet</td>\n<td>编程</td>\n<td>免费的、很好用的UML类图编辑工具，学编程设计模式的朋友可以用一下</td>\n<td><a href=\"https://www.umlet.com/\">https://www.umlet.com/</a></td>\n</tr>\n<tr>\n<td>MagicaVoxel</td>\n<td>绘画</td>\n<td>立体像素画绘图工具，像在玩mc的感觉（晕3D的朋友慎用…），可惜绘图区域有限</td>\n<td><a href=\"https://ephtracy.github.io/\">https://ephtracy.github.io/</a></td>\n</tr>\n<tr>\n<td>0CC-FamiTracker</td>\n<td>音乐</td>\n<td>芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐</td>\n<td><a href=\"http://hertzdevil.info/programs/\">http://hertzdevil.info/programs/</a></td>\n</tr>\n<tr>\n<td>FamiStudio</td>\n<td>音乐</td>\n<td>芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐。编辑界面相比FamiTracker更加现代化</td>\n<td><a href=\"https://famistudio.org/\">https://famistudio.org/</a></td>\n</tr>\n<tr>\n<td>SpaceSniffer</td>\n<td>磁盘整理</td>\n<td>一个能扫描磁盘，以帮助整理删除磁盘文件的工具，扫描过程很帅，C盘快满的朋友可以用一下</td>\n<td><a href=\"http://www.uderzo.it/main_products/space_sniffer/\">http://www.uderzo.it/main_products/space_sniffer/</a></td>\n</tr>\n<tr>\n<td>AutoHotKey</td>\n<td>脚本语言</td>\n<td>简写AHK，直译就是“自动热键”。本质上是一个脚本语言，有一套自己的语法，可以快速写出一些有用的脚本程序</td>\n<td><a href=\"https://www.autohotkey.com/\">https://www.autohotkey.com/</a></td>\n</tr>\n<tr>\n<td>Capslock+</td>\n<td>效率工具</td>\n<td>一个加强Capslock键（大写锁键）的功能，以提高效率的工具。因为是用AHK写的，所以要先下载AHK才行</td>\n<td><a href=\"https://cjkis.me/capslock+/\">https://cjkis.me/capslock+/</a></td>\n</tr>\n<tr>\n<td>Golly</td>\n<td>数学</td>\n<td>称为“生命游戏”的数学游戏（可搜索“生命游戏”了解一下），挺有趣的:-)</td>\n<td><a href=\"http://golly.sourceforge.net/\">http://golly.sourceforge.net/</a></td>\n</tr>\n<tr>\n<td>TranslucentTB</td>\n<td>美化</td>\n<td>可以让工具栏变成透明效果、模糊效果</td>\n<td><a href=\"https://github.com/TranslucentTB/TranslucentTB\">https://github.com/TranslucentTB/TranslucentTB</a></td>\n</tr>\n<tr>\n<td>XMPlay</td>\n<td>音乐</td>\n<td>一个支持很多格式的音乐播放器，程序界面看上去挺好看的</td>\n<td><a href=\"http://www.xmplay.com/\">http://www.xmplay.com/</a></td>\n</tr>\n<tr>\n<td>ZType</td>\n<td>游戏</td>\n<td>一个很不错的打字游戏，<a href=\"http://xn--fqru53bn7os2drl.xn--pe-0v2cm46g.com\">网站后缀是.pe不是.com</a></td>\n<td><a href=\"https://zty.pe/\">https://zty.pe/</a></td>\n</tr>\n<tr>\n<td>Insert No Coins</td>\n<td>极客动画</td>\n<td>不到64kb的3D动画！</td>\n<td><a href=\"https://github.com/razordemo/Insert-No-Coins\">https://github.com/razordemo/Insert-No-Coins</a><br/><a href=\"https://www.pouet.net/prod.php?which=55991\">https://www.pouet.net/prod.php?which=55991</a></td>\n</tr>\n<tr>\n<td>SuperFlight</td>\n<td>游戏</td>\n<td>直译就是“超级飞行”，飞行越贴近地面分数就越高的游戏</td>\n<td><a href=\"https://superflightgame.com/\">https://superflightgame.com/</a></td>\n</tr>\n<tr>\n<td>One Piece - Grand Battle Swan Colloseum</td>\n<td>怀旧掌机游戏</td>\n<td>WSC掌机上的海贼王格斗游戏，需要下载一个WSC模拟器才能玩</td>\n<td><a href=\"https://emulator.games/roms/wonderswan/one-piece-grand-battle-swan-colloseum/\">https://emulator.games/roms/wonderswan/one-piece-grand-battle-swan-colloseum/</a></td>\n</tr>\n<tr>\n<td>cmatrix</td>\n<td>Linux命令</td>\n<td>黑客帝国字节流效果模拟，可以假装自己是一个黑客</td>\n<td>$ sudo apt-get install cmatrix<br/>$ cmatrix</td>\n</tr>\n<tr>\n<td>sl</td>\n<td>Linux命令</td>\n<td>火车动画，没什么用</td>\n<td>$ sudo apt-get install sl<br/>$ sl</td>\n</tr>\n<tr>\n<td>thefuck</td>\n<td>Linux命令</td>\n<td>敲错命令的时候可以大喊一声fuck，详细操作请自行百度:-)</td>\n<td>$ sudo apt update<br/>$ sudo apt install python3-dev python3-pip<br/>$ sudo pip3 install thefuck<br/>$ vim ~/.bashrc<br/>$ eval &quot;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mi>h</mi><mi>e</mi><mi>f</mi><mi>u</mi><mi>c</mi><mi>k</mi><mo>−</mo><mo>−</mo><mi>a</mi><mi>l</mi><mi>i</mi><mi>a</mi><mi>s</mi><mi>f</mi><mi>u</mi><mi>c</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">&quot;</mi><mo>&lt;</mo><mi>b</mi><mi>r</mi><mi mathvariant=\"normal\">/</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">(thefuck --alias fuck)&quot;&lt;br/&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord\">&quot;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span> source ~/.bashrc</td>\n</tr>\n<tr>\n<td>Mindustry</td>\n<td>游戏</td>\n<td>建造资源运输线，建造防御塔，抵御敌人入侵的塔防游戏。steam有售</td>\n<td><a href=\"https://anuke.itch.io/mindustry\">https://anuke.itch.io/mindustry</a></td>\n</tr>\n<tr>\n<td>Kraftwerk</td>\n<td>乐队</td>\n<td>60年代末的德国前卫摇滚、实验电子</td>\n<td><a href=\"http://www.kraftwerk.com/\">http://www.kraftwerk.com/</a></td>\n</tr>\n<tr>\n<td>Nazo_Game</td>\n<td>游戏</td>\n<td>运用电脑知识、语言学、梗等等的解谜游戏</td>\n<td><a href=\"http://nazo.one-story.cn/\">http://nazo.one-story.cn/</a></td>\n</tr>\n<tr>\n<td>EYEZMAZE</td>\n<td>个人游戏网站</td>\n<td>很有趣的游戏网站，站长是一位日本的游戏开发者，Grow系列游戏的制作人</td>\n<td><a href=\"http://www.eyezmaze.com/\">http://www.eyezmaze.com/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ikyo.ys168.com/\">http://ikyo.ys168.com/</a></td>\n<td>怀旧游戏</td>\n<td>里面包含了FC游戏大全，Famitracker汉化之类的东西</td>\n<td><a href=\"http://ikyo.ys168.com/\">http://ikyo.ys168.com/</a></td>\n</tr>\n<tr>\n<td>donjon</td>\n<td>随机地图生成器</td>\n<td>RPG游戏制作必备！随机世界地图生成器</td>\n<td><a href=\"http://donjon.bin.sh/\">http://donjon.bin.sh/</a></td>\n</tr>\n<tr>\n<td>TinyPNG</td>\n<td>压图工具</td>\n<td>TinyPNG使用智能有损压缩技术将您的PNG文件的<strong>文件大小降低</strong>。 通过选择性的减少图片中的颜色，只需要很少的字节数就能保存数据。 对视觉的影响几乎不可见，但是在文件大小上有非常大的差别</td>\n<td><a href=\"https://tinify.cn/\">https://tinify.cn/</a></td>\n</tr>\n<tr>\n<td>DeepL Translate</td>\n<td>深度学习翻译软件</td>\n<td>一家德国科技公司开发的翻译软件。号称强过谷歌翻译，机器翻译在盲测中秒杀同行业产品</td>\n<td><a href=\"https://www.deepl.com/translator\">https://www.deepl.com/translator</a></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>封面图：秦皇岛阿那亚艺术中心内部，个人摄影作品</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>标签</th>\n<th>描述</th>\n<th>地址/命令行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Everything</td>\n<td>搜索</td>\n<td>一个比Windows自带的搜索工具要快n倍的搜索工具</td>\n<td><a href=\"http://www.voidtools.com/\">http://www.voidtools.com/</a></td>\n</tr>\n<tr>\n<td>Uninstall Tool</td>\n<td>卸载</td>\n<td>一个比Windows自带的卸载工具要快n倍的卸载工具</td>\n<td><a href=\"https://www.crystalidea.com/uninstall-tool\">https://www.crystalidea.com/uninstall-tool</a></td>\n</tr>\n<tr>\n<td>Notepad++</td>\n<td>文本编辑器</td>\n<td>一个比Windows自带的文本编辑器要好用n倍的文本编辑器</td>\n<td><a href=\"https://notepad-plus-plus.org/\">https://notepad-plus-plus.org/</a></td>\n</tr>\n<tr>\n<td>TicKeys</td>\n<td>玩具</td>\n<td>模拟机械键盘按键音的程序，打字的时候很爽:-)</td>\n<td><a href=\"http://www.yingdev.com/projects/tickeys\">http://www.yingdev.com/projects/tickeys</a></td>\n</tr>\n<tr>\n<td>PowerMode插件</td>\n<td>编程、玩具</td>\n<td>敲代码的时候屏幕会跳动，配合TicKeys食用效果更佳:-)</td>\n<td><a href=\"https://github.com/codeinthedark/awesome-power-mode\">https://github.com/codeinthedark/awesome-power-mode</a></td>\n</tr>\n<tr>\n<td>EV录屏</td>\n<td>视频录制</td>\n<td>免费的录屏工具，没有水印</td>\n<td><a href=\"https://www.ieway.cn/evcapture.html\">https://www.ieway.cn/evcapture.html</a></td>\n</tr>\n<tr>\n<td>LICEcap</td>\n<td>视频录制</td>\n<td>开源的、简单易用的Gif录屏工具，配合ps后期编辑效果更佳</td>\n<td><a href=\"https://www.cockos.com/licecap/\">https://www.cockos.com/licecap/</a></td>\n</tr>\n<tr>\n<td>Umlet</td>\n<td>编程</td>\n<td>免费的、很好用的UML类图编辑工具，学编程设计模式的朋友可以用一下</td>\n<td><a href=\"https://www.umlet.com/\">https://www.umlet.com/</a></td>\n</tr>\n<tr>\n<td>MagicaVoxel</td>\n<td>绘画</td>\n<td>立体像素画绘图工具，像在玩mc的感觉（晕3D的朋友慎用…），可惜绘图区域有限</td>\n<td><a href=\"https://ephtracy.github.io/\">https://ephtracy.github.io/</a></td>\n</tr>\n<tr>\n<td>0CC-FamiTracker</td>\n<td>音乐</td>\n<td>芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐</td>\n<td><a href=\"http://hertzdevil.info/programs/\">http://hertzdevil.info/programs/</a></td>\n</tr>\n<tr>\n<td>FamiStudio</td>\n<td>音乐</td>\n<td>芯片音乐（chiptune）编辑器，可以用它做出像超级玛丽那样的背景音乐。编辑界面相比FamiTracker更加现代化</td>\n<td><a href=\"https://famistudio.org/\">https://famistudio.org/</a></td>\n</tr>\n<tr>\n<td>SpaceSniffer</td>\n<td>磁盘整理</td>\n<td>一个能扫描磁盘，以帮助整理删除磁盘文件的工具，扫描过程很帅，C盘快满的朋友可以用一下</td>\n<td><a href=\"http://www.uderzo.it/main_products/space_sniffer/\">http://www.uderzo.it/main_products/space_sniffer/</a></td>\n</tr>\n<tr>\n<td>AutoHotKey</td>\n<td>脚本语言</td>\n<td>简写AHK，直译就是“自动热键”。本质上是一个脚本语言，有一套自己的语法，可以快速写出一些有用的脚本程序</td>\n<td><a href=\"https://www.autohotkey.com/\">https://www.autohotkey.com/</a></td>\n</tr>\n<tr>\n<td>Capslock+</td>\n<td>效率工具</td>\n<td>一个加强Capslock键（大写锁键）的功能，以提高效率的工具。因为是用AHK写的，所以要先下载AHK才行</td>\n<td><a href=\"https://cjkis.me/capslock+/\">https://cjkis.me/capslock+/</a></td>\n</tr>\n<tr>\n<td>Golly</td>\n<td>数学</td>\n<td>称为“生命游戏”的数学游戏（可搜索“生命游戏”了解一下），挺有趣的:-)</td>\n<td><a href=\"http://golly.sourceforge.net/\">http://golly.sourceforge.net/</a></td>\n</tr>\n<tr>\n<td>TranslucentTB</td>\n<td>美化</td>\n<td>可以让工具栏变成透明效果、模糊效果</td>\n<td><a href=\"https://github.com/TranslucentTB/TranslucentTB\">https://github.com/TranslucentTB/TranslucentTB</a></td>\n</tr>\n<tr>\n<td>XMPlay</td>\n<td>音乐</td>\n<td>一个支持很多格式的音乐播放器，程序界面看上去挺好看的</td>\n<td><a href=\"http://www.xmplay.com/\">http://www.xmplay.com/</a></td>\n</tr>\n<tr>\n<td>ZType</td>\n<td>游戏</td>\n<td>一个很不错的打字游戏，<a href=\"http://xn--fqru53bn7os2drl.xn--pe-0v2cm46g.com\">网站后缀是.pe不是.com</a></td>\n<td><a href=\"https://zty.pe/\">https://zty.pe/</a></td>\n</tr>\n<tr>\n<td>Insert No Coins</td>\n<td>极客动画</td>\n<td>不到64kb的3D动画！</td>\n<td><a href=\"https://github.com/razordemo/Insert-No-Coins\">https://github.com/razordemo/Insert-No-Coins</a><br/><a href=\"https://www.pouet.net/prod.php?which=55991\">https://www.pouet.net/prod.php?which=55991</a></td>\n</tr>\n<tr>\n<td>SuperFlight</td>\n<td>游戏</td>\n<td>直译就是“超级飞行”，飞行越贴近地面分数就越高的游戏</td>\n<td><a href=\"https://superflightgame.com/\">https://superflightgame.com/</a></td>\n</tr>\n<tr>\n<td>One Piece - Grand Battle Swan Colloseum</td>\n<td>怀旧掌机游戏</td>\n<td>WSC掌机上的海贼王格斗游戏，需要下载一个WSC模拟器才能玩</td>\n<td><a href=\"https://emulator.games/roms/wonderswan/one-piece-grand-battle-swan-colloseum/\">https://emulator.games/roms/wonderswan/one-piece-grand-battle-swan-colloseum/</a></td>\n</tr>\n<tr>\n<td>cmatrix</td>\n<td>Linux命令</td>\n<td>黑客帝国字节流效果模拟，可以假装自己是一个黑客</td>\n<td>$ sudo apt-get install cmatrix<br/>$ cmatrix</td>\n</tr>\n<tr>\n<td>sl</td>\n<td>Linux命令</td>\n<td>火车动画，没什么用</td>\n<td>$ sudo apt-get install sl<br/>$ sl</td>\n</tr>\n<tr>\n<td>thefuck</td>\n<td>Linux命令</td>\n<td>敲错命令的时候可以大喊一声fuck，详细操作请自行百度:-)</td>\n<td>$ sudo apt update<br/>$ sudo apt install python3-dev python3-pip<br/>$ sudo pip3 install thefuck<br/>$ vim ~/.bashrc<br/>$ eval &quot;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mi>h</mi><mi>e</mi><mi>f</mi><mi>u</mi><mi>c</mi><mi>k</mi><mo>−</mo><mo>−</mo><mi>a</mi><mi>l</mi><mi>i</mi><mi>a</mi><mi>s</mi><mi>f</mi><mi>u</mi><mi>c</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">&quot;</mi><mo>&lt;</mo><mi>b</mi><mi>r</mi><mi mathvariant=\"normal\">/</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">(thefuck --alias fuck)&quot;&lt;br/&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord\">&quot;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span> source ~/.bashrc</td>\n</tr>\n<tr>\n<td>Mindustry</td>\n<td>游戏</td>\n<td>建造资源运输线，建造防御塔，抵御敌人入侵的塔防游戏。steam有售</td>\n<td><a href=\"https://anuke.itch.io/mindustry\">https://anuke.itch.io/mindustry</a></td>\n</tr>\n<tr>\n<td>Kraftwerk</td>\n<td>乐队</td>\n<td>60年代末的德国前卫摇滚、实验电子</td>\n<td><a href=\"http://www.kraftwerk.com/\">http://www.kraftwerk.com/</a></td>\n</tr>\n<tr>\n<td>Nazo_Game</td>\n<td>游戏</td>\n<td>运用电脑知识、语言学、梗等等的解谜游戏</td>\n<td><a href=\"http://nazo.one-story.cn/\">http://nazo.one-story.cn/</a></td>\n</tr>\n<tr>\n<td>EYEZMAZE</td>\n<td>个人游戏网站</td>\n<td>很有趣的游戏网站，站长是一位日本的游戏开发者，Grow系列游戏的制作人</td>\n<td><a href=\"http://www.eyezmaze.com/\">http://www.eyezmaze.com/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ikyo.ys168.com/\">http://ikyo.ys168.com/</a></td>\n<td>怀旧游戏</td>\n<td>里面包含了FC游戏大全，Famitracker汉化之类的东西</td>\n<td><a href=\"http://ikyo.ys168.com/\">http://ikyo.ys168.com/</a></td>\n</tr>\n<tr>\n<td>donjon</td>\n<td>随机地图生成器</td>\n<td>RPG游戏制作必备！随机世界地图生成器</td>\n<td><a href=\"http://donjon.bin.sh/\">http://donjon.bin.sh/</a></td>\n</tr>\n<tr>\n<td>TinyPNG</td>\n<td>压图工具</td>\n<td>TinyPNG使用智能有损压缩技术将您的PNG文件的<strong>文件大小降低</strong>。 通过选择性的减少图片中的颜色，只需要很少的字节数就能保存数据。 对视觉的影响几乎不可见，但是在文件大小上有非常大的差别</td>\n<td><a href=\"https://tinify.cn/\">https://tinify.cn/</a></td>\n</tr>\n<tr>\n<td>DeepL Translate</td>\n<td>深度学习翻译软件</td>\n<td>一家德国科技公司开发的翻译软件。号称强过谷歌翻译，机器翻译在盲测中秒杀同行业产品</td>\n<td><a href=\"https://www.deepl.com/translator\">https://www.deepl.com/translator</a></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"用C语言实现模板类的一些个人思路","date":"2021-10-06T03:00:00.000Z","toc":true,"banner_img":"/img/C.jpg","banner_img_set":"/img/C.jpg","_content":"\n## 0. FAQ\n\n- **Q: 为什么要用模板？**\n- A: 为了解决函数重载问题。例如，在C++中，我们要比较两个int型变量的哪个大，并返回其中较大的值，可能会写这样的函数：\n\n```cpp\nint Max(int a, int b) { return a > b ? a : b; }\nint main() {\n    printf(\"%d\\n\", Max(123, 456));\n    return 0;\n}\n```\n\n但是，如果我们还要比较更多的类型，例如char型，double型之类的，我们都需要重新写一个类似的实现，这很不方便：\n\n```cpp\nchar Max(char a, char b) { return a > b ? a : b; }\ndouble Max(double a, double b) { return a > b ? a : b; }\nint main() {\n    printf(\"%c, %lf\\n\", Max('a', 'z'), Max(1.1, 2.2));\n    return 0;\n}\n```\n\n这个时候我们可以考虑使用模板来简化代码：\n\n```cpp\ntemplate <typename T>\nT Max(T a, T b) { return a > b ? a : b; }\nint main() {\n    printf(\"%d, %c, %lf\\n\", Max(123, 456), Max('a', 'z'), Max(1.1, 2.2)); \n    return 0;\n}\n```\n\n- **Q: C能重载？**\n- A: 不能，C只能像这样子：\n\n```c\nint Max_int(int a, int b) { return a > b ? a : b; }\nchar Max_char(char a, char b) { return a > b ? a : b; }\ndouble Max_double(double a, double b) { return a > b ? a : b; }\nint main() {\n    printf(\"%d, %c, %lf\\n\", Max_int(123, 456), Max_char('a', 'z'), Max_double(1.1, 2.2));\n    return 0;\n}\n```\n\n- **Q: 道理我都懂，有C++了，为什么还要用C实现模板？**\n- A: 虽然一般情况下都能直接写C++来代替C程序啦，不过确实存在无法使用C++的场合。很不幸，我（曾经的）工作所用的语言只能是C，于是，之前用惯了C++的我决定探索一下如何用C实现模板- -+\n- **Q: 这篇文章我好像在哪里见过？**\n- A: 这篇文章原本是上传到了CSDN上，现在拿来放到自己的个人网站。\n\n## 1. 目前个人写法风格\n\n### 1.0 模板函数\n\n首先，用前面的Max函数为例，先看一下我目前的写法风格吧:-P\n\n**需要注意的是：为防止宏嵌套出错，例如`_Max(Pair(int, char))`会被拓展成`Max$_Pair(int, char)_$`这样的不合法变量名（Pair的定义见1.1模板类示例），我们都需要多写一个类似于`#define Max(T) _Max(T)`这样的操作**\n\n```c\n#define _Max(T) Max$_##T##_$\n#define Max(T) _Max(T)\n\n#define _Max_IMPL(T) T Max(T)(T a, T b) { return a > b ? a : b; }\n#define Max_IMPL(T) _Max_IMPL(T)\n\nMax_IMPL(int);\nMax_IMPL(char);\nMax_IMPL(double);\n\nint main() {\n    printf(\"%d, %c, %lf\\n\", Max(int)(123, 456), Max(char)('a', 'z'), Max(double)(1.1, 2.2));\n    return 0;\n}\n```\n\n下面解释一下上面的代码到底做了什么：\n\n- **用宏来模仿C++的写法 —— `#define _Max(T) Max$_##T##_$`**\n  这里用了`Max(T)`宏来模仿C++的`Max<T>`写法。\n\n  例如：`Max(int)`，宏拓展后实际上等于`Max$_int_$`（`$`符号确实是合法变量名），这里用`$_`表示C++中模板的尖括号左侧`<`，用`_$`表示尖括号右侧`>`\n\n- **模板实现 —— `#define _Max_IMPL(T) T Max(T a, T b) { return a > b ? a : b; }`**\n  相当于C++的`template <typename T> T Max(T a, T b) { return a > b ? a : b; }`\n\n- **实例化模板 —— `Max_IMPL(int);`**\n  由于C不是C++，所以需要使用者自己去实例化对应的模板类型，此处宏拓展出来的代码为`int Max(int)(int a, int b) { return a > b ? a : b; }`，然后`Max(int)`再拓展为`Max$_int_$`，于是最终结果为：\n  **`int Max$_int_$(int a, int b) { return a > b ? a : b; }`**\n\n- **使用 —— `Max(int)(123, 456)`**\n  相当于C++的`Max<int>(123, 456)`\n\n像这样，我们就实现了一个`T Max<T>(T, T)`模板函数了！在此基础上，我们可以更进一步：如果能做一个**检测代码**中Max使用了哪些**模板类型**，然后在**编译前**自动添加实现Max_IMPL(…)完成“实例化”的程序，就可以完成类似于C++的模板类型推断功能了- -+\n\n### 1.1 模板类\n\n模板类同理，我们以简单的Pair为例（保存两个类型数据的结构）\n\n```c\n#define _Pair(T1, T2) Pair$_##T1##_$$_##T2##_$\n#define Pair(T1, T2) _Pair(T1, T2)\n\n#define _Pair_IMPL(T1, T2) typedef struct { T1 t1; T2 t2; } Pair(T1, T2)\n#define Pair_IMPL(T1, T2) _Pair_DEF(T1, T2)\n\nPair_IMPL(int, char);\nPair_IMPL(int, double);\n\nint main() {\n    Pair(int, char) p_ic;\n    Pair(int, double) p_id;\n    p_ic.t1 = 123;\n    p_ic.t2 = 'a';\n    p_id.t1 = 456;\n    p_id.t2 = 1.1;\n    return 0;\n}\n```\n\n- **`#define _Pair(T1, T2) Pair$_##T1##_$$_##T2##_$`**\n  用`Pair(T1, T2)`模仿C++中`Pair<T1, T2>`的写法\n- **`#define _Pair_IMPL(T1, T2) typedef struct Pair(T1, T2) { T1 t1; T2 t2; } Pair(T1, T2)`**\n  相当于`template<typename T1, typename T2> struct Pair{ T1 t1; T2 t2; }`\n- **`Pair_IMPL(int, char);`**\n  实例化`Pair<int, char>`，此处宏拓展的最终结果为：\n  `typedef struct { int t1; char t2; } Pair$_int_$$_char_$`\n- **`Pair(int, char) p_ic;`**\n  相当于`Pair<int, char> p_ic;`\n\n像这样，我们就完成了简单的`Pair<T1, T2>`模板类了\n\n---\n\n参考资料：C语言宏高级用法 https://www.cnblogs.com/alantu2018/p/8465911.html","source":"_posts/C-Template.md","raw":"---\ntitle: 用C语言实现模板类的一些个人思路\ndate: 2021-10-6 11:00:00\ntoc: true\ntags:\n- C\ncategories:\n- C\nbanner_img: /img/C.jpg\nbanner_img_set: /img/C.jpg\n---\n\n## 0. FAQ\n\n- **Q: 为什么要用模板？**\n- A: 为了解决函数重载问题。例如，在C++中，我们要比较两个int型变量的哪个大，并返回其中较大的值，可能会写这样的函数：\n\n```cpp\nint Max(int a, int b) { return a > b ? a : b; }\nint main() {\n    printf(\"%d\\n\", Max(123, 456));\n    return 0;\n}\n```\n\n但是，如果我们还要比较更多的类型，例如char型，double型之类的，我们都需要重新写一个类似的实现，这很不方便：\n\n```cpp\nchar Max(char a, char b) { return a > b ? a : b; }\ndouble Max(double a, double b) { return a > b ? a : b; }\nint main() {\n    printf(\"%c, %lf\\n\", Max('a', 'z'), Max(1.1, 2.2));\n    return 0;\n}\n```\n\n这个时候我们可以考虑使用模板来简化代码：\n\n```cpp\ntemplate <typename T>\nT Max(T a, T b) { return a > b ? a : b; }\nint main() {\n    printf(\"%d, %c, %lf\\n\", Max(123, 456), Max('a', 'z'), Max(1.1, 2.2)); \n    return 0;\n}\n```\n\n- **Q: C能重载？**\n- A: 不能，C只能像这样子：\n\n```c\nint Max_int(int a, int b) { return a > b ? a : b; }\nchar Max_char(char a, char b) { return a > b ? a : b; }\ndouble Max_double(double a, double b) { return a > b ? a : b; }\nint main() {\n    printf(\"%d, %c, %lf\\n\", Max_int(123, 456), Max_char('a', 'z'), Max_double(1.1, 2.2));\n    return 0;\n}\n```\n\n- **Q: 道理我都懂，有C++了，为什么还要用C实现模板？**\n- A: 虽然一般情况下都能直接写C++来代替C程序啦，不过确实存在无法使用C++的场合。很不幸，我（曾经的）工作所用的语言只能是C，于是，之前用惯了C++的我决定探索一下如何用C实现模板- -+\n- **Q: 这篇文章我好像在哪里见过？**\n- A: 这篇文章原本是上传到了CSDN上，现在拿来放到自己的个人网站。\n\n## 1. 目前个人写法风格\n\n### 1.0 模板函数\n\n首先，用前面的Max函数为例，先看一下我目前的写法风格吧:-P\n\n**需要注意的是：为防止宏嵌套出错，例如`_Max(Pair(int, char))`会被拓展成`Max$_Pair(int, char)_$`这样的不合法变量名（Pair的定义见1.1模板类示例），我们都需要多写一个类似于`#define Max(T) _Max(T)`这样的操作**\n\n```c\n#define _Max(T) Max$_##T##_$\n#define Max(T) _Max(T)\n\n#define _Max_IMPL(T) T Max(T)(T a, T b) { return a > b ? a : b; }\n#define Max_IMPL(T) _Max_IMPL(T)\n\nMax_IMPL(int);\nMax_IMPL(char);\nMax_IMPL(double);\n\nint main() {\n    printf(\"%d, %c, %lf\\n\", Max(int)(123, 456), Max(char)('a', 'z'), Max(double)(1.1, 2.2));\n    return 0;\n}\n```\n\n下面解释一下上面的代码到底做了什么：\n\n- **用宏来模仿C++的写法 —— `#define _Max(T) Max$_##T##_$`**\n  这里用了`Max(T)`宏来模仿C++的`Max<T>`写法。\n\n  例如：`Max(int)`，宏拓展后实际上等于`Max$_int_$`（`$`符号确实是合法变量名），这里用`$_`表示C++中模板的尖括号左侧`<`，用`_$`表示尖括号右侧`>`\n\n- **模板实现 —— `#define _Max_IMPL(T) T Max(T a, T b) { return a > b ? a : b; }`**\n  相当于C++的`template <typename T> T Max(T a, T b) { return a > b ? a : b; }`\n\n- **实例化模板 —— `Max_IMPL(int);`**\n  由于C不是C++，所以需要使用者自己去实例化对应的模板类型，此处宏拓展出来的代码为`int Max(int)(int a, int b) { return a > b ? a : b; }`，然后`Max(int)`再拓展为`Max$_int_$`，于是最终结果为：\n  **`int Max$_int_$(int a, int b) { return a > b ? a : b; }`**\n\n- **使用 —— `Max(int)(123, 456)`**\n  相当于C++的`Max<int>(123, 456)`\n\n像这样，我们就实现了一个`T Max<T>(T, T)`模板函数了！在此基础上，我们可以更进一步：如果能做一个**检测代码**中Max使用了哪些**模板类型**，然后在**编译前**自动添加实现Max_IMPL(…)完成“实例化”的程序，就可以完成类似于C++的模板类型推断功能了- -+\n\n### 1.1 模板类\n\n模板类同理，我们以简单的Pair为例（保存两个类型数据的结构）\n\n```c\n#define _Pair(T1, T2) Pair$_##T1##_$$_##T2##_$\n#define Pair(T1, T2) _Pair(T1, T2)\n\n#define _Pair_IMPL(T1, T2) typedef struct { T1 t1; T2 t2; } Pair(T1, T2)\n#define Pair_IMPL(T1, T2) _Pair_DEF(T1, T2)\n\nPair_IMPL(int, char);\nPair_IMPL(int, double);\n\nint main() {\n    Pair(int, char) p_ic;\n    Pair(int, double) p_id;\n    p_ic.t1 = 123;\n    p_ic.t2 = 'a';\n    p_id.t1 = 456;\n    p_id.t2 = 1.1;\n    return 0;\n}\n```\n\n- **`#define _Pair(T1, T2) Pair$_##T1##_$$_##T2##_$`**\n  用`Pair(T1, T2)`模仿C++中`Pair<T1, T2>`的写法\n- **`#define _Pair_IMPL(T1, T2) typedef struct Pair(T1, T2) { T1 t1; T2 t2; } Pair(T1, T2)`**\n  相当于`template<typename T1, typename T2> struct Pair{ T1 t1; T2 t2; }`\n- **`Pair_IMPL(int, char);`**\n  实例化`Pair<int, char>`，此处宏拓展的最终结果为：\n  `typedef struct { int t1; char t2; } Pair$_int_$$_char_$`\n- **`Pair(int, char) p_ic;`**\n  相当于`Pair<int, char> p_ic;`\n\n像这样，我们就完成了简单的`Pair<T1, T2>`模板类了\n\n---\n\n参考资料：C语言宏高级用法 https://www.cnblogs.com/alantu2018/p/8465911.html","slug":"C-Template","published":1,"updated":"2021-10-06T03:18:20.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4i000ijowzewsk7viy","content":"<h2 id=\"0-faq\"><a class=\"markdownIt-Anchor\" href=\"#0-faq\"></a> 0. FAQ</h2>\n<ul>\n<li><strong>Q: 为什么要用模板？</strong></li>\n<li>A: 为了解决函数重载问题。例如，在C++中，我们要比较两个int型变量的哪个大，并返回其中较大的值，可能会写这样的函数：</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但是，如果我们还要比较更多的类型，例如char型，double型之类的，我们都需要重新写一个类似的实现，这很不方便：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个时候我们可以考虑使用模板来简化代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\nT <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Q: C能重载？</strong></li>\n<li>A: 不能，C只能像这样子：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Max_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">Max_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">Max_double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max_char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max_double</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Q: 道理我都懂，有C++了，为什么还要用C实现模板？</strong></li>\n<li>A: 虽然一般情况下都能直接写C<ins>来代替C程序啦，不过确实存在无法使用C</ins>的场合。很不幸，我（曾经的）工作所用的语言只能是C，于是，之前用惯了C++的我决定探索一下如何用C实现模板- -+</li>\n<li><strong>Q: 这篇文章我好像在哪里见过？</strong></li>\n<li>A: 这篇文章原本是上传到了CSDN上，现在拿来放到自己的个人网站。</li>\n</ul>\n<h2 id=\"1-目前个人写法风格\"><a class=\"markdownIt-Anchor\" href=\"#1-目前个人写法风格\"></a> 1. 目前个人写法风格</h2>\n<h3 id=\"10-模板函数\"><a class=\"markdownIt-Anchor\" href=\"#10-模板函数\"></a> 1.0 模板函数</h3>\n<p>首先，用前面的Max函数为例，先看一下我目前的写法风格吧:-P</p>\n<p><strong>需要注意的是：为防止宏嵌套出错，例如<code>_Max(Pair(int, char))</code>会被拓展成<code>Max$_Pair(int, char)_$</code>这样的不合法变量名（Pair的定义见1.1模板类示例），我们都需要多写一个类似于<code>#define Max(T) _Max(T)</code>这样的操作</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Max</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> Max$_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">T</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_$</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Max</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">_Max</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Max_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> T <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Max_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">_Max_IMPL</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token function\">Max_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Max_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Max_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面解释一下上面的代码到底做了什么：</p>\n<ul>\n<li>\n<p><strong>用宏来模仿C++的写法 —— <code>#define _Max(T) Max$_##T##_$</code></strong><br />\n这里用了<code>Max(T)</code>宏来模仿C++的<code>Max&lt;T&gt;</code>写法。</p>\n<p>例如：<code>Max(int)</code>，宏拓展后实际上等于<code>Max$_int_$</code>（<code>$</code>符号确实是合法变量名），这里用<code>$_</code>表示C++中模板的尖括号左侧<code>&lt;</code>，用<code>_$</code>表示尖括号右侧<code>&gt;</code></p>\n</li>\n<li>\n<p><strong>模板实现 —— <code>#define _Max_IMPL(T) T Max(T a, T b) &#123; return a &gt; b ? a : b; &#125;</code></strong><br />\n相当于C++的<code>template &lt;typename T&gt; T Max(T a, T b) &#123; return a &gt; b ? a : b; &#125;</code></p>\n</li>\n<li>\n<p><strong>实例化模板 —— <code>Max_IMPL(int);</code></strong><br />\n由于C不是C++，所以需要使用者自己去实例化对应的模板类型，此处宏拓展出来的代码为<code>int Max(int)(int a, int b) &#123; return a &gt; b ? a : b; &#125;</code>，然后<code>Max(int)</code>再拓展为<code>Max$_int_$</code>，于是最终结果为：<br />\n<strong><code>int Max$_int_$(int a, int b) &#123; return a &gt; b ? a : b; &#125;</code></strong></p>\n</li>\n<li>\n<p><strong>使用 —— <code>Max(int)(123, 456)</code></strong><br />\n相当于C++的<code>Max&lt;int&gt;(123, 456)</code></p>\n</li>\n</ul>\n<p>像这样，我们就实现了一个<code>T Max&lt;T&gt;(T, T)</code>模板函数了！在此基础上，我们可以更进一步：如果能做一个<strong>检测代码</strong>中Max使用了哪些<strong>模板类型</strong>，然后在<strong>编译前</strong>自动添加实现Max_IMPL(…)完成“实例化”的程序，就可以完成类似于C++的模板类型推断功能了- -+</p>\n<h3 id=\"11-模板类\"><a class=\"markdownIt-Anchor\" href=\"#11-模板类\"></a> 1.1 模板类</h3>\n<p>模板类同理，我们以简单的Pair为例（保存两个类型数据的结构）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Pair</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> Pair$_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">T1</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_$$_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">T2</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_$</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Pair</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> <span class=\"token function\">_Pair</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Pair_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span> T1 t1<span class=\"token punctuation\">;</span> T2 t2<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Pair_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> <span class=\"token function\">_Pair_DEF</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token function\">Pair_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Pair_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> p_ic<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> p_id<span class=\"token punctuation\">;</span>\n    p_ic<span class=\"token punctuation\">.</span>t1 <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    p_ic<span class=\"token punctuation\">.</span>t2 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n    p_id<span class=\"token punctuation\">.</span>t1 <span class=\"token operator\">=</span> <span class=\"token number\">456</span><span class=\"token punctuation\">;</span>\n    p_id<span class=\"token punctuation\">.</span>t2 <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong><code>#define _Pair(T1, T2) Pair$_##T1##_$$_##T2##_$</code></strong><br />\n用<code>Pair(T1, T2)</code>模仿C++中<code>Pair&lt;T1, T2&gt;</code>的写法</li>\n<li><strong><code>#define _Pair_IMPL(T1, T2) typedef struct Pair(T1, T2) &#123; T1 t1; T2 t2; &#125; Pair(T1, T2)</code></strong><br />\n相当于<code>template&lt;typename T1, typename T2&gt; struct Pair&#123; T1 t1; T2 t2; &#125;</code></li>\n<li><strong><code>Pair_IMPL(int, char);</code></strong><br />\n实例化<code>Pair&lt;int, char&gt;</code>，此处宏拓展的最终结果为：<br />\n<code>typedef struct &#123; int t1; char t2; &#125; Pair$_int_$$_char_$</code></li>\n<li><strong><code>Pair(int, char) p_ic;</code></strong><br />\n相当于<code>Pair&lt;int, char&gt; p_ic;</code></li>\n</ul>\n<p>像这样，我们就完成了简单的<code>Pair&lt;T1, T2&gt;</code>模板类了</p>\n<hr />\n<p>参考资料：C语言宏高级用法 <a href=\"https://www.cnblogs.com/alantu2018/p/8465911.html\">https://www.cnblogs.com/alantu2018/p/8465911.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"0-faq\"><a class=\"markdownIt-Anchor\" href=\"#0-faq\"></a> 0. FAQ</h2>\n<ul>\n<li><strong>Q: 为什么要用模板？</strong></li>\n<li>A: 为了解决函数重载问题。例如，在C++中，我们要比较两个int型变量的哪个大，并返回其中较大的值，可能会写这样的函数：</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但是，如果我们还要比较更多的类型，例如char型，double型之类的，我们都需要重新写一个类似的实现，这很不方便：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个时候我们可以考虑使用模板来简化代码：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\nT <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Q: C能重载？</strong></li>\n<li>A: 不能，C只能像这样子：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Max_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">Max_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">Max_double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max_char</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max_double</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Q: 道理我都懂，有C++了，为什么还要用C实现模板？</strong></li>\n<li>A: 虽然一般情况下都能直接写C<ins>来代替C程序啦，不过确实存在无法使用C</ins>的场合。很不幸，我（曾经的）工作所用的语言只能是C，于是，之前用惯了C++的我决定探索一下如何用C实现模板- -+</li>\n<li><strong>Q: 这篇文章我好像在哪里见过？</strong></li>\n<li>A: 这篇文章原本是上传到了CSDN上，现在拿来放到自己的个人网站。</li>\n</ul>\n<h2 id=\"1-目前个人写法风格\"><a class=\"markdownIt-Anchor\" href=\"#1-目前个人写法风格\"></a> 1. 目前个人写法风格</h2>\n<h3 id=\"10-模板函数\"><a class=\"markdownIt-Anchor\" href=\"#10-模板函数\"></a> 1.0 模板函数</h3>\n<p>首先，用前面的Max函数为例，先看一下我目前的写法风格吧:-P</p>\n<p><strong>需要注意的是：为防止宏嵌套出错，例如<code>_Max(Pair(int, char))</code>会被拓展成<code>Max$_Pair(int, char)_$</code>这样的不合法变量名（Pair的定义见1.1模板类示例），我们都需要多写一个类似于<code>#define Max(T) _Max(T)</code>这样的操作</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Max</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> Max$_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">T</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_$</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Max</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">_Max</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Max_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> T <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Max_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">_Max_IMPL</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token function\">Max_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Max_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Max_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, %c, %lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面解释一下上面的代码到底做了什么：</p>\n<ul>\n<li>\n<p><strong>用宏来模仿C++的写法 —— <code>#define _Max(T) Max$_##T##_$</code></strong><br />\n这里用了<code>Max(T)</code>宏来模仿C++的<code>Max&lt;T&gt;</code>写法。</p>\n<p>例如：<code>Max(int)</code>，宏拓展后实际上等于<code>Max$_int_$</code>（<code>$</code>符号确实是合法变量名），这里用<code>$_</code>表示C++中模板的尖括号左侧<code>&lt;</code>，用<code>_$</code>表示尖括号右侧<code>&gt;</code></p>\n</li>\n<li>\n<p><strong>模板实现 —— <code>#define _Max_IMPL(T) T Max(T a, T b) &#123; return a &gt; b ? a : b; &#125;</code></strong><br />\n相当于C++的<code>template &lt;typename T&gt; T Max(T a, T b) &#123; return a &gt; b ? a : b; &#125;</code></p>\n</li>\n<li>\n<p><strong>实例化模板 —— <code>Max_IMPL(int);</code></strong><br />\n由于C不是C++，所以需要使用者自己去实例化对应的模板类型，此处宏拓展出来的代码为<code>int Max(int)(int a, int b) &#123; return a &gt; b ? a : b; &#125;</code>，然后<code>Max(int)</code>再拓展为<code>Max$_int_$</code>，于是最终结果为：<br />\n<strong><code>int Max$_int_$(int a, int b) &#123; return a &gt; b ? a : b; &#125;</code></strong></p>\n</li>\n<li>\n<p><strong>使用 —— <code>Max(int)(123, 456)</code></strong><br />\n相当于C++的<code>Max&lt;int&gt;(123, 456)</code></p>\n</li>\n</ul>\n<p>像这样，我们就实现了一个<code>T Max&lt;T&gt;(T, T)</code>模板函数了！在此基础上，我们可以更进一步：如果能做一个<strong>检测代码</strong>中Max使用了哪些<strong>模板类型</strong>，然后在<strong>编译前</strong>自动添加实现Max_IMPL(…)完成“实例化”的程序，就可以完成类似于C++的模板类型推断功能了- -+</p>\n<h3 id=\"11-模板类\"><a class=\"markdownIt-Anchor\" href=\"#11-模板类\"></a> 1.1 模板类</h3>\n<p>模板类同理，我们以简单的Pair为例（保存两个类型数据的结构）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Pair</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> Pair$_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">T1</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_$$_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">T2</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_$</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Pair</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> <span class=\"token function\">_Pair</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_Pair_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span> T1 t1<span class=\"token punctuation\">;</span> T2 t2<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Pair_IMPL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span> <span class=\"token function\">_Pair_DEF</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token function\">Pair_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Pair_IMPL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> p_ic<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> p_id<span class=\"token punctuation\">;</span>\n    p_ic<span class=\"token punctuation\">.</span>t1 <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    p_ic<span class=\"token punctuation\">.</span>t2 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n    p_id<span class=\"token punctuation\">.</span>t1 <span class=\"token operator\">=</span> <span class=\"token number\">456</span><span class=\"token punctuation\">;</span>\n    p_id<span class=\"token punctuation\">.</span>t2 <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong><code>#define _Pair(T1, T2) Pair$_##T1##_$$_##T2##_$</code></strong><br />\n用<code>Pair(T1, T2)</code>模仿C++中<code>Pair&lt;T1, T2&gt;</code>的写法</li>\n<li><strong><code>#define _Pair_IMPL(T1, T2) typedef struct Pair(T1, T2) &#123; T1 t1; T2 t2; &#125; Pair(T1, T2)</code></strong><br />\n相当于<code>template&lt;typename T1, typename T2&gt; struct Pair&#123; T1 t1; T2 t2; &#125;</code></li>\n<li><strong><code>Pair_IMPL(int, char);</code></strong><br />\n实例化<code>Pair&lt;int, char&gt;</code>，此处宏拓展的最终结果为：<br />\n<code>typedef struct &#123; int t1; char t2; &#125; Pair$_int_$$_char_$</code></li>\n<li><strong><code>Pair(int, char) p_ic;</code></strong><br />\n相当于<code>Pair&lt;int, char&gt; p_ic;</code></li>\n</ul>\n<p>像这样，我们就完成了简单的<code>Pair&lt;T1, T2&gt;</code>模板类了</p>\n<hr />\n<p>参考资料：C语言宏高级用法 <a href=\"https://www.cnblogs.com/alantu2018/p/8465911.html\">https://www.cnblogs.com/alantu2018/p/8465911.html</a></p>\n"},{"title":"简历","date":"2022-02-22T09:20:00.000Z","toc":true,"password":"nf_open_resume","abstract":"文章被加密，请输入密码","message":"文章被加密，请输入密码","wrong_pass_message":"密码错误","wrong_hash_message":"文章校验错误，不过您还是能看看解密后的内容","banner_img":"/img/Resume.png","banner_img_set":"/img/Resume.png","_content":"\n## 个人信息\n\n- **罗泽奇 / 男 / 1996-06-04**\n- **手机&微信：** 18122630624\n- **Email：** numb_fish@foxmail.com\n- **QQ：** 957441629\n- **Github：**https://github.com/NumbFish-Luo\n- **Gitee：**https://gitee.com/NumbFish-Luo\n- **CSDN：**https://blog.csdn.net/qq_35576794\n- **个人网站**：https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/\n- **期望职位：** 游戏客户端开发（Unity）\n\n## 教育水平\n\n- **学校&专业：** 北京理工大学珠海学院，机械电子工程，2015级，2019届本科优秀毕业生\n- **在校所获荣誉：**\n  - 每学期均获得优秀奖学金，每学期均参加校内算法比赛并获奖\n  \n  - 获得一项专利：毕设作品，双臂解魔方机器人，该项目主要以C++进行开发。在此专利项目中所有程序设计均由本人实现\n\n## 工作经历\n\n### 2020年11月 ~ 2021年5月：北京冰狮科技有限公司\n\n- 所属部门：技术部\n\n- 工作岗位：Cocos Creator游戏客户端开发\n\n- 工作内容：《我飞刀玩得贼6》超休闲项目性能优化，《我脸贼大》超休闲项目开发，《掉落漫画世界》女性向AVG项目开发，《救救大明星》女性向AVG项目QQ小游戏渠道接入。\n\n### 2019年7月 ~ 2020年8月：珠海华夏云联技术有限公司\n\n- 所属部门：研发部\n\n- 工作岗位：嵌入式软件开发工程师\n\n- 工作内容：对旧的新能源汽车充电桩进行维护和优化；根据提供的通讯协议文档，给设备接入新的后台，并根据后台信息，分析远程设备状态并进行相应处理；研发创新结构的充电桩产品等。\n\n## 技能清单\n\n- **强大的快速学习能力：**\n  - 从大一开始，凭个人兴趣，编程全靠自学。毕业时已经可以有独立设计全套毕设软件部分的能力，所做毕设被评为优秀毕设\n  \n  - 3天内学完R语言，并辅助朋友完成其毕业设计 （分析表格，提取主成分和主因子等）\n  - 1个月内学完Javascript，Typescript，以及Cocos Creator游戏引擎，并无障碍转行，由嵌入式开发，转游戏开发\n  - 博览群书，如 《C#入门经典》、《Javascript忍者秘籍》、《设计模式与游戏完美开发》、《GoF》、《大话设计模式》、《游戏开发的数学和物理》、《Effective C++》、《More Effective C++》、《STL源码剖析》、《C专家编程》...\n  - 有把握用最快的速度去熟悉一个旧项目，然后学习其中的写法，应用于下一个新项目\n  \n- **具有本专业的强大的数学和物理分析能力：**\n  - 本科毕设计算分析机械手夹持物品又快速又平稳旋转的公式，并将计算结果应用于程序设计之上，获得了很不错的效果\n  - 花两个月学习理解了SLAM （同步定位与地图绘制） 的数学原理\n  - 用C语言写了一个RGB转HSV线性插值的简易色表生成工具：https://github.com/NumbFish-Luo/ColorLab\n  \n- **习得多种编程语言：** C，C++，C#，Javascript，Typescript，Python，R……\n  \n- **游戏引擎：** Unity3D，Cocos Creator\n\n- **架构设计：**了解设计模式，了解如何设计优雅的架构，在珠海华夏云联工作时，修改了原本杂乱无章的程序，设计了新的架构来整理，大大提高了程序可读性和运行效率\n\n- **算法能力：**\n  - 在大学时，每学期都有参加校内算法比赛，并获得不错的名次\n  - 做了一个使用图论的无向图原理来执行充电需求分配的项目\n\n- **其他技能：**\n  - 自学过像素画绘画，能与美术小伙伴无障碍沟通\n  - 自学过乐理知识\n\n## 游戏项目/比赛经历\n\n- **多次Game Jam和游戏开发比赛经历：**\n  - 2022 GGJ，上海晶核站，LMTSS小队桌游作品《二律背反》，https://www.bilibili.com/video/BV1SR4y1K7Fm\n  - 2021 网易MINI-GAME挑战赛，负责做《戏剧之王》的网络协议设计，https://www.bilibili.com/video/BV1Lr4y117yv\n  - 2021 益游未尽，LMTSS小队非对称对抗游戏作品《气候护卫队》，进入前3名，获得最佳玩法奖，https://project-gc.itch.io/climategardian\n  - 2021 CGJ，上海椰岛站，LMTSS小队2D横板动作游戏作品《黑we钩》，获得最佳人气奖，https://www.bilibili.com/video/BV1uM4y1M771\n  - 2019 CGJ，广州，LEVEL_UP小队作品，《What I Want》： https://www.youxibd.com/gamejam/detail/174\n  - 2019 网易MINI-GAME挑战赛，LEVEL_UP小队作品，《心之门》： http://game.academy.163.com/activity/miniGame/2019/showcase/detail?id=129\n\n\n- **工作项目经历：**\n  - 超休闲：《我飞刀玩得贼6》项目性能优化，《我脸贼大》项目开发和优化\n  - 女性向AVG：《掉落漫画世界》项目开发，该项目包含角色填色换装系统。以及《救救大明星》项目QQ小游戏渠道接入\n\n- **其他项目经历：**\n  - 恐怖叙事解谜游戏《熔炉》\n  - 横板射击小游戏《Little war》\n  - 类银河恶魔城游戏《Project01》","source":"_posts/Resume.md","raw":"---\ntitle: 简历\ndate: 2022-02-22 17:20:00\ntoc: true\npassword: nf_open_resume\nabstract: 文章被加密，请输入密码\nmessage: 文章被加密，请输入密码\nwrong_pass_message: 密码错误\nwrong_hash_message: 文章校验错误，不过您还是能看看解密后的内容\ntags:\n- Resume\ncategories:\n- Resume\nbanner_img: /img/Resume.png\nbanner_img_set: /img/Resume.png\n---\n\n## 个人信息\n\n- **罗泽奇 / 男 / 1996-06-04**\n- **手机&微信：** 18122630624\n- **Email：** numb_fish@foxmail.com\n- **QQ：** 957441629\n- **Github：**https://github.com/NumbFish-Luo\n- **Gitee：**https://gitee.com/NumbFish-Luo\n- **CSDN：**https://blog.csdn.net/qq_35576794\n- **个人网站**：https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/\n- **期望职位：** 游戏客户端开发（Unity）\n\n## 教育水平\n\n- **学校&专业：** 北京理工大学珠海学院，机械电子工程，2015级，2019届本科优秀毕业生\n- **在校所获荣誉：**\n  - 每学期均获得优秀奖学金，每学期均参加校内算法比赛并获奖\n  \n  - 获得一项专利：毕设作品，双臂解魔方机器人，该项目主要以C++进行开发。在此专利项目中所有程序设计均由本人实现\n\n## 工作经历\n\n### 2020年11月 ~ 2021年5月：北京冰狮科技有限公司\n\n- 所属部门：技术部\n\n- 工作岗位：Cocos Creator游戏客户端开发\n\n- 工作内容：《我飞刀玩得贼6》超休闲项目性能优化，《我脸贼大》超休闲项目开发，《掉落漫画世界》女性向AVG项目开发，《救救大明星》女性向AVG项目QQ小游戏渠道接入。\n\n### 2019年7月 ~ 2020年8月：珠海华夏云联技术有限公司\n\n- 所属部门：研发部\n\n- 工作岗位：嵌入式软件开发工程师\n\n- 工作内容：对旧的新能源汽车充电桩进行维护和优化；根据提供的通讯协议文档，给设备接入新的后台，并根据后台信息，分析远程设备状态并进行相应处理；研发创新结构的充电桩产品等。\n\n## 技能清单\n\n- **强大的快速学习能力：**\n  - 从大一开始，凭个人兴趣，编程全靠自学。毕业时已经可以有独立设计全套毕设软件部分的能力，所做毕设被评为优秀毕设\n  \n  - 3天内学完R语言，并辅助朋友完成其毕业设计 （分析表格，提取主成分和主因子等）\n  - 1个月内学完Javascript，Typescript，以及Cocos Creator游戏引擎，并无障碍转行，由嵌入式开发，转游戏开发\n  - 博览群书，如 《C#入门经典》、《Javascript忍者秘籍》、《设计模式与游戏完美开发》、《GoF》、《大话设计模式》、《游戏开发的数学和物理》、《Effective C++》、《More Effective C++》、《STL源码剖析》、《C专家编程》...\n  - 有把握用最快的速度去熟悉一个旧项目，然后学习其中的写法，应用于下一个新项目\n  \n- **具有本专业的强大的数学和物理分析能力：**\n  - 本科毕设计算分析机械手夹持物品又快速又平稳旋转的公式，并将计算结果应用于程序设计之上，获得了很不错的效果\n  - 花两个月学习理解了SLAM （同步定位与地图绘制） 的数学原理\n  - 用C语言写了一个RGB转HSV线性插值的简易色表生成工具：https://github.com/NumbFish-Luo/ColorLab\n  \n- **习得多种编程语言：** C，C++，C#，Javascript，Typescript，Python，R……\n  \n- **游戏引擎：** Unity3D，Cocos Creator\n\n- **架构设计：**了解设计模式，了解如何设计优雅的架构，在珠海华夏云联工作时，修改了原本杂乱无章的程序，设计了新的架构来整理，大大提高了程序可读性和运行效率\n\n- **算法能力：**\n  - 在大学时，每学期都有参加校内算法比赛，并获得不错的名次\n  - 做了一个使用图论的无向图原理来执行充电需求分配的项目\n\n- **其他技能：**\n  - 自学过像素画绘画，能与美术小伙伴无障碍沟通\n  - 自学过乐理知识\n\n## 游戏项目/比赛经历\n\n- **多次Game Jam和游戏开发比赛经历：**\n  - 2022 GGJ，上海晶核站，LMTSS小队桌游作品《二律背反》，https://www.bilibili.com/video/BV1SR4y1K7Fm\n  - 2021 网易MINI-GAME挑战赛，负责做《戏剧之王》的网络协议设计，https://www.bilibili.com/video/BV1Lr4y117yv\n  - 2021 益游未尽，LMTSS小队非对称对抗游戏作品《气候护卫队》，进入前3名，获得最佳玩法奖，https://project-gc.itch.io/climategardian\n  - 2021 CGJ，上海椰岛站，LMTSS小队2D横板动作游戏作品《黑we钩》，获得最佳人气奖，https://www.bilibili.com/video/BV1uM4y1M771\n  - 2019 CGJ，广州，LEVEL_UP小队作品，《What I Want》： https://www.youxibd.com/gamejam/detail/174\n  - 2019 网易MINI-GAME挑战赛，LEVEL_UP小队作品，《心之门》： http://game.academy.163.com/activity/miniGame/2019/showcase/detail?id=129\n\n\n- **工作项目经历：**\n  - 超休闲：《我飞刀玩得贼6》项目性能优化，《我脸贼大》项目开发和优化\n  - 女性向AVG：《掉落漫画世界》项目开发，该项目包含角色填色换装系统。以及《救救大明星》项目QQ小游戏渠道接入\n\n- **其他项目经历：**\n  - 恐怖叙事解谜游戏《熔炉》\n  - 横板射击小游戏《Little war》\n  - 类银河恶魔城游戏《Project01》","slug":"Resume","published":1,"updated":"2022-02-22T09:20:03.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4s001kjowzb0dt64ie","content":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<div id=\"hbe-security\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" class=\"hbe-form-control\" id=\"pass\" placeholder=\"文章被加密，请输入密码\" />\n    <label for=\"pass\">文章被加密，请输入密码</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n</div>\n<div id=\"decryptionError\" style=\"display: none;\">Incorrect Password!</div>\n<div id=\"noContentError\" style=\"display: none;\">No content to display!</div>\n<div id=\"encrypt-blog\" style=\"display:none\">\nU2FsdGVkX19RClmjSp0GqNjXXMFja+ozBr4Un6/HQwH4Mrhc96Cp32/glTidFCy3S0plLCPXcOdf6balkKuKwO9SPmR+LzQjNNNMsYt9mI4AVHhG/6JfqQnAH4sLtIGjITt2qxuhUlvsdrrUroAxrils4dJrlNSeo607AZPWMaSIDuDsZcx7wkWyuC40j5pAb76NUCh/FMIBzw24lvJk4fL8ip3LLVJcerKjXgkTxZzcrKyUvVEQXm6tz4HU4dCscHxvJNAojj1IBrzqp27JvMqDTHnBdKy50Ye63d9f8EJOOLPLf/a2Ot9VuW70Kx/nwdc/HdY2mVNj4wjnIZx7Ww23KUjz0objzAHJ2+3jYjuej0xYjWz7Sn0ROO1eH1yKDHWYhZUXcHDisRQ5W5iIYaJJLpINwnofuBgnvD40tcvANMnyU0qyn90wjT4JMXmIOULWPDb567374572mr0+hgfOi6Wu9G2wtBlHdoz6rd+ZLjjn2zwmpypXYAd6hH9g5pdfn1Gwv3gy5tDyPASFr1/mkL/f4h/9j9jNpeLsEKmZ1mWqdVeSjwlwNE+L3LMFZAb2HQwZzBNNeFLfDbec0LlHL3j+qJQBq/p3jCF+iXmYKj7vjhAcRdsgI7GgS8lDXsiSP5oeZX/EE50MJFOGitYyHbd3xJU/DNCFFCGPZVBFRfOGkWS5MoOcXlguEJuVzUydp1phPR4Csxg3+mNEKKv/wyBw0sYAqtTYdQi6575YhQ/eEqPajC/QUTkKdGVQLSR6UbtFD/6NBdbgF+mFpfZHAAyovHiPS3GY4ktuuQCwK1I3gut8LzPP4uobrXqiQL9JD6wtIvtQOalD45qWXfzAcvISrrrt2+9FxJhF8wB2i7FZVvV/ZgD5DVLegXdkAU3X5IrUqNqnNclksDteNwcUF6R8sHYO95/niVPZak8Ernp8HUh3hs0livjZEdgs7agUZUdvGJwjR7JXPAyqrEQLfldtZmLxjsv/0F8nkP1/qtTY2aLvTiplv+z2dxMM7B939DL13LpZq9cgwMHL174d9xhtkMk1iTdMHmamkkhU0uLyCf2Okr8dBPK5knJH0h8aLfzRLP2CK/P1y697fskJlJJmpC9CB/H1OTTRxpyu9GlDRQwwDG+h/VFJSbtRqiUj4PdwmUdGRe8/epxu3GZvq4v9aapjGjybJ8NsVsOKm6l/81t1F1DSVNmCebWdkTCH/MiWreu1YSKyB8qJallpjUyZsctSJPL2JX04LS5DWlSJj2SljaLyAoCt8ic8XwQ1Z6RO2cOp0o/qqWZGsY4L9nXSkLOLPF7TgdCinSlSgbp9KdcfVxUlBZEjDn782sRHVP4EA7sCHzb7tu2lTr7eyQjZYZBN3yF1HnlPmt6mbyscrb+t5/kW3TZphxxH1f9nhf88lv1pnn8gz3cuMFP1kNdOSvwhX6YVkExBABaPylxWqbkeBW1JZbVZaAatvojZVf3Ajebi/MnLB2wd9UV6GhguN110Eryi9BZhPaMJGhCfTw/kR9tC3IGHxO/rbymJlqjFfB2HwYny8qtFh/4DPJrICjWXVKJeKWy/cuvqSsA0aArqyq8oN5/laZm/b+qSK6aIjfLl2oMnt5Rczs4pVOJRrQbdzSIIR7yOG3H4Vm+/PnHeZv9ZeX687ODaBIRhVNOhcTH85o+mPX7/T8sZANfb/eyzcZe+bLKMYbB8orVs4gfk9006ttz2id0BpG8Jn35WFXwz146ZjVuJDmTdMMROnUvPU38UBjJNVt6f6sL18lkaXE0rdMoljv9Mvaaz/zu9JHS9jilFdtNkNFhb+ga9eqVu2eEzdQbiqWvlol+Dx7rH4PkUfPnWhSId6CWEBaTiR2CQC2S89hvXMewxh5iHZVHNJp2BJTvRV9n9Z/fD4AAUDfB20KXtvtSu/Iuda8fa9ew02pHAFxu60r1dC4d2QlaOyjR3tqcS3dWvjIAF3/6dCm6WM/2WgRRaynAuR1jjT09oMzfci+4CXjhgIn6JZm2IVZ/fQhfcwRfWnuUgJJCxJefIqWRadGbXKJHH9jSN8oy+MZGnIbi7r41LKvhbcJAe7WB6b+KDUVIIbyopMZSgQt7ef/JOL/+LV8nfWkAHuv2pjrskYY32InCJbCgkIpDIpuocl1IoHWJtZTVNzMDP2ft8u2FQEzX4r9oJNrhq/x2S18Jhnh6x0tfoFEcth+1FkQd6+lyPeriA/HgHiQ9SN7LFRzYncymo/reuqKVtDhQq15xh1DCKkRbeIKjtLRr1qHHaGuzG9eOPkS5E5FvXpDAQcVUzhGpoW4oFqyKIAQJ3CFDT0GOueQrSl8ZlFfTHbReGP5KEzKyFmuNUHaMIwR16tkH/13lsPgswYJwsaU4dyWpZXbX79uaIWeRbKo6zBkH7xDKH+gKzr+NsdYtEO9nL0XQy0RtJ7BXXYOs7dzCT5UrWFJGdzMd7d9IWF1ggC7KUAZsOTvqALn1Oi4q720+TArZB0epqp7R7RPkCJmFmh2U0l7pCThVG0HmdYSGNoUtSq0lqSlXepwKQqUmQjg4DIJnHpJQhNAdhdMKKOhoX5QzedrT6rvYOw5tF7vDihSgGj6uOH6zm0asXrVZppKqsTIqw5dLexNGllsRQ7J9SOm8y3V5qFH3CNeP9w/Ss0DJJPFT3xUweoUaRRZRR5cfnWUKaK3WX0WcHv/Oc3/AvOHGlDXI0pdoUss3u6YEVjEkA0kOBvLsthF/8tuw78pAQqnIEwXV+VgVPYg9/aauONz9Hh63nO38awJzbRexblVF+Y2IdKYmPql3pookRZAd0A6dK/qXBIjeEYkcUuKapv6RA2jlqNsJkQBJk1bcUG+LIbl831RGBEBbeeJa9brTJ00TRXPv/1Mg+tPhO79rlkBRlUZy9Wp1o6U5h7zp9tMXpzKg5xALFhX0fmzh5Ub6nIixZ5U1H/NKeiBhVSTGob00Tef4vIW742uOX1Vt8boEe1E8X6RSQiKuVmc/MdB/w19X8LfxelBkoT2cUT13He6TwtpKQYMdScjKoFXzIc/oG21PRw+TUAWXEZZbjz4uGrPsKdA9Ltv94pVkvIJJ+VHxzupql1wPhTjs+dU09sdgqKG7qRhoPxf/F14gEkynqRvRU+0zj42wfyHy/kzIk2tI9gyqzVCA+XQy77lBVG2JIBieX9bsVkW6dtFZWpg37+RYVwlAv0nDAYf8L3bvN7iiAH084Y4/HeTj7o65ZctS1IGK9+K6l8Lxi+z+pv4HIlpofV0CLbjmFlnqJWWcfsMO1HUfGfJbxz8PFrI9ekyG35o+kd3GiQosWrrRZgUuHS3QDwMKZgxTqNmQ6Pmr8VMc4xdW1bp/J0gXrvOOfqhcLmSZyItxF7K2ZM89Yaz5+geGCetYykxSkeWvGfNUFXd9GQnEGXrY981Jaxa5htk+z6EhobAtQ4rN7NExYfARHsQGdV8tcEUn8uySV4qk4bUNrzVdl1Nq9LTOrdpQ2hGtG3KMmGNDwMzlt2qV/NeIdVfZUtvmG44LZSpoG3Xv6WfPaZ/CIQ2uxxw8wEgGC1jrl0WXjdJwNjib6cHWbY9rUvj1mnlOBvzer1D8/LKyogx7FKhbRb5qhvGwmHOuDjhMNe8BrDE70nGEz01izJEvB1K/fqRitUMLqkQ1G1XkgfgSQ1GfwfNBU4alADVdludLAMXtGl9o+YADYQU157SDipQ3edErD5iWAnbZ3/4e+9rnOsW5dXIuspKSjoqB5+JVBDSkSwPXttZij921D8/wZ9LViRqsdBOPIZzkrM6VcsBRp2BYeYtUPORQO+hLUIld9s0sUQyXGx2MJoh/Hyz6UJpX6+HP9JxEKM6mwxnixA5YS/ZxQvYtlmxZnXXxo+LQ87/azh1/xejCaUvbVBQzgMu3Yip/BDWanc21C7wOAfZGKuK+RVRxjkA3vBNPehS0vdH/+Q5kHIYRxUyd1TqSbQ15CVAd5D3e4ZwjFJjFur9ByAZLoKwdbcDqC6WiyoGL/IBo1vUWtDuXZ8P3CeogGPj3T+O1Nfphl569I3x2WRKZcNVp8C5zoDCUTbWZpamEAjDwhabeZSIwah4QakSkOj2L7srgJ/thqwTJCPWAG4mvgDXyn7nQCA0cgSKnBqfBaaxBZ2RCUhx0jJWs6UxZatSU6E5dO79InaHfsUpF0iQavxvnJLm1NO7KpmJ1E1kKW34XCrhhXMw0tfQJgtXb3raNApMnbUtMZQ7bPW7+gsChTfuX24T7pedpZIbmPQWiE2Szv4OrIlDUZ5TtWirraSp7dZzsVczXwzpefvdETt7HF98FU4qi/xVVTa7vafbzlmxDgoZyyHRjV9Lg0u13Uds0k43AD/h7i1ISlTFe08LZ2kVJgNk8WJyTeQUhHhyetfK+Qi8UJvpJyNggsB2IK4NV6AXb4Rr+7KS35RZ3vvOJy2cjrX8U6GnJGwpIHqqww3EazZIbX5IiWmh3dQmivx2t7WbRKHmrHRMhU9R8sLhaBcRqMjz75QkSOZ2XXnI2tGPqdqBoZa7QAhhE2IZ35Ey3aTce8UuR+kVac1d+C3dMxA9u3v/20FcmgUZ7hHuVhLBpVZQs9IwmrPZ8pB90lnrXja28Jxp/Y/r/r+V1rFJLKwKIP+fj5TkRCWd+WZj6Ewrl0nwvoTQKxOmFihwL+sQOb29Vq0RvD/pmroNGRAG/8SVQb4dCI4K27ysq6jTFHQTHsUMKahtpWteM87IiV1828NVIA1WTqusb2rmk2agJ9Jf2fH5FEjRnUnWtf+dYsBDjg6OPBTT0YakiY9owkOwYjjNmlMb+Fg+GfAMMzlCjV1MaZqhgc/LB2n8zxqgDZp7UCiFPapjn14n6U1h77ugrCeIRnk8nrtzMaqqFZQp29B00X1oMXtxX7Aussb/LEKIaUHBfxhgjcrfDzYFyEOCUbZJQ25HJoFKmYCvZqHclutiJuVU4Fh+5e1vt1sjni8d6wS9vrNRGM6VphVmne9f0M9+sZPh6rpTpYRO8hOJfxYh6dXLzLCQODIdvIVfEM9sa5b+aM0tIgKoGv/Ei3XzpR8RJe3/8/xRC0lZMR6bN7+4ncmf78DFtKwRkbNlnSW4p87lnqz0Lt+9ZA1B4HuK7erW6kpsywcXVs6SOaIjr9RYm2kFnfGx77lCEdO+ObWImMcchtynUN2WxSvU3X+Pbl1mNe2/5c/WRBDgGiHmW4Yu4wbXAy02aUBFyeyMdWP8kZ0mgZXu1IxAo6IXKwrS3KvNOz5xqNnO4RPctPYUnFAUK4Yfu+A+z3pvlDL6p027pGkcaUnPmbTeU4i8hGsgZShUnNKVHoROsBccd1Wf2pr+Q18RdnmRzNjr6Fc81U4nmBApbMsph2+v1lftgY25DEHzsHdIGXO8vY4YsBmpqA+i7cG/RKsLuuiutuIp2Fpv95rn3kLbrA2oaNTbKCm80m9v9zjUnl83JSrFfIJhmb2OY+XR0Y/AcpuszOSAMB3MQiBlOQNqtc2ffxx3zsnXkSDUSkY2RMhmc/ZMA6M1Ng/q2vXqvagGfLrShi3ROseIX8zi3ed9K8QIQxRttnjG1UriKNjlRzfIdEtDt7U2+ZvIB/+DIyD7bvkaikpCoCjhupFtafS1dkckz7zAR4ktqlmGRPRQvBxuxJqPDGHRIhrWbPYmUPsdnwTFEnwlQjSJvob1xkDNg+rKxfQoKt2hOQtxybukhq5Az17SvS4xLnroF4y364lCjG9fgSiC/ytKQ0GWnPiPJe7w03CKpk1/VG+u+MdbQHKef51XrgFZqUJBnR2bFUkKVBowMopGyRdT2Za/jK/ubs+cWUIdMcabO+wgcCA8K93Ief46x9NZ7o2Yl7qknX4l84RCZmSai3KhgshloyCDPHLCXYw7H+qCrSjBCg6K+lArXp/GeccR6zufWertg+s1pBx6cNE8EfilIzBBmKlDzIjJu9jMG0g7lOjktYBXoPshzuJ7zWJbPuHQjbCnXL/b2w7AoXyMgKdHXXuQ/qrOmRosuy6tS8VWbk5qZVIEZAC8vvQzLS+5jos0+5I6ZxpGuDuUXzBZKSJaCX3VnDZXA1y0PvvBKGVdtsW26LLFLXUWuttAfJjO4A+HmaZv5SVy1qW2THd1kJDBUyIJOJ0z57drw6ANNwq9cU9G88VvKK+/1sRpZp4XuE9M78BdBzaP7XJW6Xv1BCmJaa68/fxLx72BTe+eYcaIS1+YYA1qKhr1RfnsFh8kUccd1HaWLAMYt96cBu5g2ce/Tz6pF0U7lGvgBsAFOKPreE0k0DMZLajjBx5zFsxP12GilmnCSTwNOljf0jNO7ptrobAK3vBl48xW9yUXaylZjrjTXF7ynawnknwrW2ydooCmh1LIEzas/y/P6ujSUIK1iiowX20ACaaoOZnRAzneVcUkXTjyjv4XO5sWBkMmCnwIWJcpL93IBgZqF+QkqdmXpz5mLW+wBQcMb+3Ikh/TVhuirlrkjPHapWfFl20UCsGXYwIA5TIloFjRMIBwh2Xjdo9sX9B10L/VAeR3aOndiLKbxVfxxVheKu3Tds0Eywv9/cjRF/6rFVhn7caitGJAY6M80j9B8AkcTMnBOTBQuOwdsL3JFiV1fLNbQ+jpDDfGU1uhqXSD47ldLKlnKAFOsNCdW9qHYzsvvHo4bLX0OxRx4RACBLbO+Dml77IPdkx4ChOIneA7f80tHQsFJYWnLN6lHrx2IiNDfpBHAyhpAbiEGfuG0nK0eynGhLILWVhp+1JDTwc94plSlTTv5qa0POqS1GRjrfE54/AQOUcUt9UX7FdP81cWShTbUEnmw7OYEQKT/6G9Yu1v/OPdEIhqAUt46mKK/pIR9cGuJotmXCdDRkiNu9sbhlytGiyrqqnUMMZJfsHZ+zL57H8yZw7sFzFuNol6IyPTKcasy4WifL5iqjD2eg/sQb21fURkDrH0s8PDjkZuQC7XlDgs8cRIfND4LJfENbWp79aFT6AGNBRDpdJxSG0Uqv5U6ttngaCc8l6RNHPX3z22l8uloVp4PaofPHnctIUPKWIGP2r90vt86z03DKIXxhNgTE0S9tvJ2X/jkBQOBID5GKpfPnQgtqGqdUM7b8HbZj1sROTqWLfgJEbzmnfp5ryoDAgHCvpWAuucWqzWIvo/pavUAp1eIOOpZ+cs7/d+Vnkl5LcDwZqMFs2Pwf6BBZrf94F0sTAkVHJMIJQ1ZrCig4mQqK+R5wbewK+ksxEJLw4hNWkGQCrVyOn7m50BAb5nEGJXxtig7Nfelrcnv4qSFj2c4mDX94NqR7m66dPkb7+FwiL1OpeBKSh8e0jc+6Yc1zqgeo9NvtES8c4WXf1TD1RcKhz2OMMua5T2cGgksiB1tsQue+UYbhNhi3mbnax/tzaI94ZsshaBwRrJYqWH5gVEQ8YLo31lNMh+ppSspKT3xEefO75zQIy6A2sH2uHi9GEmEe4YIfieTNxgIXNuGaNzaZRLkHZwlCvwZqEmyAxK4vdQ0MaS69LClLH8gc+EwqPkfuGc5Bx1f3xzpzMglqpGC0GrSB8hs36+CqoJQ8M2PEc1bbrUAY7kirz6IaeZYXodYjQW8ZA9xZakFep7ixXfh1pIPTAmyAvgUiEkm5OMH+Jx1LUShmig/6EdPSbSkYHp+XwgVTT4TNjaeWP6IlJDjCfUCJgULjU1UZkz5EoHy0DVE6jdzIkJOd3cWf6+ZIuLZrGz2s8j2VviNjwr7XEvFl3B9HdEtoFrpS+FCCpsxEfmhrsEYBOhLtynWw2bBIkqqe6hyAR1NqYBfHe2bhFix9XvlB493t84u8eKjwKkG+qzT9chMQLJjs/Cmn52dbhS7mXcoLxyvWDL1pw4idUuSGL/QFmCLTxvl8rrJbs4Ky91ar7PcB05fJzUaI3NwOinoca+17uB8NsjDPROJQCOgXOIyU0L+pQF1MmBbCo7gKkoe7Ksl3rxN1/l5gXk42l1j9Uq1XBLz8dH4wh/vHKdqjOqrBa9yuFqFMbM9tzpOl/NWweaTFx7UqB4vyNZPKzFuqUbnaRuuFH0xESdzYgNMdjFoMo6jd2v3pJVPeN72ArlYolRq8mFsHwvvh0DmKjCqxmt3tYYaQK5mxrzpG/x5/5g5wlZCPIYhJ4cMIAbMNdfWNcgTqA8Ocz3iJqkIcKXR2e7ANl8U7vlpKjxhcx9rCkGNh5TCxbjpwq2L+WlqnOXdarSO0IJlAOliyyoCzVcg9SCU8E15MlxABB+6e38tk4sZSFEpQpCAjSZcoD5krKuoELjKZlPjPLjmczp9z4fL075SWZ4XTFFTgJnenA70iP6f/PcxtwtSY92ec6VDEL+iV1EXx7nOMppcj+Imu6t39G+3Fy/bGKKU7Nd5292qmizqh0Ai/Qwu78yGfdx/7e7G7ox6kl3cPOyVv43YZKjhko9RpVrIqIDGAjwngBamDpq4CtfvtONo8nIVofP6kdUl9t6o5FxuEG2EbkQx3G4U7W9g0b/B4eRNl0Won4EAEzk6nlUNa8xZJnTt0PFuAgze7SwckWHliCzK0pVfySmLmFQjn1zhXl9++zLPLzstERJfhAB0i/TdiyDZPD5wWWKAA7BymIVUHmZKVRO09al+fCIRvvniWeKUeH1Ot1arVg4WUCr6meb6czDa+RRt5czzrVVNnXnbg7OJXPZ/rxkqQLB8kuBXRW0oEpY0zKbQ4KHMTl2lmN1Q0LQ4jQydEsemHrIOtUA6zDIi9ATqElvi2XNIPvzsBwbMWOoTEx0eJUlXER18NK9oCg6IhIb+CY436c4EaP4RwETn0ELKoGKxZfH19BMTFAaqIZwAFApJl0ArF9BfjsTQCGAZrabOwzBJDTubuEWe7V132Xwhffdda03wD8qWv95qMdbu56aLPZmUmCOkbrgiIbiBO57VtXXVcE89gZiJwYKTn9SgC8BVBEAgHKsCNkuQu/8EJ/INQX9rCtYqeSxJARFvIxIcx6oi0mTJ7Ou1rIbdmvsjacshgnMpmg33iJhtzv6eWoj8jbJYqDtNmqXZMBDmZJsSeUDILFKPv+A4dOPxPR9lWr4jcc+PgViBB3hlwCLL8fRMVvOxuiKB6TQ3NW1GU14X7UGXRl3NDLqmctW6Odc/z9D5cpK6vF6EbRtYYEzIaKuXGtNuzpDkxFC2W5Uq7JA6Yh4uuRGnuTsVg7ggDG0XVg0kWbe/VFXSXTIc8qKGRXeSI0XEC7FIICNEgstVVgC77UnA41BazYcJq3lucFX4XHl+ykMEiDNfY8xImS7yflY6zaeJzKYk/e3/XJfOWaT2O1q4iWMXoQ3oSxq1fm0gSqCiZoy882kcETJ+AFA9TxsV6r2968HarnxbZM6CqGW65Rl19nI4LRUXsHo93L8P/IajtS1RQQz0S0nOTisf7A5LBJMoxzUduz3NukmBZFzzyHHW4TvVgOvBLQ3EiB1r05z2NSXzEgbNEHw0cOqXZKpTYy5hWcUNbroaTOrruL0hfTOztWbvO5mEKmcVDmP7VfD7IpPiBfjIHvAHN05ywEHiXhiMXX1+fSuSLq/xKvr+rdqF9bWonp9gnSezc3vKvXD8vIia4T+A8x62wW4+jrrdWPwNbEa/ooRipKeniAb09qUvSQRemN7tYlcB9DIMrGUGBbBnr/FPGmMrFbR0xjMmotH7Z6d8EJzYWHmumkupk1R9LERShnuMWmNCs5gavA+tC1tGYACV0F1SbSBqrhT2RyiS7ZBkpEjoLlIsMykbyG5MAlgkycgaXDncprU31qQjQliCPf7dSsgTAVXs57gKj7McKystMwDE9UcXToqnBc3IHIWjrbfflZrrNnGdOUciFXmNrfLFdsWVSmy7o0oLKrQtgZ8Vs4f+dse1IbHtNEguIStxyZKvT5Q0Tu1b1nhXD9L19gt/j/OpjwDe15nAXLo73lHwBWEaNGp16dsquoGGfXqPDsAnk9N3n6Wid9kY981NT42zgyvSMXuN/MQLKAbrcvH2B41RvhMD9FkLYBRow3kBHe++8US1ENPawAwOaAju/NpOLpyDLtZcRuPrf4/PlEmjKO/2tFq6fy4ukTgm2ZdINm/z6TdqQxquM+Cj18Iph1AOLaGIT4A8jjSK2yAUE1PddxXuWQuG1dR0CSDJC/3+RAeBN/ZseDj86QaR4Y2s2agBtk+goW/o2l5WsSiUAoodgGWDO0mhKllI5CmAi4llQ+YMHxU6HT6Fe1iR/K9cCxf//O3ni4QrxRzNpNzJlg+iNVb5Pi7JnUhP2YPFDWr6B5jFLCOkXYW98CNwf62xqmHcVgUT/0jJc/se/PfRtK+uFduNJK2vAdpVLnJUayXmihjqLkVdROY185fnE540mJ/HdutUjrp3KA9+lWyxs0uFC854cAvpTJ5t0cKbQxjBjV0cjqkgWDi338zh8+DBnNzhFP+IIs4mdFIIAkD5XfWoyQEH9yQbtJgzsgIqXUvw+KCXIZjX6gsId3oPVuNd1AfXp6KxTlA9CmtGa/COS/S2xloz1OAAtJI+nzy4OqKkX1dX4zDXoD0eo0wIMHgwiHYFJapqHRC6j23SA2pZ+dFoRahmwgawMWuXsyD7Zo/nP5o5xolQSIXWBABD4+BE8HkTzzUH/UNH/8cIlm0zhRyHUMPBz8cwwfASwipd5lxgWP+6or44tSTvdvSUvt480hG4PRdkU7tV3bIjQb0JwkYSo1SBwSMtMxHF/oYpbUbO054pjKmtXj0OTOjljdN0thXZiMEDNbmFB8XlkInoulc3gZ3xlbPwJH9FjxgMp7aURpaApADq+m3tlTzu0WUe5HL3XT+WFvK59Xh9Jt6FtepNcJ5Iyk9GSJCuwCvjoeGFOMqeiNJLAZk7aM2SNlLNlOKZ8mpL7cwNV2ymp9MTWh9RWKqaqTRQshggh+jSEXsVX0GTQ7hE0NGvQXFCOiRMzN3EvO7dquYVxVA5N11rP11jSm5E2A8tjnp6SiZfL4XdQ8ocVoDPchI62YVcbrNLbajj+DUD2Qn6yyK7/NLNkCB+nBPgUywytpTOkozdD+fkf6dPp7rFokawVXTGlFEXrIr/geIz8sBPiEMvwyuC9pGCP1oDdeLfaaxrUJyo7Vmo9Z8QQGMIxj9QXgjEOTVm01eT77qtWNoVRFbbpiehdStO93VsAaRn6dL2D6WQi7U9tNYbZmQ9DN/Ps/d87HeNKIUwC0c0/FHBAEinrrzu0JVqeDWf9ayDEkv7wg9APz8fOUB/uppb/1FhMV4GJklqlXtN1HlK7JPJbA57ifDdP7AldQlubdPWJqzttnubESfIVIil4ZDNfJydpTikE4vpCBEtJ4P/a9O2JIBMM86SrhKIoZ30fHyM+mXIrzkN6XV+bW75vJ8FR0ei62vVENpUvQOrJUwqFkr5N1+csMey0g23m0DFH+FyFjuzeV265ONj4vUX/RTG6e9uUhL2aVoBc8+vHy5+rnfrcw+hSAZd3XZlFJwlxtb9l+6GdmgvkXLbl8PbB+I3P3wPdEB6eR8k8bclx/5HTKojJgBaQZAoOo5ESSMk+NroPJZx1yJAI8H4bLp5QIrD/mhvHIdxvIu23lXGUGCxMZTSVQiPpOW6i3fJ5PYf2iakBNqrIMIktSXB9egloaRetaIrRmNiqGXFWHNbtDxU4V2wlBWdN/Ac3OcbS6lcYn49bPpFZ2pUhS9TBBypfqC5wSLQGoJE4F+i/c+SxzxjFJ6fFROC9obHF2/T5wF0flTka/thKgJXj32J0y2DKcKdlmCR/df/UthhMcLiWEyppI54v5P4PM3H3Dlp00vPtS5HC+EM3xaVZr4ar/qSzI6edHjeKz757eiitEx74BOy8xlG4yV51dXGPyJjzykmb76oZRbN74BtPOcRgTA73SPPWtKBfLzX5bGprP1axoydx039adrkmsFRjnc1FMZk7uuaCuh2yRP2cqZ0TOcGVRxZL6ryNjFtLFa7NnOWMk3pSNEuXtbdiQqELA50E9Yvqen5q2EVknGBJZloFzLyyRTwAa290XJ/a3WM183V5wCJ8ffffpk1Zbud7YGS05lPOnPPP7X663/SCTKsX22yaGDq8kwwfwa6zQGgKihOf8tlVI3ZqI6J5m85NhFv97HMwfEY2/e1dXILFhKmabiieaGgzqayNeRIJtRfIHgHAmB6JWv2Jtc5Y2KPdljOl4Fw13WZyAdl3ZoXLAtCVeyQc6UR6Uz0HIwb8SqgEp/z/sPxMVl7ZOS+R7ymL8dC21RHPNP8ZvAmjKEG+ZewRqWIXkQCfWUcaLLKChKg6x0z8x1vfiCRYKOZpeCHl6v2XyCVoCDQ4aTFlFO27h+xKssu2imbPWTO/5XVF44gGPTCLqVom616g2VGET6CY2IyD1xu40iqxeTPVnZ+cnWwhWFS8oShetn8SUVHsq1YViu5kWnR0uotUEpQf6XNsaYQT0ThXeUQMEbmEBmQbSOIFgCPgHvO4kPpqIxq4rR5hg/x0PPvBXg3cFPRBZIqXxlDEiUo4SQBNl/bhLt6bsVdPgbblF1R3g1wNW94dc5KGYK42691EEr5sKMmauaU40ZFKqMROjsdkrOOD3g/z9e/FaTMEI6h/3nnZw+jdczuYz7ynY+VLA/vHCU7KF2eOEU673M5nBGOS+Ch8ykpH3gG2bh/qF7WWQnka5VHs1enRRMQIbUL7+o5CqR0lgatLb841+cRJk1zQDbBTt2lYN5Cs8ihXGYxv+MANEK8nBc4xis7QF5sd0VIqyBb15Jf+HpSahS/xc8E2k0JcufE7LEmyZNDhwEg+wDnZF6Etb6CEvtnTyHroCd6s1FTUNA2ibKxq8lB1/3wmsDiAL0BLGasnRVo0mS8TyZePBy51rBaTOZ1UF7e0EPifwzdY9C0GAtg5IQSrGFatvn5PRIOjQE1f4FVKRwY7DLz9CO73vOr2oJnJby4qtOhVUQJZ1t7qEEwyb4r73zQZLp+ZZ2V0zhm6otFQdDip/A6HYM7+tgRFyhMT/17FA9Ze0wp9ge24k977jHD6xuFWEwF4BgmAjgASy+WB65h54q3BXZxi08+H1i9EL+tB6XkSSaNLRcgPmWY3nONveFl3vIhOI0w/2/9xVXNtYUdYmSbFgvik73Fp8UDKbIZDKJFkiorTm1Zlor2WmMV/TsYEXu+sc7yHDTg+fWf6Rrn0TfCN8Dlhwi2r//Foq39ActzZKEjRzFwxSCj9YJ2wumoVe74jXGBAcHXKlIcKuFNVh7jM/yvUs5EBggJMxU0BXq82Q+RtJrAQ/WuQmNp/s9yY3CcIIEVKESAAjxwOHmI9NIe6ZTezvUm0854gah8Gv5odTkkvmAX86rNzC68PvqbO04dYVEx3peFCk6L3aaO0DpYdbuGGtcHJwPrSWa8it22njmMuNAVJt9OjTXJ7o2UtZbCw/5Re5+5oQzYnCvwMs28HpV4kXSmezN1XGpdniyHIZWo5lwh5BG5YJ0OcjspIa29Gl9qB/Mu8ubNUYV9gmIhkyxIbwyhFL4bCxFJ4N/9nqmBG1ddSrXJrKxsdc9VEeLcK5QC+cu2IWKuxuYGhhQc7G+DnJX37SyWF/8pFAhoLCiDMciBrM3E6mKL2vnezlv1eE8lviEjJiyCeGkH1XNmPFDFjML9bU5wd2o95XwNW2pON762QDmy0AXpLryRwS+jvDj6ukzVZ0QqODiC9gde+aB2PSy9n+HjvhXVVbEsNDe2gu9r1mHbHSlAl6IXYxQog+ojr88yOwsIo7JDHf2vanMM+EPvpRfrh27k5ep0abSSf3RwFtuvy+lFtMlQlfiaTej8/K4NKfNwbCkVEwmzMDrDJyEqsO0SUWU9YD+e/rYPJxTGzVRHAMOlPT0QN/VaCS6JDPFmyjWqFAgdQGzdcRrwrv+XvtFJzGgNHZrXJZwXdllIyT8AyCjB01HWFbW2kmQVcwEw2KZHVcn9cD8r+iHbsnTj8Hr2JLDoqmC2CSFnvKCIJ6GMAfIiY2rqrWYpdOtI/RG47x8cNLeHabtccnAVB6S+QprzKns9o+W1gb2V/j04xO7g5v0/XRDPovQhqsHIVmqn4Mw8lQX6gKFHdjjifc8o+hCSP71sXhxUbqJznVwmCQ78LO3qrul6S/cCh5k+x25Wl+sh4YP2X92rjpdpw7ggpN6qulUz4wuMLNur+ErO32gXx7FK0Z5/WvS2Mf1Tr8LYIqYUyVTE/YzAoVI0VrTIaH0+3kPnMBiQbpEr84vxL0VgpRKiRLhQjM9w56odu2/CfQ32ZfYLYZRqGLKT26ebD6pOH+EjtO8fyY8+mEwD4JgZ4lVVo61gM7EbA7J6twmkPuZC0upAW3KP5oJ4obQbx7HJx5Inu0IkW0bYT/PBlE6oz0e9+2Gabg/LF0kAUxKoL5RfN/oAPNc1mEhuqybdVXdYX4B7ynM0P6D5F8ngfvlnxcHvaabD4EiySBJIvbqmQoYgQMbiWk7kHlc6ct6o7kzikAhjQyAHilc5l76OULk02UxGTetHIFhgsz9SzBVJRUqvXDPWPt0NiMS1GyD3au4LvM3wdyMiGtGDaacWs1IC3t5R4yVZ78/GJ1XuD9vE/e6m4h+w3O8mAMOYh2N3DEq+1qH639p3DfTIF8QENDNDG0idt2py+XHDC7PW+4wJxAJciQ1+TRWqeALvYD6aVS/prTrkw/6B21vCcJJiOSe8zx5/DZw2WFMACEUpYucU8F+Gw48ahxpwgKIYxm005HTNmwE/qo0NMz8ioSKe80SUvUtY2e1MXQIyj2xd5Nih/46xNnhnprHG+NyR4vRroeLaDh7IV8Fdn9EH6cgDgNnvgoP0fiMkhSfMXP4E+4waORXEbQgfr3N65GpagG0PLXzmS46xoYuXaOcfuMat/se9h1mvlDpe6TuzTnJpXRxGQG+UmG/sJDI/feoQD/IOhZL7jvmf4NGWQGAjBPVrQcrDM076oDdd7ZPmyK+ZTuICSWbmGFPX+ummZj5aIAnObi9FBHKVf5iCmpl0LTtqeyqVGRzCK7ucyfMXYQRHG1pYirw2/bd1hLYcW+MdNdMeboxxQOn4bwasQyeXnR3vK4HzR3jLoLAIQVU0pQO7SqQjAIgr7D4M4QLpFleO/M22YJQ7KgN2IeSyriZdDcRvQI/gwqS6ZfSsURjuJQBwhUmk4oQ2s7/74CQfr3UMlSCVMClOM+y5CouUMWUR4s7wE9jSsBZnz7ZjUcEVLU3Fa6TiQTmsXW74cKknIuORwD4Wz6F5V3DZdnbfzbYeVBL1a4hKsQD0p3rUdmNyGd0VAWSltAVPqgMumy+ndWkaXldXhxRZibFwczCeSVTklP1xlH0fDB/SpSQeJIUjTrjdbuBEeJIgIPanTKuOXAbsbUQ6NuyF8v4kd95Tpibi8J6O2InqGt27Tm3GvouAUjuRHJqtWFCaR3XdjvaczKRvEVpiXn01q8aRhQwTVH9ofrOON+5Ncp7M5U/nfKMxjzXRBxxDKMle3G6J0hKDSImUmXDeDy2v8VBUNwgqVSNOMHBMBOV4CVZa11h4KcdUj6Iy6zJzBikGqhGzqAZ9uZlE8YptEXwr8OqxbT1Dqrow8/xImdP2NNa9haDc+h2D0UYeW2HZyqxBaOP5q+e3Cgl2VW6IDt+RnX0aUNhMOcfjbaFWeVAd9Nt35Q8bVGrfAjkbRDsz3Gsglq75db/FVSxS0eeVSdaRNGJhaWMZkDM2fX14or0+geImpsHnx2gpWq7EflWq+eC4/wQepu8dEkJV3Ec0WRIWFySh1jTtPg9s2y9WyxufmplVEgZL+cpMTBfLqn69dTeI3AMs75iSTXLDGtGO0vp+hE6khMVogEaqEXrUp3CtWSyJUEvl8QA5vCmuXz2xfN0AMgdIUG4U92MbBGq0J8f3YmKdhk0By6pbejdGao0ZwwSvJHB63LUWpeMFIXJyiqUs+Px+TpmULb9vc/07XWBrOZxah8hCcwMsXQ+mo8rEK5ADBRF4AW3q1VAPDO6JVNXoi4K2WbVhktr8oqoNGK7z5A+05v1Ab4yRi2p9tEFwHGaFYIj6Ae/GJduZF+Q+HSu9rHvzOQx01FvtjIq8CZjBZ7sS/wrSzknCzjUQholg+D2nY05+u2x3EY7Yv+zqrTT5kW/p4pSz2w/thqSjcfCyfbyeTzgFyLy4CZPyLEy//82bivaYclPm9K+PGe3x4GP3PD/0QIGyW3K5or7cCFjjSM/USknggxXgVL8qEFsoH/UWJPCm6fyZ0If4RH2rBpzSvWqY7T7kywjcHAWfRc8A8GU3DNk17MBa4xbQ7S5yRw2K7rN0/VLhVHJ95+1DOOqtwqHte59wY9MM5F0HvWc/5Y8fsKgKClIX8f+45sy10uIv7NBrdnm8/oDy52AgiCFfFuCkv0eFaFmHKbn8usmp0997XCQ6419Zw0cCcAGYI58pOGNICWMvwWoJZj7AnYFt7B4aNvqeqjPZKXz7kyp/gQOyXeT5y0Ec8MyFKO7/NbSGTXx2vRSqyTtrBW//MN38th8O1d+Njvm3T78ss3hL4863ZZibkQWaPkxxm5u9BKV2kS9mcxuPH2buM7zUrMQD2+fo8HnOBRur6fAhqLlC/FVhNNLhNw+5Q74mC6NbhK5amK2mFGbmOdjc+oHodLTHa2isWSnRHu1jCJidZ6k8wJHrUG5WoBoWhW90NXBwNlEdWHDs7YXqau3M6QcHrfElnTi27oNQ1BcpeguyBtaUG5eOGvG2vWrq3Z6Fj8bXiBzzBQ2a6GRK+SJtItVK/P+KhlSbeOPBHUKUes+73/Ey+4487DNOtwHKrJwBqwfpkDchf1se0BNgwnCMvSyWMgwTicikJoLJ5o+qsRG0mDWum4mGvju37v9Gyq//vEosULVu0UhcCMNSEBsl7EK//6WjlXhQrHVaeKp5eBJ46+qOlBv5x8hAGx4JvP6g/N0wDCm1x7az/RptKYcatl0S+a2FssqcE/AuCJtqG/5MI7fHWSdUJNmAg3EuhBaEK+qUmTBTyFs6RjuGuO/yzVLrWx3Luz8o2kR6yNPq2Vepx0qVqaOAhwTvl1H5l6AbJklLdTZJF6oxa2CeqkK+v6NUvW+ztud1LKqRfYPt0JopcE050IxlEj4YUkoUYjHeIXlur8INjVPLi2yaLIH4Ymd+kXcq8bu1Awh2AM6e92zEQaE9Xadafqyj8MiyXyQlQJeoJDwOpIbNtarmntD0VCFAZXnFEIi9YKzSbjfcP0GH3Mv7swb5LMsFPh1cqSiQox1Xd/koJKygciJSEA5rXHD0+Nc7iXBe7kIpS/1fiRjCYVSWMVyVb4jN+WeFMdmYzpOegdlzeZUWW9qvWIW1rnymqgIMMT8F+Mkm48dcpVg6xmzYgZM5E5a/yOol0dkEJm7skNf3XIhZnZLCa1bjFnGmSFADzJiiL8WF3BMpMIRwoqSOH8bCmmlg0y2XpEz+11LlJJ34BUTnh5Xa/DuKc11tgw/9zA8ha12v2OiNKK4otQK8nB90Q9Nx0rxVGtnxZMHIn3uzfoPDehMyc+eyG7XpI/uCa+Lxw8grFt1L6qD9YMfq5Xmsb6CURpitHiycZ6RPOSTQLGjhx6W5X0G0RIyynx97BKqNw5M9Vxn6uuxomZZBBMTSkCgN0uknGuaYF20akZzLsj5Gu+3b4lBujqE65DiwcdZ3NWkY70Fia2LwSnU32h1Xaxkni4FuEZ90hRSubmaDfXHmKiyGp2j7kX+3lM4cPCbiAIwDuQb5BaOFSK9s08K4N1+/x7T5RQUZNDCaroTKjNKCj6mHtf46K+n/grZ5JwmD/dypzU60OJqhoF5natPCPfyO6+NDAstU6E54h5pv6Cd4JAQqjalmqXrQF3BTvUpLcIeJseIsEUp//NwCp6xG+CcdYaQajcETNFMh4ZRRx1EumFnhQJwSGBEtqFfvfurwZMyCaYMWa2rWWfjb0dwL5Fdg+wcA5b4WdGVBHI+NqL58oh6ywWMXV8JmejEjwIzC84JpSWCbCi43Wg9iyQKYsiHZh3tR2iTSQn9gTTCw/xU/4t38g6baSeoVPdglC7r3Lo6jDYCyNY9p8222SiUh0oIgvDd6h3hhxv2gmpEGEnAuQfC9F+NcdW6dYpLqDLcQ2UgW63dSgysJ9jMzAGgHnd7NTwLb2AjGSHmLaoCDqERI84CgYR45jw7eTfkPtlRishTIS/0lLHp3yVt/rRZmS8kbHORyJhh5/IXRvvq7rU3htyLsGggy4JpTO1yZ4IK3qTMGGtJ0OyskY2XKuX0mFJcWxToJmxmpvrpGOzt37O75k+btitERA1H7SL6BSItAh+FyWJlt+mR7rs7hJGXmkrHDh8UGxN/JM7iZh7xk9PdfM/wsRba0PbIWloui6fy5q4fCm2Gdfop3jub3kK4KU8ImrNATq0wWQ2x1UG9ziSTdFxUlRGxcAbRYGHjEq+zN/7ugELXufh1HbInrSAawHUTP7WBzu6BkSJFfhUsQQ3w/4sROYp0uH5MM3UCJEsW4wD3eMA4yY3xA1Z8ysbYhu4BhwwDfizFz500RLm019PXYFqj15T0Y2+sn9g1/DpS4rD5OqqxEJa6q47U5dtRhMd+CCY7ISH2N93tcpz/nhJxjeXdQyApZiMuwSAnysEHuXO6lN80pe8cYGqc6Dm/lcwj/cnvGI7LXwjaZ+41bs4hYN/ApBNf8j19tSRUu060sK0kl84Lb5SLdpHvcmETzSRNRnzA2Th+PwxnZbUjkmE7sk3jbwEW+bhGAwaU6WzM8yKjU2vdbPOEy+q5XVELxtlwJl+li3Vq8s10TGEouliPdeGPTp9Q+AtV00ZPUFhm2rCxdRA4cbwyODM18P7YwpzGn+3mz8uS5itosR9zOcQfbRSc5wDC6R3bXq5vsowM7VddQddOSpuOEe+oHvdpbk+7/giW8y8OQ1Uc1ilTVvZL7RiWsJDkLEcviQRJRrcGlIB5h5TDCN4pipw9mXaH/eEg6NHXv7Bk9JvB7zOZtgxsStg56e+zodudJ97EkURXWhgc8M9mhWy/+vGJHEFUwB4IquzvBDYdYK3in/oPJHqLXmZ5sfsNG6Vfm4+8Yj4loqtCUFORrJ80j+ns+zeDQcnfjuRSPAJuz4kAL3BXIx173zttnSHXxNArWad/GeqjowU4Db5NE/ZRr/BChA7Nwmo3jpB9G7x8lEHsvMjjaTLtW5dNDKopxugjUWExN2Kd0+h1cSzwyMCEa+B4+DolFQK6b/nK6qij94wpo66F41K47n2k/YpXn8/bTMYqnilqIeQLEC2AhzXRRM/QoMwpU6iX8DqTuPC6lWKNDHO0d6ASYWF9BoXqdHwX0YwqMYX6YNQR3EzBlVT3Y+g0vZpJPhrKLYPECiQ6NuDFi3Zjja6dhXnQEcEUxkgsHc69wBmAtJ0ZkSWF17S8FQ96CXhz5nzla1ghRAp2Z8SHQh9QnmR2Unee1j3pcwsHgNQIOnanVHDjKU9vGQRySrKDbQw5Ji9fbkjZmR/szhVVmKavTMXq54KxWkeDStSpH0W8Mz712SFaHH9/TPOR3XVBw+6k7EyGWGSU58kcZkSqOK4IC5W+L98084xj6IhnmhVfc/23W7YuIVQcNVdxO6MYNoYpPTtYc304zhRu8ToOdYbDHSo9v3iTzsyYlWDknRuEVVGpoCdCA3IyzAUnT04TlkTD82Np45HIRbAmra/6s64gfd1KshfvMvFar64x8lK3fu6Gtf1IDuqNSP3UX38a+Wy/clpy1sYc1BjrmAxYCdgzLor4yzi+dwjUyq0G+Rfh4u0i6cvKgxjWk/K+Eh8c8z9a5locNaXRA+VcX+b0DpTglD954LDGVYM77v2s8zwEMR/+Pgk1K8peasKdxvPa4gY9/p5LhWHY7B54BkrypPetYGFaTRKI0OsVzmTy+Pe++BZhmr43JPIdskTWe+JCfCGXlZ9AJ50duzO5bMdMT89h+5u06QPgmVdjgPZJ3lVgri4mKpLbmBnEhlaVdr9NoM4yBZWXRNAQdMpuecrPubXM+V9cW9mxXr3SiVycJg7V8Xwol6TIgNzBa+R/M8Gj8XOzXWj2C06kmgxsErZEpOcg8TcQ3Pl+6bx5YmjMkCLXemtamg8TFk/lxAV2wx5DVf+CtPWfrl/tWvhu8uVW5jZDfwcTs8jvtsFRONVgbFvhR7Ss33Dm0Vm2+s+CeB4HI6XWA2AIpWOAOhgyZaoqWALxGMVMJbOdM4RwAjvU0RXkFUuRojf+qzjzNxdL0/7Se0RktwDCpve4DFXhF5+bTO5uafoTUUPYZ1qyaCseE02a4pqNhwtsux7SfNWDEzl+YrA0R4QpJ5hOsl1CtT6noMpYNVZY8uiYOMlJQGzd0EA/lhbWOCdb9Mise2sOkwZ2FkN29KVij3HWNrmIRqThQLnqtKRSj/90ofmV9AxjT1vo5aWjuiEQq6Wcwp0wr0T8RI07ji7TT//Zrd39rOOWctgF0dVnjy4YvIPqzEbUnnUD2K7hXxMN7UdFG4xqBRRk/aMBZulNybGjG9tEZ6pL1+ZHAU0WkUYFqUO3gyDBe6SD79xTFA12q2Cw/EnvEg0wkwoOFDDnHUCEQ74hptc5D2rG9MjxWzMZFBk1lVD1Ya9ycB/2lehqVDE+Vew2ts9HikPZWBDLjdL5Bk7EUhFUNkhfFwwkPtx4VSLVTJNoWUx7skqmNX51AK1PTnfD1G28+l6jSgtQSdw8l3Lgb/A8ijFEmR/tRymSMoBU3ZZd4brWfu5oehcAoZvVeGhuAczZQU8ZC6J7sGObe7beQX+d6qDmfwbJGfHL/jg685z4DhmCK+PClQZYOkPj8gcpaaSlWkVODKfJDLRZ/umBeYiqnhpHtmLI8OqSvww01lna8b5x0gY4pOabEauiAI16eBKI+Mk8zdi1LWnpcmc/NdXIRB/653ungke/rlOopapnALoVd/VL2m392hUSqYf4jS0dsusEI3lfDZiVHwoxnXXDP6K37N4/EvTap86x7e/P4UkOP/+GxlYafhlgTiXM/d0p+QbqoTzq1ECYCLzQddhiJe+RrEyjpESEDfU7p/7uKBSlOAiMmZpvSq58WA44ZJ45xalv7BGo4jG71hiYcTs2pnQ3IXLNVZV1k5rhEtWDrbUI6Nt+JDXhqszlSL8qg/2H+ACnyisO4MglwhMkjESiXlB1Z1UE9/mFoJhFfozom/fZS3hiGkz22VIKm9pIAK7zjT22+j78Ee1KFYIYmTg1UJ1ZkN8vv6zi1pJ/LMY1vl2Z0idEiFlU5pxfG9UB0LKYshm49JXBxsbKmOu5ncmRHTKYumZBdZcwnK1OYZj6JItprX4NdCthCipEoiRAyvMbRAI/KaLXQYErLJ+ewMT9usop0S+N03mb9TqhslJkWE0mAXHiI9sSiF4X3qH715APYDLAtXuhJ9CzWhotLxTI4ZQFBSeQjYc+tUHYNWlhUf3NEeaiDATOtOqWZuQKiBcpKtz8rFPE0/kDxv9gixLVmY8L+kWCW+iLlZBi5zUREz96WB5UAKvLyd05UVMkkYzX97rH/MOpgfS/oahBLqKi6Z5KdP2SXVn4JNdwa1ESX1DaY5qZoTNE8m+A0QM13XkdFiq4VPJfYM7ykcuUGD2f8YK1pRNEDWFeMnuOfOCu6qGPflKG8n5syaQQdneoOnk9L3mp/xco5DA6EnySMs3Llcpa3s3CP3ciNSM7cfcfkRCG/Z3iCSQ6hBpmKFhaDA91rsotTVAPutvHI3jiupFJ0r5scMk8ThwCtK4hyNJc1vuiNvLHs5OSdwmpXt+FUbQ8b0BZ9oubd951djzjQIFvFOOsaKl9M2Fmob9nxJ/CTJ6wtrcQJrjrM9eeFRfeeP59cFCLb0HM1fnEWkGjez7jJCzbY/+7RwC58b7Gdg0dD+rYQNQCiaKcYpiyW1acCOGPgyFQzxvHdWMWMHrs4ouFHgDiUNDq54+0Gpbc81lA8yvxgH48G0Z7/feGY4QyoJ7lN4sRNnxJjlFAlZ0PJ96Ha/IXli66fwX69CmIjxHSDaXhkUpo1ijVvVW3ge9sO/IaQkperc3ule4XEaQEMJbyeYF683pGaopNQNsrt0UjZuIQ4huuqOU+K7fC6HXNrvJBS3JbAzeEEkU7sii7ztGIyb5l+AyZXN1c/j/eLVEaBCHu9kpWSRz/GGK38ur/wx9GesAgrXySCMga/va7zELL+hQYLb5z0yLRMfXiPGoCtQiu80xI+V5NbKGKwvexUS+CYqX67l5VFlW1er5fZac0T2+KzEQMTovC0vAy4CvY0SNDBwni3LRJd23IX2W8ObmXRtMgOWlSH7eGom91GjfUmQLDZn8VC75RQiy+CE/2+gMMAunkB6y4qU2D5pZo77eVHUOhMmr9BtmcFk72YKCt+Z5cSldrqS0TzbgqmiJLnI8VYfs5bYcJZg/uRx1uztzqdThn4ynNwZaFOOE84btJiTGJ2iBoPlebwxR3Z7qHtoyV/m0aZjFlRK2YPAWmpQ2qiUbJezno5dm/WUe+4c+9IFMgbBVqEIJyrZWdsK+VoWj/sgVmsuLMXxkfTHNg2yZa94aPVocXdejPaL2SJQdbx1NnjckHjNnRUqviPPmllbeaxtJGrDst1ms2V1cPTKxVgCYuwzOqamtXIyTwZD12HJiRAyvRIAWSSIPSi7NDOxz2MyjU3BvXn9MZtrsRV6LV85WSzkFbJslgZy5K2xVhNDQFxWfyw8MpEweX5vi7JkqqyffXmoJppEjm4izs/2MvT7MLfR4OntQLcRv0eOZXLgB3NLMHg3uS22GpkeQmR1mn1Jg/ejn3DFQKkd7dX9E6IIg6EcHfVOW9wY353wQPc4VanZWcx/5AG6J1TE8udbIzbQYaRPt5lry9tJpDPLeouL/lg+Bnp6u44JpvxzVeI9CFqYyHaixOKTQFzcRrbywJ8wxETY87oEcq0B7zAtjkQmjDBEsEtIYhAi/37ZClPgH1/oFXZIjbkzPFWtu0UN+pzQPjmYkFy98PcYgbM273o03yV92OBFtakM4CMo6oH7E/CzPKcwDrlZTyMnvh34/oeuuL8IM/F1NHgk2CBFBP29AjWX93nG8Zq95gvMm8Ma5QKiI7vkV5Soj9k+MD1IoBxaGY3giU3AyllXuhi5nD1cHvgtnpMoW3ucXUR3ydrHQ1j16GoCeJ2kpYCdI51ZCjt5YWWFomJUypUXnH2Il65Yv1sv5XMtozl8EbHfXE/hfyPW3Ky9m06yibVsBz1zGUC4mMVE5UJ6w4+LyTp40nqLzCeuQAUor/5i064IFMsA0+7zE7dmLWFhUDcr14jj+0AWCCG5gKVHMRLnSRHlxRziuRV6fovePjjCnx0vbQ1gaedOo0TAktRvgXzEN3mbvJ2JpjaD4RtoI60q9wZlk8mA9E51M9fK4eTBjngCxjxiGu0tANL/axMLmqOVdfTLkURweqwYsCa1XS39cK7/DTTDDhSgghqyvaF3DgtTpA+3KS3hK6PKDueWNbqI8hFZ\n</div>\n<script src=\"/lib/crypto-js.js\"></script><script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"文章被加密，请输入密码","more":"文章被加密，请输入密码","origin":"<h2 id=\"个人信息\"><a class=\"markdownIt-Anchor\" href=\"#个人信息\"></a> 个人信息</h2>\n<ul>\n<li><strong>罗泽奇 / 男 / 1996-06-04</strong></li>\n<li><strong>手机&amp;微信：</strong> 18122630624</li>\n<li><strong>Email：</strong> <a href=\"mailto:numb_fish@foxmail.com\">numb_fish@foxmail.com</a></li>\n<li><strong>QQ：</strong> 957441629</li>\n<li>**Github：**<a href=\"https://github.com/NumbFish-Luo\">https://github.com/NumbFish-Luo</a></li>\n<li>**Gitee：**<a href=\"https://gitee.com/NumbFish-Luo\">https://gitee.com/NumbFish-Luo</a></li>\n<li>**CSDN：**<a href=\"https://blog.csdn.net/qq_35576794\">https://blog.csdn.net/qq_35576794</a></li>\n<li><strong>个人网站</strong>：<a href=\"https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/\">https://numbfish-0g5ok9eq2a9e80fc-1306659420.ap-shanghai.app.tcloudbase.com/</a></li>\n<li><strong>期望职位：</strong> 游戏客户端开发（Unity）</li>\n</ul>\n<h2 id=\"教育水平\"><a class=\"markdownIt-Anchor\" href=\"#教育水平\"></a> 教育水平</h2>\n<ul>\n<li><strong>学校&amp;专业：</strong> 北京理工大学珠海学院，机械电子工程，2015级，2019届本科优秀毕业生</li>\n<li><strong>在校所获荣誉：</strong>\n<ul>\n<li>\n<p>每学期均获得优秀奖学金，每学期均参加校内算法比赛并获奖</p>\n</li>\n<li>\n<p>获得一项专利：毕设作品，双臂解魔方机器人，该项目主要以C++进行开发。在此专利项目中所有程序设计均由本人实现</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工作经历\"><a class=\"markdownIt-Anchor\" href=\"#工作经历\"></a> 工作经历</h2>\n<h3 id=\"2020年11月-~-2021年5月北京冰狮科技有限公司\"><a class=\"markdownIt-Anchor\" href=\"#2020年11月-~-2021年5月北京冰狮科技有限公司\"></a> 2020年11月 ~ 2021年5月：北京冰狮科技有限公司</h3>\n<ul>\n<li>\n<p>所属部门：技术部</p>\n</li>\n<li>\n<p>工作岗位：Cocos Creator游戏客户端开发</p>\n</li>\n<li>\n<p>工作内容：《我飞刀玩得贼6》超休闲项目性能优化，《我脸贼大》超休闲项目开发，《掉落漫画世界》女性向AVG项目开发，《救救大明星》女性向AVG项目QQ小游戏渠道接入。</p>\n</li>\n</ul>\n<h3 id=\"2019年7月-~-2020年8月珠海华夏云联技术有限公司\"><a class=\"markdownIt-Anchor\" href=\"#2019年7月-~-2020年8月珠海华夏云联技术有限公司\"></a> 2019年7月 ~ 2020年8月：珠海华夏云联技术有限公司</h3>\n<ul>\n<li>\n<p>所属部门：研发部</p>\n</li>\n<li>\n<p>工作岗位：嵌入式软件开发工程师</p>\n</li>\n<li>\n<p>工作内容：对旧的新能源汽车充电桩进行维护和优化；根据提供的通讯协议文档，给设备接入新的后台，并根据后台信息，分析远程设备状态并进行相应处理；研发创新结构的充电桩产品等。</p>\n</li>\n</ul>\n<h2 id=\"技能清单\"><a class=\"markdownIt-Anchor\" href=\"#技能清单\"></a> 技能清单</h2>\n<ul>\n<li>\n<p><strong>强大的快速学习能力：</strong></p>\n<ul>\n<li>\n<p>从大一开始，凭个人兴趣，编程全靠自学。毕业时已经可以有独立设计全套毕设软件部分的能力，所做毕设被评为优秀毕设</p>\n</li>\n<li>\n<p>3天内学完R语言，并辅助朋友完成其毕业设计 （分析表格，提取主成分和主因子等）</p>\n</li>\n<li>\n<p>1个月内学完Javascript，Typescript，以及Cocos Creator游戏引擎，并无障碍转行，由嵌入式开发，转游戏开发</p>\n</li>\n<li>\n<p>博览群书，如 《C#入门经典》、《Javascript忍者秘籍》、《设计模式与游戏完美开发》、《GoF》、《大话设计模式》、《游戏开发的数学和物理》、《Effective C++》、《More Effective C++》、《STL源码剖析》、《C专家编程》…</p>\n</li>\n<li>\n<p>有把握用最快的速度去熟悉一个旧项目，然后学习其中的写法，应用于下一个新项目</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>具有本专业的强大的数学和物理分析能力：</strong></p>\n<ul>\n<li>本科毕设计算分析机械手夹持物品又快速又平稳旋转的公式，并将计算结果应用于程序设计之上，获得了很不错的效果</li>\n<li>花两个月学习理解了SLAM （同步定位与地图绘制） 的数学原理</li>\n<li>用C语言写了一个RGB转HSV线性插值的简易色表生成工具：<a href=\"https://github.com/NumbFish-Luo/ColorLab\">https://github.com/NumbFish-Luo/ColorLab</a></li>\n</ul>\n</li>\n<li>\n<p><strong>习得多种编程语言：</strong> C，C++，C#，Javascript，Typescript，Python，R……</p>\n</li>\n<li>\n<p><strong>游戏引擎：</strong> Unity3D，Cocos Creator</p>\n</li>\n<li>\n<p>**架构设计：**了解设计模式，了解如何设计优雅的架构，在珠海华夏云联工作时，修改了原本杂乱无章的程序，设计了新的架构来整理，大大提高了程序可读性和运行效率</p>\n</li>\n<li>\n<p><strong>算法能力：</strong></p>\n<ul>\n<li>在大学时，每学期都有参加校内算法比赛，并获得不错的名次</li>\n<li>做了一个使用图论的无向图原理来执行充电需求分配的项目</li>\n</ul>\n</li>\n<li>\n<p><strong>其他技能：</strong></p>\n<ul>\n<li>自学过像素画绘画，能与美术小伙伴无障碍沟通</li>\n<li>自学过乐理知识</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"游戏项目比赛经历\"><a class=\"markdownIt-Anchor\" href=\"#游戏项目比赛经历\"></a> 游戏项目/比赛经历</h2>\n<ul>\n<li>\n<p><strong>多次Game Jam和游戏开发比赛经历：</strong></p>\n<ul>\n<li>2022 GGJ，上海晶核站，LMTSS小队桌游作品《二律背反》，<a href=\"https://www.bilibili.com/video/BV1SR4y1K7Fm\">https://www.bilibili.com/video/BV1SR4y1K7Fm</a></li>\n<li>2021 网易MINI-GAME挑战赛，负责做《戏剧之王》的网络协议设计，<a href=\"https://www.bilibili.com/video/BV1Lr4y117yv\">https://www.bilibili.com/video/BV1Lr4y117yv</a></li>\n<li>2021 益游未尽，LMTSS小队非对称对抗游戏作品《气候护卫队》，进入前3名，获得最佳玩法奖，<a href=\"https://project-gc.itch.io/climategardian\">https://project-gc.itch.io/climategardian</a></li>\n<li>2021 CGJ，上海椰岛站，LMTSS小队2D横板动作游戏作品《黑we钩》，获得最佳人气奖，<a href=\"https://www.bilibili.com/video/BV1uM4y1M771\">https://www.bilibili.com/video/BV1uM4y1M771</a></li>\n<li>2019 CGJ，广州，LEVEL_UP小队作品，《What I Want》： <a href=\"https://www.youxibd.com/gamejam/detail/174\">https://www.youxibd.com/gamejam/detail/174</a></li>\n<li>2019 网易MINI-GAME挑战赛，LEVEL_UP小队作品，《心之门》： <a href=\"http://game.academy.163.com/activity/miniGame/2019/showcase/detail?id=129\">http://game.academy.163.com/activity/miniGame/2019/showcase/detail?id=129</a></li>\n</ul>\n</li>\n<li>\n<p><strong>工作项目经历：</strong></p>\n<ul>\n<li>超休闲：《我飞刀玩得贼6》项目性能优化，《我脸贼大》项目开发和优化</li>\n<li>女性向AVG：《掉落漫画世界》项目开发，该项目包含角色填色换装系统。以及《救救大明星》项目QQ小游戏渠道接入</li>\n</ul>\n</li>\n<li>\n<p><strong>其他项目经历：</strong></p>\n<ul>\n<li>恐怖叙事解谜游戏《熔炉》</li>\n<li>横板射击小游戏《Little war》</li>\n<li>类银河恶魔城游戏《Project01》</li>\n</ul>\n</li>\n</ul>\n","encrypt":true,"template":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<div id=\"hbe-security\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" class=\"hbe-form-control\" id=\"pass\" placeholder=\"文章被加密，请输入密码\" />\n    <label for=\"pass\">文章被加密，请输入密码</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n</div>\n<div id=\"decryptionError\" style=\"display: none;\">Incorrect Password!</div>\n<div id=\"noContentError\" style=\"display: none;\">No content to display!</div>\n<div id=\"encrypt-blog\" style=\"display:none\">\n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\n</div>\n","decryptionError":"Incorrect Password!","noContentError":"No content to display!"},{"title":"URP自定义后处理特效第二篇：水波扭曲","date":"2022-02-24T06:30:00.000Z","toc":true,"banner_img":"/img/Water/Water.png","banner_img_set":"/img/Water/Water.png","_content":"\n# 一、效果展示\n\n![](/img/Water/Water.gif)\n\n# 二、思路\n\n## 2.1 确定参数\n\n### 2.1.1 扭曲图与相关参数\n\n![](/img/Water/Noise.png)\n\n使用的扭曲噪声图是这张，用其R和G通道来做主贴图扭曲的参数，计算公式定为：```float2 mainTexOffset = -1 * (mapColor * _Power - (_Power * 0.5))```，其中```mapColor```是取自于扭曲噪声图的颜色，取值位置随时间改变，改变的规则为：```float2 mapOffset = float2(frac(_Time.y * _DistortionSpeed), 0)```，```_DistortionSpeed```为扭曲图x轴移动速度，```_Power```为扭曲强度\n\n### 2.1.2 遮罩\n\n如果不添加遮罩，那么扭曲是对整张图进行扭曲的，于是我们需要有一张遮罩图，黑色为无扭曲效果，白色为有扭曲效果，而灰色则表示在这两者之间。为了达到水面分界线清晰的效果，我们需要对其进行一个step操作，颜色亮度低于0.5的视为黑色，否则视为白色，于是有此公式：```float mask = step(0.5, tex2D(_Mask, i.uv))```，```mask```的结果只有0和1两种\n\n### 2.1.3 水的颜色\n\n对于```mask```为0的地方，不进行改色，而对于```mask```为1的地方则需要添加水的颜色，于是颜色的计算可以这样写：```float4 finalColor = (mainTexColor * !mask + mainTexColor + _Color * mask) * 0.5```，其中```mainTexColor```为原本贴图的颜色，```_Color```为指定的水的颜色\n\n### 2.1.4 水面正弦波\n\n如果只完成了上述操作，那么只能创造出一个矩形的水区域。为了添加水面波动，我们需要加上一个正弦波。公式我们定义为：```float2 waveUv = i.uv + float2(0, _Peak * (sin(_WaveFrequency * i.uv.x + waveOffset) - 1))```，其中```_Peak```为正弦波峰值，```_WaveFrequency```为正弦波频率，```waveOffset```为正弦波偏移量，其值随时间变化，公式为：```float waveOffset = _Time.y * _WaveSpeed```，其中```_WaveSpeed```为正弦波移动速度\n\n### 2.1.5 Shader代码\n\n综上，我们的最终代码是这样的：\n\n```hlsl\nShader \"Custom/Water\" {\n    Properties {\n        _MainTex(\"Main Texture\", 2D) = \"\" {}\n        _Map(\"Distortion Map\", 2D) = \"\" {}\n        _Mask(\"Mask\", 2D) = \"Black\" {}\n        _Power(\"Distortion Power\", float) = 0\n        _DistortionSpeed(\"Distortion Speed\", float) = 0.25\n        _WaveSpeed(\"wave Speed\", float) = 1.5\n        _Color(\"Color\", color) = (0, 0, 0, 0)\n        _Peak(\"Peak\", float) = 0.01\n        _WaveFrequency(\"Wave Frequency\", float) = 15\n        _Enable(\"Enable\", float) = 0\n    }\n\n    SubShader {\n        Tags {\"Queue\" = \"Geometry\" \"RenderType\" = \"Opaque\"}\n\n        Pass {\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            #pragma target 2.0\n            #pragma fragment frag\n            #pragma vertex vert\n            #include \"UnityCG.cginc\"\n\n            sampler2D _MainTex;\n            sampler2D _Map;\n            sampler2D _Mask;\n            float _Scale;\n            float _Power;\n            float _DistortionSpeed;\n            float _WaveSpeed;\n            float4 _Color;\n            float _Peak;\n            float _WaveFrequency;\n            float _Enable;\n\n            struct AppData {\n                float4 vertex : POSITION;\n                half2 texcoord : TEXCOORD0;\n            };\n\n            struct VertexToFragment {\n                float4 pos : POSITION;\n                half2 uv : TEXCOORD0;\n            };\n\n            VertexToFragment vert(AppData v) {\n                VertexToFragment o;\n                o.pos = UnityObjectToClipPos(v.vertex);\n                o.uv = v.texcoord.xy;\n                return o;\n            }\n\n            float WhenNeq(float x, float y) {\n                return abs(sign(x - y));\n            }\n\n            fixed4 frag(VertexToFragment i) : COLOR {\n                // 噪声图偏移量，根据时间偏移，只偏移x\n                float2 mapOffset = float2(frac(_Time.y * _DistortionSpeed), 0);\n                // 采样处于该uv下的噪声图颜色\n                float4 mapColor = tex2D(_Map, frac(i.uv + mapOffset));\n                // 主贴图偏移量\n                float2 mainTexOffset = _Enable * (-1 * (mapColor * _Power - (_Power * 0.5)));\n                // 波浪uv，根据时间偏移，只偏移y\n                float waveOffset = _Time.y * _WaveSpeed;\n                float2 waveUv = i.uv + float2(0, _Peak * (sin(_WaveFrequency * i.uv.x + waveOffset) - 1));\n                // 波浪遮罩\n                float waveMask = step(0.5, tex2D(_Mask, waveUv));\n                // 遮罩\n                float mask = step(0.5, tex2D(_Mask, i.uv));\n                mask = max(waveMask, mask);\n                // 主贴图偏移\n                mainTexOffset = i.uv + mainTexOffset * mask;\n                // 主贴图颜色\n                float4 mainTexColor = tex2D(_MainTex, mainTexOffset);\n                // 最终颜色为两颜色相加后除以2所得\n                // 对于遮罩范围外的颜色，为(mainTexColor * (1 + 1 + 0) + _Color * 0 * 0) * 0.5 = mainTexColor;\n                // 对于遮罩范围内的颜色，为(mainTexColor * (1 + 0 + 0) + _Color * 1 * 1) = (mainTexColor + _Color) * 0.5\n                return (mainTexColor * (1 + !mask + !_Enable) + _Color * mask * _Enable) * 0.5;\n            }\n            ENDCG\n        }\n    }\n}\n```\n\n## 2.2 遮罩计算与优化\n\n另外我们还需要有水波扭曲范围的计算，代码为：\n\n```csharp\npublic class Water : MonoBehaviour {\n    [SerializeField] private BoxCollider2D boxCollider2D;\n    public Vector2 LeftBottom { get => (Vector2)transform.position + boxCollider2D.offset - 0.5f * boxCollider2D.size; }\n    public Vector2 RightTop { get => (Vector2)transform.position + boxCollider2D.offset + 0.5f * boxCollider2D.size; }\n\n    private void Start() {\n        WaterManager.Instance.AddItem(GetHashCode(), this);\n    }\n}\n```\n\n其返回碰撞盒的左下角与右上角坐标，以得到碰撞盒的范围\n\n最后我们有一个统一管理所有Water组件的WaterManager，在这个管理器中将统一计算出所有Water组件碰撞范围，并绘制遮罩图。注意，为了性能优化，我们需要缩小遮罩图大小，我这里给的缩小值为0.1，即缩小了整整10倍，但对其最终效果的影响几乎没有！下面是管理器的具体代码：\n\n```csharp\npublic class WaterManager : MonoSingleton<WaterManager> {\n    private Dictionary<int, Water> items = new Dictionary<int, Water>(); // key = hashCode\n    private Material material = null;\n    private Texture2D mask = null;\n    [SerializeField] private float scale = 0.05f;\n    private bool enable = false;\n    public bool BoolEnable { get => enable; }\n    public float FloatEnable { get => enable ? 1 : 0; }\n\n    public void AddItem(int hashCode, Water item) {\n        items.Add(hashCode, item);\n    }\n\n    public void RemoveItem(int hashCode) {\n        items.Remove(hashCode);\n    }\n\n    private void FillBlackToMask() {\n        for (int y = 0; y < mask.height; ++y) {\n            for (int x = 0; x < mask.width; ++x) {\n                mask.SetPixel(x, y, Color.black);\n            }\n        }\n        mask.Apply();\n    }\n\n    public void SetMaterial(Material material) {\n        this.material = material;\n        mask = new Texture2D((int)(Screen.width * scale), (int)(Screen.height * scale));\n        FillBlackToMask();\n    }\n\n    private void FillWhiteToMask(Vector2 leftBottom, Vector2 rightTop) {\n        leftBottom = Camera.main.WorldToScreenPoint(leftBottom) * scale;\n        rightTop = Camera.main.WorldToScreenPoint(rightTop) * scale;\n        int minX = (int)leftBottom.x;\n        minX = (minX < 0) ? 0 : minX;\n        int maxX = (int)rightTop.x;\n        maxX = (maxX > mask.width) ? mask.width : maxX;\n        int minY = (int)leftBottom.y;\n        minY = (minY < 0) ? 0 : minY;\n        int maxY = (int)rightTop.y;\n        maxY = (maxY > mask.height) ? mask.height : maxY;\n        for (int y = minY; y < maxY; ++y) {\n            for (int x = minX; x < maxX; ++x) {\n                mask.SetPixel(x, y, Color.white);\n            }\n        }\n    }\n\n    private void Update() {\n        if (!material) {\n            return;\n        }\n        FillBlackToMask();\n        enable = false;\n        List<int> nullKey = new List<int>();\n        foreach (KeyValuePair<int, Water> i in items) {\n            if (i.Value == null) {\n                nullKey.Add(i.Key);\n            } else {\n                enable = true;\n                FillWhiteToMask(i.Value.LeftBottom, i.Value.RightTop);\n            }\n        }\n        foreach (int n in nullKey) {\n            items.Remove(n);\n        }\n        if (enable) {\n            mask.Apply();\n            material.SetTexture(\"_Mask\", mask);\n        }\n    }\n}\n```","source":"_posts/Water.md","raw":"---\ntitle: URP自定义后处理特效第二篇：水波扭曲\ndate: 2022-02-24 14:30:00\ntoc: true\ntags:\n- Unity\n- URP\n- PostEffect\ncategories:\n- Unity\nbanner_img: /img/Water/Water.png\nbanner_img_set: /img/Water/Water.png\n---\n\n# 一、效果展示\n\n![](/img/Water/Water.gif)\n\n# 二、思路\n\n## 2.1 确定参数\n\n### 2.1.1 扭曲图与相关参数\n\n![](/img/Water/Noise.png)\n\n使用的扭曲噪声图是这张，用其R和G通道来做主贴图扭曲的参数，计算公式定为：```float2 mainTexOffset = -1 * (mapColor * _Power - (_Power * 0.5))```，其中```mapColor```是取自于扭曲噪声图的颜色，取值位置随时间改变，改变的规则为：```float2 mapOffset = float2(frac(_Time.y * _DistortionSpeed), 0)```，```_DistortionSpeed```为扭曲图x轴移动速度，```_Power```为扭曲强度\n\n### 2.1.2 遮罩\n\n如果不添加遮罩，那么扭曲是对整张图进行扭曲的，于是我们需要有一张遮罩图，黑色为无扭曲效果，白色为有扭曲效果，而灰色则表示在这两者之间。为了达到水面分界线清晰的效果，我们需要对其进行一个step操作，颜色亮度低于0.5的视为黑色，否则视为白色，于是有此公式：```float mask = step(0.5, tex2D(_Mask, i.uv))```，```mask```的结果只有0和1两种\n\n### 2.1.3 水的颜色\n\n对于```mask```为0的地方，不进行改色，而对于```mask```为1的地方则需要添加水的颜色，于是颜色的计算可以这样写：```float4 finalColor = (mainTexColor * !mask + mainTexColor + _Color * mask) * 0.5```，其中```mainTexColor```为原本贴图的颜色，```_Color```为指定的水的颜色\n\n### 2.1.4 水面正弦波\n\n如果只完成了上述操作，那么只能创造出一个矩形的水区域。为了添加水面波动，我们需要加上一个正弦波。公式我们定义为：```float2 waveUv = i.uv + float2(0, _Peak * (sin(_WaveFrequency * i.uv.x + waveOffset) - 1))```，其中```_Peak```为正弦波峰值，```_WaveFrequency```为正弦波频率，```waveOffset```为正弦波偏移量，其值随时间变化，公式为：```float waveOffset = _Time.y * _WaveSpeed```，其中```_WaveSpeed```为正弦波移动速度\n\n### 2.1.5 Shader代码\n\n综上，我们的最终代码是这样的：\n\n```hlsl\nShader \"Custom/Water\" {\n    Properties {\n        _MainTex(\"Main Texture\", 2D) = \"\" {}\n        _Map(\"Distortion Map\", 2D) = \"\" {}\n        _Mask(\"Mask\", 2D) = \"Black\" {}\n        _Power(\"Distortion Power\", float) = 0\n        _DistortionSpeed(\"Distortion Speed\", float) = 0.25\n        _WaveSpeed(\"wave Speed\", float) = 1.5\n        _Color(\"Color\", color) = (0, 0, 0, 0)\n        _Peak(\"Peak\", float) = 0.01\n        _WaveFrequency(\"Wave Frequency\", float) = 15\n        _Enable(\"Enable\", float) = 0\n    }\n\n    SubShader {\n        Tags {\"Queue\" = \"Geometry\" \"RenderType\" = \"Opaque\"}\n\n        Pass {\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            #pragma target 2.0\n            #pragma fragment frag\n            #pragma vertex vert\n            #include \"UnityCG.cginc\"\n\n            sampler2D _MainTex;\n            sampler2D _Map;\n            sampler2D _Mask;\n            float _Scale;\n            float _Power;\n            float _DistortionSpeed;\n            float _WaveSpeed;\n            float4 _Color;\n            float _Peak;\n            float _WaveFrequency;\n            float _Enable;\n\n            struct AppData {\n                float4 vertex : POSITION;\n                half2 texcoord : TEXCOORD0;\n            };\n\n            struct VertexToFragment {\n                float4 pos : POSITION;\n                half2 uv : TEXCOORD0;\n            };\n\n            VertexToFragment vert(AppData v) {\n                VertexToFragment o;\n                o.pos = UnityObjectToClipPos(v.vertex);\n                o.uv = v.texcoord.xy;\n                return o;\n            }\n\n            float WhenNeq(float x, float y) {\n                return abs(sign(x - y));\n            }\n\n            fixed4 frag(VertexToFragment i) : COLOR {\n                // 噪声图偏移量，根据时间偏移，只偏移x\n                float2 mapOffset = float2(frac(_Time.y * _DistortionSpeed), 0);\n                // 采样处于该uv下的噪声图颜色\n                float4 mapColor = tex2D(_Map, frac(i.uv + mapOffset));\n                // 主贴图偏移量\n                float2 mainTexOffset = _Enable * (-1 * (mapColor * _Power - (_Power * 0.5)));\n                // 波浪uv，根据时间偏移，只偏移y\n                float waveOffset = _Time.y * _WaveSpeed;\n                float2 waveUv = i.uv + float2(0, _Peak * (sin(_WaveFrequency * i.uv.x + waveOffset) - 1));\n                // 波浪遮罩\n                float waveMask = step(0.5, tex2D(_Mask, waveUv));\n                // 遮罩\n                float mask = step(0.5, tex2D(_Mask, i.uv));\n                mask = max(waveMask, mask);\n                // 主贴图偏移\n                mainTexOffset = i.uv + mainTexOffset * mask;\n                // 主贴图颜色\n                float4 mainTexColor = tex2D(_MainTex, mainTexOffset);\n                // 最终颜色为两颜色相加后除以2所得\n                // 对于遮罩范围外的颜色，为(mainTexColor * (1 + 1 + 0) + _Color * 0 * 0) * 0.5 = mainTexColor;\n                // 对于遮罩范围内的颜色，为(mainTexColor * (1 + 0 + 0) + _Color * 1 * 1) = (mainTexColor + _Color) * 0.5\n                return (mainTexColor * (1 + !mask + !_Enable) + _Color * mask * _Enable) * 0.5;\n            }\n            ENDCG\n        }\n    }\n}\n```\n\n## 2.2 遮罩计算与优化\n\n另外我们还需要有水波扭曲范围的计算，代码为：\n\n```csharp\npublic class Water : MonoBehaviour {\n    [SerializeField] private BoxCollider2D boxCollider2D;\n    public Vector2 LeftBottom { get => (Vector2)transform.position + boxCollider2D.offset - 0.5f * boxCollider2D.size; }\n    public Vector2 RightTop { get => (Vector2)transform.position + boxCollider2D.offset + 0.5f * boxCollider2D.size; }\n\n    private void Start() {\n        WaterManager.Instance.AddItem(GetHashCode(), this);\n    }\n}\n```\n\n其返回碰撞盒的左下角与右上角坐标，以得到碰撞盒的范围\n\n最后我们有一个统一管理所有Water组件的WaterManager，在这个管理器中将统一计算出所有Water组件碰撞范围，并绘制遮罩图。注意，为了性能优化，我们需要缩小遮罩图大小，我这里给的缩小值为0.1，即缩小了整整10倍，但对其最终效果的影响几乎没有！下面是管理器的具体代码：\n\n```csharp\npublic class WaterManager : MonoSingleton<WaterManager> {\n    private Dictionary<int, Water> items = new Dictionary<int, Water>(); // key = hashCode\n    private Material material = null;\n    private Texture2D mask = null;\n    [SerializeField] private float scale = 0.05f;\n    private bool enable = false;\n    public bool BoolEnable { get => enable; }\n    public float FloatEnable { get => enable ? 1 : 0; }\n\n    public void AddItem(int hashCode, Water item) {\n        items.Add(hashCode, item);\n    }\n\n    public void RemoveItem(int hashCode) {\n        items.Remove(hashCode);\n    }\n\n    private void FillBlackToMask() {\n        for (int y = 0; y < mask.height; ++y) {\n            for (int x = 0; x < mask.width; ++x) {\n                mask.SetPixel(x, y, Color.black);\n            }\n        }\n        mask.Apply();\n    }\n\n    public void SetMaterial(Material material) {\n        this.material = material;\n        mask = new Texture2D((int)(Screen.width * scale), (int)(Screen.height * scale));\n        FillBlackToMask();\n    }\n\n    private void FillWhiteToMask(Vector2 leftBottom, Vector2 rightTop) {\n        leftBottom = Camera.main.WorldToScreenPoint(leftBottom) * scale;\n        rightTop = Camera.main.WorldToScreenPoint(rightTop) * scale;\n        int minX = (int)leftBottom.x;\n        minX = (minX < 0) ? 0 : minX;\n        int maxX = (int)rightTop.x;\n        maxX = (maxX > mask.width) ? mask.width : maxX;\n        int minY = (int)leftBottom.y;\n        minY = (minY < 0) ? 0 : minY;\n        int maxY = (int)rightTop.y;\n        maxY = (maxY > mask.height) ? mask.height : maxY;\n        for (int y = minY; y < maxY; ++y) {\n            for (int x = minX; x < maxX; ++x) {\n                mask.SetPixel(x, y, Color.white);\n            }\n        }\n    }\n\n    private void Update() {\n        if (!material) {\n            return;\n        }\n        FillBlackToMask();\n        enable = false;\n        List<int> nullKey = new List<int>();\n        foreach (KeyValuePair<int, Water> i in items) {\n            if (i.Value == null) {\n                nullKey.Add(i.Key);\n            } else {\n                enable = true;\n                FillWhiteToMask(i.Value.LeftBottom, i.Value.RightTop);\n            }\n        }\n        foreach (int n in nullKey) {\n            items.Remove(n);\n        }\n        if (enable) {\n            mask.Apply();\n            material.SetTexture(\"_Mask\", mask);\n        }\n    }\n}\n```","slug":"Water","published":1,"updated":"2022-02-24T06:28:31.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4s001ljowzcaoidggw","content":"<h1 id=\"一-效果展示\"><a class=\"markdownIt-Anchor\" href=\"#一-效果展示\"></a> 一、效果展示</h1>\n<p><img src=\"/img/Water/Water.gif\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Water/Water.gif\" class=\"lozad post-image\"></p>\n<h1 id=\"二-思路\"><a class=\"markdownIt-Anchor\" href=\"#二-思路\"></a> 二、思路</h1>\n<h2 id=\"21-确定参数\"><a class=\"markdownIt-Anchor\" href=\"#21-确定参数\"></a> 2.1 确定参数</h2>\n<h3 id=\"211-扭曲图与相关参数\"><a class=\"markdownIt-Anchor\" href=\"#211-扭曲图与相关参数\"></a> 2.1.1 扭曲图与相关参数</h3>\n<p><img src=\"/img/Water/Noise.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/Water/Noise.png\" class=\"lozad post-image\"></p>\n<p>使用的扭曲噪声图是这张，用其R和G通道来做主贴图扭曲的参数，计算公式定为：<code>float2 mainTexOffset = -1 * (mapColor * _Power - (_Power * 0.5))</code>，其中<code>mapColor</code>是取自于扭曲噪声图的颜色，取值位置随时间改变，改变的规则为：<code>float2 mapOffset = float2(frac(_Time.y * _DistortionSpeed), 0)</code>，<code>_DistortionSpeed</code>为扭曲图x轴移动速度，<code>_Power</code>为扭曲强度</p>\n<h3 id=\"212-遮罩\"><a class=\"markdownIt-Anchor\" href=\"#212-遮罩\"></a> 2.1.2 遮罩</h3>\n<p>如果不添加遮罩，那么扭曲是对整张图进行扭曲的，于是我们需要有一张遮罩图，黑色为无扭曲效果，白色为有扭曲效果，而灰色则表示在这两者之间。为了达到水面分界线清晰的效果，我们需要对其进行一个step操作，颜色亮度低于0.5的视为黑色，否则视为白色，于是有此公式：<code>float mask = step(0.5, tex2D(_Mask, i.uv))</code>，<code>mask</code>的结果只有0和1两种</p>\n<h3 id=\"213-水的颜色\"><a class=\"markdownIt-Anchor\" href=\"#213-水的颜色\"></a> 2.1.3 水的颜色</h3>\n<p>对于<code>mask</code>为0的地方，不进行改色，而对于<code>mask</code>为1的地方则需要添加水的颜色，于是颜色的计算可以这样写：<code>float4 finalColor = (mainTexColor * !mask + mainTexColor + _Color * mask) * 0.5</code>，其中<code>mainTexColor</code>为原本贴图的颜色，<code>_Color</code>为指定的水的颜色</p>\n<h3 id=\"214-水面正弦波\"><a class=\"markdownIt-Anchor\" href=\"#214-水面正弦波\"></a> 2.1.4 水面正弦波</h3>\n<p>如果只完成了上述操作，那么只能创造出一个矩形的水区域。为了添加水面波动，我们需要加上一个正弦波。公式我们定义为：<code>float2 waveUv = i.uv + float2(0, _Peak * (sin(_WaveFrequency * i.uv.x + waveOffset) - 1))</code>，其中<code>_Peak</code>为正弦波峰值，<code>_WaveFrequency</code>为正弦波频率，<code>waveOffset</code>为正弦波偏移量，其值随时间变化，公式为：<code>float waveOffset = _Time.y * _WaveSpeed</code>，其中<code>_WaveSpeed</code>为正弦波移动速度</p>\n<h3 id=\"215-shader代码\"><a class=\"markdownIt-Anchor\" href=\"#215-shader代码\"></a> 2.1.5 Shader代码</h3>\n<p>综上，我们的最终代码是这样的：</p>\n<pre class=\"line-numbers language-hlsl\" data-language=\"hlsl\"><code class=\"language-hlsl\">Shader <span class=\"token string\">\"Custom/Water\"</span> <span class=\"token punctuation\">&#123;</span>\n    Properties <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_MainTex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Texture\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_Map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Distortion Map\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_Mask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mask\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Black\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_Power</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Distortion Power\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token function\">_DistortionSpeed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Distortion Speed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span>\n        <span class=\"token function\">_WaveSpeed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wave Speed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span>\n        <span class=\"token function\">_Color</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_Peak</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peak\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n        <span class=\"token function\">_WaveFrequency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wave Frequency\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n        <span class=\"token function\">_Enable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enable\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    SubShader <span class=\"token punctuation\">&#123;</span>\n        Tags <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Queue\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Geometry\"</span> <span class=\"token string\">\"RenderType\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Opaque\"</span><span class=\"token punctuation\">&#125;</span>\n\n        Pass <span class=\"token punctuation\">&#123;</span>\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">target <span class=\"token number\">2.0</span></span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n            sampler2D _Map<span class=\"token punctuation\">;</span>\n            sampler2D _Mask<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Scale<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Power<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _DistortionSpeed<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _WaveSpeed<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float4</span> _Color<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Peak<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _WaveFrequency<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Enable<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">AppData</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexToFragment</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> pos <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            VertexToFragment <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>AppData v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                VertexToFragment o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">float</span> <span class=\"token function\">WhenNeq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>VertexToFragment i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> COLOR <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 噪声图偏移量，根据时间偏移，只偏移x</span>\n                <span class=\"token keyword\">float2</span> mapOffset <span class=\"token operator\">=</span> <span class=\"token keyword\">float2</span><span class=\"token punctuation\">(</span><span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>_Time<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> _DistortionSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 采样处于该uv下的噪声图颜色</span>\n                <span class=\"token keyword\">float4</span> mapColor <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_Map<span class=\"token punctuation\">,</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">+</span> mapOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 主贴图偏移量</span>\n                <span class=\"token keyword\">float2</span> mainTexOffset <span class=\"token operator\">=</span> _Enable <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>mapColor <span class=\"token operator\">*</span> _Power <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>_Power <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 波浪uv，根据时间偏移，只偏移y</span>\n                <span class=\"token keyword\">float</span> waveOffset <span class=\"token operator\">=</span> _Time<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> _WaveSpeed<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float2</span> waveUv <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">+</span> <span class=\"token keyword\">float2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _Peak <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>_WaveFrequency <span class=\"token operator\">*</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> waveOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 波浪遮罩</span>\n                <span class=\"token keyword\">float</span> waveMask <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_Mask<span class=\"token punctuation\">,</span> waveUv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 遮罩</span>\n                <span class=\"token keyword\">float</span> mask <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_Mask<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mask <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>waveMask<span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 主贴图偏移</span>\n                mainTexOffset <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">+</span> mainTexOffset <span class=\"token operator\">*</span> mask<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 主贴图颜色</span>\n                <span class=\"token keyword\">float4</span> mainTexColor <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> mainTexOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 最终颜色为两颜色相加后除以2所得</span>\n                <span class=\"token comment\">// 对于遮罩范围外的颜色，为(mainTexColor * (1 + 1 + 0) + _Color * 0 * 0) * 0.5 = mainTexColor;</span>\n                <span class=\"token comment\">// 对于遮罩范围内的颜色，为(mainTexColor * (1 + 0 + 0) + _Color * 1 * 1) = (mainTexColor + _Color) * 0.5</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mainTexColor <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">!</span>mask <span class=\"token operator\">+</span> <span class=\"token operator\">!</span>_Enable<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> _Color <span class=\"token operator\">*</span> mask <span class=\"token operator\">*</span> _Enable<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ENDCG\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"22-遮罩计算与优化\"><a class=\"markdownIt-Anchor\" href=\"#22-遮罩计算与优化\"></a> 2.2 遮罩计算与优化</h2>\n<p>另外我们还需要有水波扭曲范围的计算，代码为：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Water</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">BoxCollider2D</span> boxCollider2D<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vector2</span> LeftBottom <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>Vector2<span class=\"token punctuation\">)</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+</span> boxCollider2D<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> boxCollider2D<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vector2</span> RightTop <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>Vector2<span class=\"token punctuation\">)</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+</span> boxCollider2D<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> boxCollider2D<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        WaterManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其返回碰撞盒的左下角与右上角坐标，以得到碰撞盒的范围</p>\n<p>最后我们有一个统一管理所有Water组件的WaterManager，在这个管理器中将统一计算出所有Water组件碰撞范围，并绘制遮罩图。注意，为了性能优化，我们需要缩小遮罩图大小，我这里给的缩小值为0.1，即缩小了整整10倍，但对其最终效果的影响几乎没有！下面是管理器的具体代码：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WaterManager</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoSingleton<span class=\"token punctuation\">&lt;</span>WaterManager<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Water<span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Water<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// key = hashCode</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Material</span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Texture2D</span> mask <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> scale <span class=\"token operator\">=</span> <span class=\"token number\">0.05f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> enable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> BoolEnable <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> enable<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> FloatEnable <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> enable <span class=\"token punctuation\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Water</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>hashCode<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RemoveItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>hashCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FillBlackToMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> mask<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> mask<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                mask<span class=\"token punctuation\">.</span><span class=\"token function\">SetPixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        mask<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetMaterial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Material</span> material<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> material<span class=\"token punctuation\">;</span>\n        mask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Texture2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Screen<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Screen<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">FillBlackToMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FillWhiteToMask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vector2</span> leftBottom<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector2</span> rightTop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        leftBottom <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">WorldToScreenPoint</span><span class=\"token punctuation\">(</span>leftBottom<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n        rightTop <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">WorldToScreenPoint</span><span class=\"token punctuation\">(</span>rightTop<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> minX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>leftBottom<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        minX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>minX <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> minX<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>rightTop<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        maxX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxX <span class=\"token operator\">></span> mask<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> mask<span class=\"token punctuation\">.</span>width <span class=\"token punctuation\">:</span> maxX<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> minY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>leftBottom<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        minY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>minY <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> minY<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>rightTop<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        maxY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxY <span class=\"token operator\">></span> mask<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> mask<span class=\"token punctuation\">.</span>height <span class=\"token punctuation\">:</span> maxY<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> minY<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> maxY<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> minX<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> maxX<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                mask<span class=\"token punctuation\">.</span><span class=\"token function\">SetPixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>material<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">FillBlackToMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        enable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> nullKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Water<span class=\"token punctuation\">></span></span> i <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nullKey<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                enable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">FillWhiteToMask</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>LeftBottom<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>RightTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n <span class=\"token keyword\">in</span> nullKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mask<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            material<span class=\"token punctuation\">.</span><span class=\"token function\">SetTexture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Mask\"</span><span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-效果展示\"><a class=\"markdownIt-Anchor\" href=\"#一-效果展示\"></a> 一、效果展示</h1>\n<p><img src=\"/img/Water/Water.gif\" alt=\"\" /></p>\n<h1 id=\"二-思路\"><a class=\"markdownIt-Anchor\" href=\"#二-思路\"></a> 二、思路</h1>\n<h2 id=\"21-确定参数\"><a class=\"markdownIt-Anchor\" href=\"#21-确定参数\"></a> 2.1 确定参数</h2>\n<h3 id=\"211-扭曲图与相关参数\"><a class=\"markdownIt-Anchor\" href=\"#211-扭曲图与相关参数\"></a> 2.1.1 扭曲图与相关参数</h3>\n<p><img src=\"/img/Water/Noise.png\" alt=\"\" /></p>\n<p>使用的扭曲噪声图是这张，用其R和G通道来做主贴图扭曲的参数，计算公式定为：<code>float2 mainTexOffset = -1 * (mapColor * _Power - (_Power * 0.5))</code>，其中<code>mapColor</code>是取自于扭曲噪声图的颜色，取值位置随时间改变，改变的规则为：<code>float2 mapOffset = float2(frac(_Time.y * _DistortionSpeed), 0)</code>，<code>_DistortionSpeed</code>为扭曲图x轴移动速度，<code>_Power</code>为扭曲强度</p>\n<h3 id=\"212-遮罩\"><a class=\"markdownIt-Anchor\" href=\"#212-遮罩\"></a> 2.1.2 遮罩</h3>\n<p>如果不添加遮罩，那么扭曲是对整张图进行扭曲的，于是我们需要有一张遮罩图，黑色为无扭曲效果，白色为有扭曲效果，而灰色则表示在这两者之间。为了达到水面分界线清晰的效果，我们需要对其进行一个step操作，颜色亮度低于0.5的视为黑色，否则视为白色，于是有此公式：<code>float mask = step(0.5, tex2D(_Mask, i.uv))</code>，<code>mask</code>的结果只有0和1两种</p>\n<h3 id=\"213-水的颜色\"><a class=\"markdownIt-Anchor\" href=\"#213-水的颜色\"></a> 2.1.3 水的颜色</h3>\n<p>对于<code>mask</code>为0的地方，不进行改色，而对于<code>mask</code>为1的地方则需要添加水的颜色，于是颜色的计算可以这样写：<code>float4 finalColor = (mainTexColor * !mask + mainTexColor + _Color * mask) * 0.5</code>，其中<code>mainTexColor</code>为原本贴图的颜色，<code>_Color</code>为指定的水的颜色</p>\n<h3 id=\"214-水面正弦波\"><a class=\"markdownIt-Anchor\" href=\"#214-水面正弦波\"></a> 2.1.4 水面正弦波</h3>\n<p>如果只完成了上述操作，那么只能创造出一个矩形的水区域。为了添加水面波动，我们需要加上一个正弦波。公式我们定义为：<code>float2 waveUv = i.uv + float2(0, _Peak * (sin(_WaveFrequency * i.uv.x + waveOffset) - 1))</code>，其中<code>_Peak</code>为正弦波峰值，<code>_WaveFrequency</code>为正弦波频率，<code>waveOffset</code>为正弦波偏移量，其值随时间变化，公式为：<code>float waveOffset = _Time.y * _WaveSpeed</code>，其中<code>_WaveSpeed</code>为正弦波移动速度</p>\n<h3 id=\"215-shader代码\"><a class=\"markdownIt-Anchor\" href=\"#215-shader代码\"></a> 2.1.5 Shader代码</h3>\n<p>综上，我们的最终代码是这样的：</p>\n<pre class=\"line-numbers language-hlsl\" data-language=\"hlsl\"><code class=\"language-hlsl\">Shader <span class=\"token string\">\"Custom/Water\"</span> <span class=\"token punctuation\">&#123;</span>\n    Properties <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_MainTex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Texture\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_Map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Distortion Map\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_Mask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mask\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Black\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">_Power</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Distortion Power\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token function\">_DistortionSpeed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Distortion Speed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span>\n        <span class=\"token function\">_WaveSpeed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wave Speed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span>\n        <span class=\"token function\">_Color</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_Peak</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peak\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n        <span class=\"token function\">_WaveFrequency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wave Frequency\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n        <span class=\"token function\">_Enable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enable\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    SubShader <span class=\"token punctuation\">&#123;</span>\n        Tags <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Queue\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Geometry\"</span> <span class=\"token string\">\"RenderType\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Opaque\"</span><span class=\"token punctuation\">&#125;</span>\n\n        Pass <span class=\"token punctuation\">&#123;</span>\n            Cull Off\n            ZTest LEqual\n            ZWrite On\n            AlphaTest Off\n            Lighting Off\n            ColorMask RGBA\n            Blend Off\n\n            CGPROGRAM\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">target <span class=\"token number\">2.0</span></span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">fragment frag</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">vertex vert</span></span>\n            <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n            sampler2D _Map<span class=\"token punctuation\">;</span>\n            sampler2D _Mask<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Scale<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Power<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _DistortionSpeed<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _WaveSpeed<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float4</span> _Color<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Peak<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _WaveFrequency<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Enable<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">AppData</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">VertexToFragment</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">float4</span> pos <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">half2</span> uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            VertexToFragment <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>AppData v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                VertexToFragment o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">float</span> <span class=\"token function\">WhenNeq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>VertexToFragment i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> COLOR <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 噪声图偏移量，根据时间偏移，只偏移x</span>\n                <span class=\"token keyword\">float2</span> mapOffset <span class=\"token operator\">=</span> <span class=\"token keyword\">float2</span><span class=\"token punctuation\">(</span><span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>_Time<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> _DistortionSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 采样处于该uv下的噪声图颜色</span>\n                <span class=\"token keyword\">float4</span> mapColor <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_Map<span class=\"token punctuation\">,</span> <span class=\"token function\">frac</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">+</span> mapOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 主贴图偏移量</span>\n                <span class=\"token keyword\">float2</span> mainTexOffset <span class=\"token operator\">=</span> _Enable <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>mapColor <span class=\"token operator\">*</span> _Power <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>_Power <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 波浪uv，根据时间偏移，只偏移y</span>\n                <span class=\"token keyword\">float</span> waveOffset <span class=\"token operator\">=</span> _Time<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> _WaveSpeed<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">float2</span> waveUv <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">+</span> <span class=\"token keyword\">float2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _Peak <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>_WaveFrequency <span class=\"token operator\">*</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> waveOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 波浪遮罩</span>\n                <span class=\"token keyword\">float</span> waveMask <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_Mask<span class=\"token punctuation\">,</span> waveUv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 遮罩</span>\n                <span class=\"token keyword\">float</span> mask <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_Mask<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mask <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>waveMask<span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 主贴图偏移</span>\n                mainTexOffset <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">+</span> mainTexOffset <span class=\"token operator\">*</span> mask<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 主贴图颜色</span>\n                <span class=\"token keyword\">float4</span> mainTexColor <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> mainTexOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 最终颜色为两颜色相加后除以2所得</span>\n                <span class=\"token comment\">// 对于遮罩范围外的颜色，为(mainTexColor * (1 + 1 + 0) + _Color * 0 * 0) * 0.5 = mainTexColor;</span>\n                <span class=\"token comment\">// 对于遮罩范围内的颜色，为(mainTexColor * (1 + 0 + 0) + _Color * 1 * 1) = (mainTexColor + _Color) * 0.5</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mainTexColor <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">!</span>mask <span class=\"token operator\">+</span> <span class=\"token operator\">!</span>_Enable<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> _Color <span class=\"token operator\">*</span> mask <span class=\"token operator\">*</span> _Enable<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ENDCG\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"22-遮罩计算与优化\"><a class=\"markdownIt-Anchor\" href=\"#22-遮罩计算与优化\"></a> 2.2 遮罩计算与优化</h2>\n<p>另外我们还需要有水波扭曲范围的计算，代码为：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Water</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">BoxCollider2D</span> boxCollider2D<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vector2</span> LeftBottom <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>Vector2<span class=\"token punctuation\">)</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+</span> boxCollider2D<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> boxCollider2D<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Vector2</span> RightTop <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>Vector2<span class=\"token punctuation\">)</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+</span> boxCollider2D<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> boxCollider2D<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        WaterManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其返回碰撞盒的左下角与右上角坐标，以得到碰撞盒的范围</p>\n<p>最后我们有一个统一管理所有Water组件的WaterManager，在这个管理器中将统一计算出所有Water组件碰撞范围，并绘制遮罩图。注意，为了性能优化，我们需要缩小遮罩图大小，我这里给的缩小值为0.1，即缩小了整整10倍，但对其最终效果的影响几乎没有！下面是管理器的具体代码：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WaterManager</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoSingleton<span class=\"token punctuation\">&lt;</span>WaterManager<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Water<span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Water<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// key = hashCode</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Material</span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Texture2D</span> mask <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> scale <span class=\"token operator\">=</span> <span class=\"token number\">0.05f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> enable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> BoolEnable <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> enable<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> FloatEnable <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> enable <span class=\"token punctuation\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Water</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>hashCode<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RemoveItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>hashCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FillBlackToMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> mask<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> mask<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                mask<span class=\"token punctuation\">.</span><span class=\"token function\">SetPixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        mask<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetMaterial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Material</span> material<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> material<span class=\"token punctuation\">;</span>\n        mask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Texture2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Screen<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Screen<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">FillBlackToMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FillWhiteToMask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vector2</span> leftBottom<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector2</span> rightTop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        leftBottom <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">WorldToScreenPoint</span><span class=\"token punctuation\">(</span>leftBottom<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n        rightTop <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">WorldToScreenPoint</span><span class=\"token punctuation\">(</span>rightTop<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> minX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>leftBottom<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        minX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>minX <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> minX<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>rightTop<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        maxX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxX <span class=\"token operator\">></span> mask<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> mask<span class=\"token punctuation\">.</span>width <span class=\"token punctuation\">:</span> maxX<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> minY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>leftBottom<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        minY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>minY <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> minY<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>rightTop<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        maxY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxY <span class=\"token operator\">></span> mask<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> mask<span class=\"token punctuation\">.</span>height <span class=\"token punctuation\">:</span> maxY<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> minY<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> maxY<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> minX<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> maxX<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                mask<span class=\"token punctuation\">.</span><span class=\"token function\">SetPixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>material<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">FillBlackToMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        enable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> nullKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Water<span class=\"token punctuation\">></span></span> i <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nullKey<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                enable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">FillWhiteToMask</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>LeftBottom<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>RightTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n <span class=\"token keyword\">in</span> nullKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mask<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            material<span class=\"token punctuation\">.</span><span class=\"token function\">SetTexture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Mask\"</span><span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"URP自定义后处理特效第零篇：前期准备","date":"2022-02-22T13:50:00.000Z","toc":true,"banner_img":"/img/PinkCloud.jpg","banner_img_set":"/img/PinkCloud.jpg","_content":"\n# 一、关于URP（Universal Render Pipeline）\n\n## 1.1 什么是URP\n\n关于URP，在Package Mananger中，官方是这样描述的：\n\n> **The Universal Render Pipeline (URP)** is a prebuilt **Scriptable Render Pipeline**, made by Unity. URP provides artist-friendly workflows that let you quickly and easily create optimized graphics across a range of platforms, from mobile to high-end consoles and PCs.\n>\n> **通用渲染管线（Universal Render Pipeline，URP）**是一个由Unity官方开发的预构建的**可编程渲染管线（Scriptable Render Pipeline，SRP）**。URP提供了能让你快速轻松地在一系列平台，从手机到高端游戏机和电脑上创建优化图像的艺术家友好型的工作流。\n\n说到URP，就得说SRP是什么，说到SRP就得说RP是什么...这里暂时不表，后续再补充说明，详见https://zhuanlan.zhihu.com/p/103457229\n\n## 1.2 我为什么用URP\n\n主要原因是因为URP提供了2D光照系统，可以很方便快速地布置光照\n\n## 1.3 怎么切换成URP\n\n### 1.3.1 安装URP\n\n本文使用的Unity版本为在2020.3.27f1c1，我们打开Unity的Window/Package Manager，Packages选择Unity Registry，可以找到Universal RP的包，点击Install进行安装\n\n### 1.3.2 新建URPAsset\n\n在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/Pipeline Asset(Forward Renderer)新建一个URPAsset，默认名称是UniversalRenderPipelineAsset，我们可以改名为URPAsset。新建之后还会跟着多出一个叫UniversalRenderPipelineAsset_Renderder的文件，点击URPAsset，可以看到Inspector窗口中的General/RendererList已经自动放好了这个默认的文件。它是一个称之为Forward Renderer的文件，可以在Create/Rendering/中找到。由于我们的后处理特效是通过这个文件来设置的，因此我们可以将这个文件改名为CustomForwardRendererData。\n\n### 1.3.3 切换为默认是支持2D光照的2DRenderer，且保留CustomForwardRendererData\n\n在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/2D Renderer(Experimental)新建一个2D Renderer，默认名称是New 2D Renderer，我们可以改名为2DRenderer。将该2DRenderer放入上面第2步创建的URPAsset文件的Inspector窗口中的General/RendererList的0号位置中，替换掉原来默认的CustomForwardRendererData。这个CustomForwardRendererData还应该加回去来做2DRenderer无法实现的功能，因此我们点击Inspector窗口中的General/Renderer List中的+，新增一行然后将CustomForwardRendererData拖进去\n\n### 1.3.4 切换为URP渲染管线\n\n打开Unity的Edit/Project Settings/Graphics，将URPAsset拖入Scriptable Render Pipeline Settings一栏中，到此即可切换为URP渲染管线了\n\n# 二、兼容2D光照的URP自定义后处理特效\n\n此部分内容主要参考自B站一位大佬的架构设计，非常感谢分享了这样一个方便的架构！https://www.bilibili.com/video/av588100663/\n\n## 2.1 架构设计\n\n![](/img/CustomPostProcessing.png)\n\n架构图如上，其具体代码为：\n\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\n\npublic class CustomPostProcessRendererFeature : ScriptableRendererFeature {\n    // 不同插入点的render pass\n    CustomPostProcessRenderPass afterOpaqueAndSky;\n    CustomPostProcessRenderPass beforePostProcess;\n    CustomPostProcessRenderPass afterPostProcess;\n\n    // 所有自定义的VolumeComponent\n    List<CustomVolumeComponent> components;\n\n    // 用于after PostProcess的render target\n    RenderTargetHandle afterPostProcessTexture;\n\n    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData) {\n        // CustomPostProcessRenderPass中定义了一个变量activeComponents来存储当前可用的的后处理组件，\n        // 在Render Feature的AddRenderPasses中，需要先判断Render Pass中是否有组件处于激活状态，\n        // 如果没有一个组件激活，那么就没必要添加这个Render Pass，\n        // 这里调用先前在组件中定义好的Setup方法初始化，随后调用IsActive判断其是否处于激活状态\n        if (renderingData.cameraData.postProcessEnabled) {\n            // 为每个render pass设置render target\n            var source = new RenderTargetHandle(renderer.cameraColorTarget);\n            if (afterOpaqueAndSky.SetupComponents()) {\n                afterOpaqueAndSky.Setup(source, source);\n                renderer.EnqueuePass(afterOpaqueAndSky);\n            }\n            if (beforePostProcess.SetupComponents()) {\n                beforePostProcess.Setup(source, source);\n                renderer.EnqueuePass(beforePostProcess);\n            }\n            if (afterPostProcess.SetupComponents()) {\n                // 如果下一个Pass是FinalBlit，则输入与输出均为_AfterPostProcessTexture\n                source = renderingData.cameraData.resolveFinalTarget ? afterPostProcessTexture : source;\n                afterPostProcess.Setup(source, source);\n                renderer.EnqueuePass(afterPostProcess);\n            }\n        }\n    }\n\n    // 初始化Feature资源，每当序列化发生时都会调用\n    public override void Create() {\n        // 从VolumeManager获取所有自定义的VolumeComponent\n        var stack = VolumeManager.instance.stack;\n        components = VolumeManager.instance.baseComponentTypeArray\n            .Where(t => t.IsSubclassOf(typeof(CustomVolumeComponent)) && stack.GetComponent(t) != null)\n            .Select(t => stack.GetComponent(t) as CustomVolumeComponent)\n            .ToList();\n\n        // 初始化不同插入点的render pass\n        var afterOpaqueAndSkyComponents = components\n            .Where(c => c.InjectionPoint == CustomPostProcessInjectionPoint.AfterOpaqueAndSky)\n            .OrderBy(c => c.OrderInPass)\n            .ToList();\n        afterOpaqueAndSky = new CustomPostProcessRenderPass(\"Custom PostProcess after Opaque and Sky\", afterOpaqueAndSkyComponents);\n        afterOpaqueAndSky.renderPassEvent = RenderPassEvent.AfterRenderingOpaques;\n\n        var beforePostProcessComponents = components\n            .Where(c => c.InjectionPoint == CustomPostProcessInjectionPoint.BeforePostProcess)\n            .OrderBy(c => c.OrderInPass)\n            .ToList();\n        beforePostProcess = new CustomPostProcessRenderPass(\"Custom PostProcess before PostProcess\", beforePostProcessComponents);\n        beforePostProcess.renderPassEvent = RenderPassEvent.BeforeRenderingPostProcessing;\n\n        var afterPostProcessComponents = components\n            .Where(c => c.InjectionPoint == CustomPostProcessInjectionPoint.AfterPostProcess)\n            .OrderBy(c => c.OrderInPass)\n            .ToList();\n        afterPostProcess = new CustomPostProcessRenderPass(\"Custom PostProcess after PostProcess\", afterPostProcessComponents);\n        // 为了确保输入为_AfterPostProcessTexture，这里插入到AfterRendering而不是AfterRenderingPostProcessing\n        afterPostProcess.renderPassEvent = RenderPassEvent.AfterRendering;\n\n        // 初始化用于after PostProcess的render target\n        afterPostProcessTexture.Init(\"_AfterPostProcessTexture\");\n    }\n\n    // 资源释放\n    protected override void Dispose(bool disposing) {\n        base.Dispose(disposing);\n        if (disposing && components != null) {\n            foreach (var item in components) {\n                item.Dispose();\n            }\n        }\n    }\n}\n```\n\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\n\n// 官方示例中，一个Renderer Feature对应一个自定义后处理效果，各个后处理相互独立，好处是灵活自由易调整；\n// 坏处也在此，相互独立意味着每个效果都可能要开临时RT，耗费资源比双缓冲互换要多，\n// 并且Renderer Feature在Renderer Data下，相对于场景中的Volume来说在代码中调用起来反而没那么方便。\n// 那么这里的思路便是将所有相同插入点的后处理组件放到同一个Render Pass下渲染，这样就可以做到双缓冲交换，又保持了Volume的优势。\n\npublic class CustomPostProcessRenderPass : ScriptableRenderPass {\n    List<CustomVolumeComponent> volumeComponents; // 所有自定义后处理组件\n    List<int> activeComponents; // 当前可用的组件下标\n\n    string profilerTag;\n    List<ProfilingSampler> profilingSamplers; // 每个组件对应的ProfilingSampler\n\n    RenderTargetHandle source; // 当前源与目标\n    RenderTargetHandle destination;\n    RenderTargetHandle tempRT0; // 临时RT\n    RenderTargetHandle tempRT1;\n\n    /// <param name=\"profilerTag\">Profiler标识</param>\n    /// <param name=\"volumeComponents\">属于该RendererPass的后处理组件</param>\n    public CustomPostProcessRenderPass(string profilerTag, List<CustomVolumeComponent> volumeComponents) {\n        this.profilerTag = profilerTag;\n        this.volumeComponents = volumeComponents;\n        activeComponents = new List<int>(volumeComponents.Count);\n        profilingSamplers = volumeComponents.Select(c => new ProfilingSampler(c.ToString())).ToList();\n\n        tempRT0.Init(\"_TemporaryRenderTexture0\");\n        tempRT1.Init(\"_TemporaryRenderTexture1\");\n    }\n\n    // 你可以在这里实现渲染逻辑。\n    // 使用<c>ScriptableRenderContext</c>来执行绘图命令或Command Buffer\n    // https://docs.unity3d.com/ScriptReference/Rendering.ScriptableRenderContext.html\n    // 你不需要手动调用ScriptableRenderContext.submit，渲染管线会在特定位置调用它。\n    public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData) {\n        var cmd = CommandBufferPool.Get(profilerTag);\n        context.ExecuteCommandBuffer(cmd);\n        cmd.Clear();\n\n        // 获取Descriptor\n        var descriptor = renderingData.cameraData.cameraTargetDescriptor;\n        descriptor.msaaSamples = 1;\n        descriptor.depthBufferBits = 0;\n\n        // 初始化临时RT\n        RenderTargetIdentifier buff0, buff1;\n        bool rt1Used = false;\n        cmd.GetTemporaryRT(tempRT0.id, descriptor);\n        buff0 = tempRT0.id;\n        // 如果destination没有初始化，则需要获取RT，主要是destinaton为_AfterPostProcessTexture的情况\n        if (destination != RenderTargetHandle.CameraTarget && !destination.HasInternalRenderTargetId()) {\n            cmd.GetTemporaryRT(destination.id, descriptor);\n        }\n\n        // 执行每个组件的Render方法\n        // 如果只有一个组件，则直接source -> buff0\n        if (activeComponents.Count == 1) {\n            int index = activeComponents[0];\n            using (new ProfilingScope(cmd, profilingSamplers[index])) {\n                volumeComponents[index].Render(cmd, ref renderingData, source.Identifier(), buff0);\n            }\n        } else {\n            // 如果有多个组件，则在两个RT上左右横跳\n            cmd.GetTemporaryRT(tempRT1.id, descriptor);\n            buff1 = tempRT1.id;\n            rt1Used = true;\n            Blit(cmd, source.Identifier(), buff0);\n            for (int i = 0; i < activeComponents.Count; i++) {\n                int index = activeComponents[i];\n                var component = volumeComponents[index];\n                using (new ProfilingScope(cmd, profilingSamplers[index])) {\n                    component.Render(cmd, ref renderingData, buff0, buff1);\n                }\n                CoreUtils.Swap(ref buff0, ref buff1);\n            }\n        }\n\n        // 最后blit到destination\n        Blit(cmd, buff0, destination.Identifier());\n\n        // 释放\n        cmd.ReleaseTemporaryRT(tempRT0.id);\n        if (rt1Used)\n            cmd.ReleaseTemporaryRT(tempRT1.id);\n\n        context.ExecuteCommandBuffer(cmd);\n        CommandBufferPool.Release(cmd);\n    }\n\n    /// <summary>\n    /// 设置后处理组件\n    /// </summary>\n    /// <returns>是否存在有效组件</returns>\n    public bool SetupComponents() {\n        activeComponents.Clear();\n        for (int i = 0; i < volumeComponents.Count; i++) {\n            volumeComponents[i].Setup();\n            if (volumeComponents[i].IsActive()) {\n                activeComponents.Add(i);\n            }\n        }\n        return activeComponents.Count != 0;\n    }\n\n    /// <summary>\n    /// 设置渲染源和渲染目标\n    /// </summary>\n    public void Setup(RenderTargetHandle source, RenderTargetHandle destination) {\n        this.source = source;\n        this.destination = destination;\n    }\n}\n```\n\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\n\n/// 后处理插入位置\npublic enum CustomPostProcessInjectionPoint {\n    AfterOpaqueAndSky, // 天空渲染之后\n    BeforePostProcess, // 内置后处理之前\n    AfterPostProcess // 内置后处理之后\n}\n\npublic abstract class CustomVolumeComponent : VolumeComponent, IPostProcessComponent, IDisposable {\n    // 插入位置\n    public virtual CustomPostProcessInjectionPoint InjectionPoint => CustomPostProcessInjectionPoint.AfterPostProcess;\n\n    // 在同一个插入点可能会存在多个后处理组件，所以还需要一个排序编号来确定谁先谁后：\n    // 在InjectionPoint中的渲染顺序\n    public virtual int OrderInPass => 0;\n\n    // 初始化，将在RenderPass加入队列时调用\n    public abstract void Setup();\n\n    // 执行渲染\n    public abstract void Render(CommandBuffer cmd, ref RenderingData renderingData, RenderTargetIdentifier source, RenderTargetIdentifier destination);\n\n    #region IPostProcessComponent\n    public abstract bool IsActive(); // 返回当前组件是否处于激活状态\n\n    public virtual bool IsTileCompatible() => false;\n    #endregion\n\n    #region IDisposable 由于渲染可能需要临时生成材质，在这里将它们释放\n    public void Dispose() {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    public virtual void Dispose(bool disposing) { }\n    #endregion\n}\n```\n\n代码注释较为全面了，看注释即可\n\n## 2.2 使用方式\n\n我们点击CustomForwardRendererData，在Inspector界面点击Add Renderer Feature，然后新建一个Custom Post Process Renderer Feature，名称随意不影响使用，这里取名为CustomPostProcessRendererFeature\n\n有了这个RendererFeature之后，我们就能随心所欲地添加我们的自定义后处理特效了！只要我们继承实现自己的CustomVolumeComponent类就行。由于篇幅原因，这部分内容放下一章讲。在这之前，这里先说明一下URP中默认提供的一些后处理特效，也是Volume的基本使用吧\n\n在Hierarchy右键，新建一个Volume/Global Volume，我们可以在Inspector界面中看到它需要传入一个Profile，这里我们在Project中右键Create/Volume Profile，名称就叫GlobalVolumeProfile好了。创建结束之后将其拖到Profile中。完成这一步之后，我们就可以给这个Profile添加各种后处理特效了，我们点击Global Volume的Inspector界面的Add Override，新增一个Bloom特效，现在我们试一下勾上这个特效的Threshold盒Intensity，数值分别填入0.5和1，我们就可以直接在Scene界面和Game界面观察到图片变亮了（请自己在场景放一张图片），有了Bloom的特效\n\n好了，我们下一章见\n","source":"_posts/URPCustomPostEffect.md","raw":"---\ntitle: URP自定义后处理特效第零篇：前期准备\ndate: 2022-02-22 21:50:00\ntoc: true\ntags:\n- Unity\n- URP\n- PostEffect\ncategories:\n- Unity\nbanner_img: /img/PinkCloud.jpg\nbanner_img_set: /img/PinkCloud.jpg\n---\n\n# 一、关于URP（Universal Render Pipeline）\n\n## 1.1 什么是URP\n\n关于URP，在Package Mananger中，官方是这样描述的：\n\n> **The Universal Render Pipeline (URP)** is a prebuilt **Scriptable Render Pipeline**, made by Unity. URP provides artist-friendly workflows that let you quickly and easily create optimized graphics across a range of platforms, from mobile to high-end consoles and PCs.\n>\n> **通用渲染管线（Universal Render Pipeline，URP）**是一个由Unity官方开发的预构建的**可编程渲染管线（Scriptable Render Pipeline，SRP）**。URP提供了能让你快速轻松地在一系列平台，从手机到高端游戏机和电脑上创建优化图像的艺术家友好型的工作流。\n\n说到URP，就得说SRP是什么，说到SRP就得说RP是什么...这里暂时不表，后续再补充说明，详见https://zhuanlan.zhihu.com/p/103457229\n\n## 1.2 我为什么用URP\n\n主要原因是因为URP提供了2D光照系统，可以很方便快速地布置光照\n\n## 1.3 怎么切换成URP\n\n### 1.3.1 安装URP\n\n本文使用的Unity版本为在2020.3.27f1c1，我们打开Unity的Window/Package Manager，Packages选择Unity Registry，可以找到Universal RP的包，点击Install进行安装\n\n### 1.3.2 新建URPAsset\n\n在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/Pipeline Asset(Forward Renderer)新建一个URPAsset，默认名称是UniversalRenderPipelineAsset，我们可以改名为URPAsset。新建之后还会跟着多出一个叫UniversalRenderPipelineAsset_Renderder的文件，点击URPAsset，可以看到Inspector窗口中的General/RendererList已经自动放好了这个默认的文件。它是一个称之为Forward Renderer的文件，可以在Create/Rendering/中找到。由于我们的后处理特效是通过这个文件来设置的，因此我们可以将这个文件改名为CustomForwardRendererData。\n\n### 1.3.3 切换为默认是支持2D光照的2DRenderer，且保留CustomForwardRendererData\n\n在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/2D Renderer(Experimental)新建一个2D Renderer，默认名称是New 2D Renderer，我们可以改名为2DRenderer。将该2DRenderer放入上面第2步创建的URPAsset文件的Inspector窗口中的General/RendererList的0号位置中，替换掉原来默认的CustomForwardRendererData。这个CustomForwardRendererData还应该加回去来做2DRenderer无法实现的功能，因此我们点击Inspector窗口中的General/Renderer List中的+，新增一行然后将CustomForwardRendererData拖进去\n\n### 1.3.4 切换为URP渲染管线\n\n打开Unity的Edit/Project Settings/Graphics，将URPAsset拖入Scriptable Render Pipeline Settings一栏中，到此即可切换为URP渲染管线了\n\n# 二、兼容2D光照的URP自定义后处理特效\n\n此部分内容主要参考自B站一位大佬的架构设计，非常感谢分享了这样一个方便的架构！https://www.bilibili.com/video/av588100663/\n\n## 2.1 架构设计\n\n![](/img/CustomPostProcessing.png)\n\n架构图如上，其具体代码为：\n\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\n\npublic class CustomPostProcessRendererFeature : ScriptableRendererFeature {\n    // 不同插入点的render pass\n    CustomPostProcessRenderPass afterOpaqueAndSky;\n    CustomPostProcessRenderPass beforePostProcess;\n    CustomPostProcessRenderPass afterPostProcess;\n\n    // 所有自定义的VolumeComponent\n    List<CustomVolumeComponent> components;\n\n    // 用于after PostProcess的render target\n    RenderTargetHandle afterPostProcessTexture;\n\n    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData) {\n        // CustomPostProcessRenderPass中定义了一个变量activeComponents来存储当前可用的的后处理组件，\n        // 在Render Feature的AddRenderPasses中，需要先判断Render Pass中是否有组件处于激活状态，\n        // 如果没有一个组件激活，那么就没必要添加这个Render Pass，\n        // 这里调用先前在组件中定义好的Setup方法初始化，随后调用IsActive判断其是否处于激活状态\n        if (renderingData.cameraData.postProcessEnabled) {\n            // 为每个render pass设置render target\n            var source = new RenderTargetHandle(renderer.cameraColorTarget);\n            if (afterOpaqueAndSky.SetupComponents()) {\n                afterOpaqueAndSky.Setup(source, source);\n                renderer.EnqueuePass(afterOpaqueAndSky);\n            }\n            if (beforePostProcess.SetupComponents()) {\n                beforePostProcess.Setup(source, source);\n                renderer.EnqueuePass(beforePostProcess);\n            }\n            if (afterPostProcess.SetupComponents()) {\n                // 如果下一个Pass是FinalBlit，则输入与输出均为_AfterPostProcessTexture\n                source = renderingData.cameraData.resolveFinalTarget ? afterPostProcessTexture : source;\n                afterPostProcess.Setup(source, source);\n                renderer.EnqueuePass(afterPostProcess);\n            }\n        }\n    }\n\n    // 初始化Feature资源，每当序列化发生时都会调用\n    public override void Create() {\n        // 从VolumeManager获取所有自定义的VolumeComponent\n        var stack = VolumeManager.instance.stack;\n        components = VolumeManager.instance.baseComponentTypeArray\n            .Where(t => t.IsSubclassOf(typeof(CustomVolumeComponent)) && stack.GetComponent(t) != null)\n            .Select(t => stack.GetComponent(t) as CustomVolumeComponent)\n            .ToList();\n\n        // 初始化不同插入点的render pass\n        var afterOpaqueAndSkyComponents = components\n            .Where(c => c.InjectionPoint == CustomPostProcessInjectionPoint.AfterOpaqueAndSky)\n            .OrderBy(c => c.OrderInPass)\n            .ToList();\n        afterOpaqueAndSky = new CustomPostProcessRenderPass(\"Custom PostProcess after Opaque and Sky\", afterOpaqueAndSkyComponents);\n        afterOpaqueAndSky.renderPassEvent = RenderPassEvent.AfterRenderingOpaques;\n\n        var beforePostProcessComponents = components\n            .Where(c => c.InjectionPoint == CustomPostProcessInjectionPoint.BeforePostProcess)\n            .OrderBy(c => c.OrderInPass)\n            .ToList();\n        beforePostProcess = new CustomPostProcessRenderPass(\"Custom PostProcess before PostProcess\", beforePostProcessComponents);\n        beforePostProcess.renderPassEvent = RenderPassEvent.BeforeRenderingPostProcessing;\n\n        var afterPostProcessComponents = components\n            .Where(c => c.InjectionPoint == CustomPostProcessInjectionPoint.AfterPostProcess)\n            .OrderBy(c => c.OrderInPass)\n            .ToList();\n        afterPostProcess = new CustomPostProcessRenderPass(\"Custom PostProcess after PostProcess\", afterPostProcessComponents);\n        // 为了确保输入为_AfterPostProcessTexture，这里插入到AfterRendering而不是AfterRenderingPostProcessing\n        afterPostProcess.renderPassEvent = RenderPassEvent.AfterRendering;\n\n        // 初始化用于after PostProcess的render target\n        afterPostProcessTexture.Init(\"_AfterPostProcessTexture\");\n    }\n\n    // 资源释放\n    protected override void Dispose(bool disposing) {\n        base.Dispose(disposing);\n        if (disposing && components != null) {\n            foreach (var item in components) {\n                item.Dispose();\n            }\n        }\n    }\n}\n```\n\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\n\n// 官方示例中，一个Renderer Feature对应一个自定义后处理效果，各个后处理相互独立，好处是灵活自由易调整；\n// 坏处也在此，相互独立意味着每个效果都可能要开临时RT，耗费资源比双缓冲互换要多，\n// 并且Renderer Feature在Renderer Data下，相对于场景中的Volume来说在代码中调用起来反而没那么方便。\n// 那么这里的思路便是将所有相同插入点的后处理组件放到同一个Render Pass下渲染，这样就可以做到双缓冲交换，又保持了Volume的优势。\n\npublic class CustomPostProcessRenderPass : ScriptableRenderPass {\n    List<CustomVolumeComponent> volumeComponents; // 所有自定义后处理组件\n    List<int> activeComponents; // 当前可用的组件下标\n\n    string profilerTag;\n    List<ProfilingSampler> profilingSamplers; // 每个组件对应的ProfilingSampler\n\n    RenderTargetHandle source; // 当前源与目标\n    RenderTargetHandle destination;\n    RenderTargetHandle tempRT0; // 临时RT\n    RenderTargetHandle tempRT1;\n\n    /// <param name=\"profilerTag\">Profiler标识</param>\n    /// <param name=\"volumeComponents\">属于该RendererPass的后处理组件</param>\n    public CustomPostProcessRenderPass(string profilerTag, List<CustomVolumeComponent> volumeComponents) {\n        this.profilerTag = profilerTag;\n        this.volumeComponents = volumeComponents;\n        activeComponents = new List<int>(volumeComponents.Count);\n        profilingSamplers = volumeComponents.Select(c => new ProfilingSampler(c.ToString())).ToList();\n\n        tempRT0.Init(\"_TemporaryRenderTexture0\");\n        tempRT1.Init(\"_TemporaryRenderTexture1\");\n    }\n\n    // 你可以在这里实现渲染逻辑。\n    // 使用<c>ScriptableRenderContext</c>来执行绘图命令或Command Buffer\n    // https://docs.unity3d.com/ScriptReference/Rendering.ScriptableRenderContext.html\n    // 你不需要手动调用ScriptableRenderContext.submit，渲染管线会在特定位置调用它。\n    public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData) {\n        var cmd = CommandBufferPool.Get(profilerTag);\n        context.ExecuteCommandBuffer(cmd);\n        cmd.Clear();\n\n        // 获取Descriptor\n        var descriptor = renderingData.cameraData.cameraTargetDescriptor;\n        descriptor.msaaSamples = 1;\n        descriptor.depthBufferBits = 0;\n\n        // 初始化临时RT\n        RenderTargetIdentifier buff0, buff1;\n        bool rt1Used = false;\n        cmd.GetTemporaryRT(tempRT0.id, descriptor);\n        buff0 = tempRT0.id;\n        // 如果destination没有初始化，则需要获取RT，主要是destinaton为_AfterPostProcessTexture的情况\n        if (destination != RenderTargetHandle.CameraTarget && !destination.HasInternalRenderTargetId()) {\n            cmd.GetTemporaryRT(destination.id, descriptor);\n        }\n\n        // 执行每个组件的Render方法\n        // 如果只有一个组件，则直接source -> buff0\n        if (activeComponents.Count == 1) {\n            int index = activeComponents[0];\n            using (new ProfilingScope(cmd, profilingSamplers[index])) {\n                volumeComponents[index].Render(cmd, ref renderingData, source.Identifier(), buff0);\n            }\n        } else {\n            // 如果有多个组件，则在两个RT上左右横跳\n            cmd.GetTemporaryRT(tempRT1.id, descriptor);\n            buff1 = tempRT1.id;\n            rt1Used = true;\n            Blit(cmd, source.Identifier(), buff0);\n            for (int i = 0; i < activeComponents.Count; i++) {\n                int index = activeComponents[i];\n                var component = volumeComponents[index];\n                using (new ProfilingScope(cmd, profilingSamplers[index])) {\n                    component.Render(cmd, ref renderingData, buff0, buff1);\n                }\n                CoreUtils.Swap(ref buff0, ref buff1);\n            }\n        }\n\n        // 最后blit到destination\n        Blit(cmd, buff0, destination.Identifier());\n\n        // 释放\n        cmd.ReleaseTemporaryRT(tempRT0.id);\n        if (rt1Used)\n            cmd.ReleaseTemporaryRT(tempRT1.id);\n\n        context.ExecuteCommandBuffer(cmd);\n        CommandBufferPool.Release(cmd);\n    }\n\n    /// <summary>\n    /// 设置后处理组件\n    /// </summary>\n    /// <returns>是否存在有效组件</returns>\n    public bool SetupComponents() {\n        activeComponents.Clear();\n        for (int i = 0; i < volumeComponents.Count; i++) {\n            volumeComponents[i].Setup();\n            if (volumeComponents[i].IsActive()) {\n                activeComponents.Add(i);\n            }\n        }\n        return activeComponents.Count != 0;\n    }\n\n    /// <summary>\n    /// 设置渲染源和渲染目标\n    /// </summary>\n    public void Setup(RenderTargetHandle source, RenderTargetHandle destination) {\n        this.source = source;\n        this.destination = destination;\n    }\n}\n```\n\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\n\n/// 后处理插入位置\npublic enum CustomPostProcessInjectionPoint {\n    AfterOpaqueAndSky, // 天空渲染之后\n    BeforePostProcess, // 内置后处理之前\n    AfterPostProcess // 内置后处理之后\n}\n\npublic abstract class CustomVolumeComponent : VolumeComponent, IPostProcessComponent, IDisposable {\n    // 插入位置\n    public virtual CustomPostProcessInjectionPoint InjectionPoint => CustomPostProcessInjectionPoint.AfterPostProcess;\n\n    // 在同一个插入点可能会存在多个后处理组件，所以还需要一个排序编号来确定谁先谁后：\n    // 在InjectionPoint中的渲染顺序\n    public virtual int OrderInPass => 0;\n\n    // 初始化，将在RenderPass加入队列时调用\n    public abstract void Setup();\n\n    // 执行渲染\n    public abstract void Render(CommandBuffer cmd, ref RenderingData renderingData, RenderTargetIdentifier source, RenderTargetIdentifier destination);\n\n    #region IPostProcessComponent\n    public abstract bool IsActive(); // 返回当前组件是否处于激活状态\n\n    public virtual bool IsTileCompatible() => false;\n    #endregion\n\n    #region IDisposable 由于渲染可能需要临时生成材质，在这里将它们释放\n    public void Dispose() {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    public virtual void Dispose(bool disposing) { }\n    #endregion\n}\n```\n\n代码注释较为全面了，看注释即可\n\n## 2.2 使用方式\n\n我们点击CustomForwardRendererData，在Inspector界面点击Add Renderer Feature，然后新建一个Custom Post Process Renderer Feature，名称随意不影响使用，这里取名为CustomPostProcessRendererFeature\n\n有了这个RendererFeature之后，我们就能随心所欲地添加我们的自定义后处理特效了！只要我们继承实现自己的CustomVolumeComponent类就行。由于篇幅原因，这部分内容放下一章讲。在这之前，这里先说明一下URP中默认提供的一些后处理特效，也是Volume的基本使用吧\n\n在Hierarchy右键，新建一个Volume/Global Volume，我们可以在Inspector界面中看到它需要传入一个Profile，这里我们在Project中右键Create/Volume Profile，名称就叫GlobalVolumeProfile好了。创建结束之后将其拖到Profile中。完成这一步之后，我们就可以给这个Profile添加各种后处理特效了，我们点击Global Volume的Inspector界面的Add Override，新增一个Bloom特效，现在我们试一下勾上这个特效的Threshold盒Intensity，数值分别填入0.5和1，我们就可以直接在Scene界面和Game界面观察到图片变亮了（请自己在场景放一张图片），有了Bloom的特效\n\n好了，我们下一章见\n","slug":"URPCustomPostEffect","published":1,"updated":"2022-02-25T04:04:57.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl04wml4t001ojowz129520b4","content":"<h1 id=\"一-关于urpuniversal-render-pipeline\"><a class=\"markdownIt-Anchor\" href=\"#一-关于urpuniversal-render-pipeline\"></a> 一、关于URP（Universal Render Pipeline）</h1>\n<h2 id=\"11-什么是urp\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是urp\"></a> 1.1 什么是URP</h2>\n<p>关于URP，在Package Mananger中，官方是这样描述的：</p>\n<blockquote>\n<p><strong>The Universal Render Pipeline (URP)</strong> is a prebuilt <strong>Scriptable Render Pipeline</strong>, made by Unity. URP provides artist-friendly workflows that let you quickly and easily create optimized graphics across a range of platforms, from mobile to high-end consoles and PCs.</p>\n<p><strong>通用渲染管线（Universal Render Pipeline，URP）<strong>是一个由Unity官方开发的预构建的</strong>可编程渲染管线（Scriptable Render Pipeline，SRP）</strong>。URP提供了能让你快速轻松地在一系列平台，从手机到高端游戏机和电脑上创建优化图像的艺术家友好型的工作流。</p>\n</blockquote>\n<p>说到URP，就得说SRP是什么，说到SRP就得说RP是什么…这里暂时不表，后续再补充说明，详见https://zhuanlan.zhihu.com/p/103457229</p>\n<h2 id=\"12-我为什么用urp\"><a class=\"markdownIt-Anchor\" href=\"#12-我为什么用urp\"></a> 1.2 我为什么用URP</h2>\n<p>主要原因是因为URP提供了2D光照系统，可以很方便快速地布置光照</p>\n<h2 id=\"13-怎么切换成urp\"><a class=\"markdownIt-Anchor\" href=\"#13-怎么切换成urp\"></a> 1.3 怎么切换成URP</h2>\n<h3 id=\"131-安装urp\"><a class=\"markdownIt-Anchor\" href=\"#131-安装urp\"></a> 1.3.1 安装URP</h3>\n<p>本文使用的Unity版本为在2020.3.27f1c1，我们打开Unity的Window/Package Manager，Packages选择Unity Registry，可以找到Universal RP的包，点击Install进行安装</p>\n<h3 id=\"132-新建urpasset\"><a class=\"markdownIt-Anchor\" href=\"#132-新建urpasset\"></a> 1.3.2 新建URPAsset</h3>\n<p>在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/Pipeline Asset(Forward Renderer)新建一个URPAsset，默认名称是UniversalRenderPipelineAsset，我们可以改名为URPAsset。新建之后还会跟着多出一个叫UniversalRenderPipelineAsset_Renderder的文件，点击URPAsset，可以看到Inspector窗口中的General/RendererList已经自动放好了这个默认的文件。它是一个称之为Forward Renderer的文件，可以在Create/Rendering/中找到。由于我们的后处理特效是通过这个文件来设置的，因此我们可以将这个文件改名为CustomForwardRendererData。</p>\n<h3 id=\"133-切换为默认是支持2d光照的2drenderer且保留customforwardrendererdata\"><a class=\"markdownIt-Anchor\" href=\"#133-切换为默认是支持2d光照的2drenderer且保留customforwardrendererdata\"></a> 1.3.3 切换为默认是支持2D光照的2DRenderer，且保留CustomForwardRendererData</h3>\n<p>在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/2D Renderer(Experimental)新建一个2D Renderer，默认名称是New 2D Renderer，我们可以改名为2DRenderer。将该2DRenderer放入上面第2步创建的URPAsset文件的Inspector窗口中的General/RendererList的0号位置中，替换掉原来默认的CustomForwardRendererData。这个CustomForwardRendererData还应该加回去来做2DRenderer无法实现的功能，因此我们点击Inspector窗口中的General/Renderer List中的+，新增一行然后将CustomForwardRendererData拖进去</p>\n<h3 id=\"134-切换为urp渲染管线\"><a class=\"markdownIt-Anchor\" href=\"#134-切换为urp渲染管线\"></a> 1.3.4 切换为URP渲染管线</h3>\n<p>打开Unity的Edit/Project Settings/Graphics，将URPAsset拖入Scriptable Render Pipeline Settings一栏中，到此即可切换为URP渲染管线了</p>\n<h1 id=\"二-兼容2d光照的urp自定义后处理特效\"><a class=\"markdownIt-Anchor\" href=\"#二-兼容2d光照的urp自定义后处理特效\"></a> 二、兼容2D光照的URP自定义后处理特效</h1>\n<p>此部分内容主要参考自B站一位大佬的架构设计，非常感谢分享了这样一个方便的架构！<a href=\"https://www.bilibili.com/video/av588100663/\">https://www.bilibili.com/video/av588100663/</a></p>\n<h2 id=\"21-架构设计\"><a class=\"markdownIt-Anchor\" href=\"#21-架构设计\"></a> 2.1 架构设计</h2>\n<p><img src=\"/img/CustomPostProcessing.png\" alt=\"\" / srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/img/CustomPostProcessing.png\" class=\"lozad post-image\"></p>\n<p>架构图如上，其具体代码为：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering<span class=\"token punctuation\">.</span>Universal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomPostProcessRendererFeature</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableRendererFeature</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 不同插入点的render pass</span>\n    <span class=\"token class-name\">CustomPostProcessRenderPass</span> afterOpaqueAndSky<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">CustomPostProcessRenderPass</span> beforePostProcess<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">CustomPostProcessRenderPass</span> afterPostProcess<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 所有自定义的VolumeComponent</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>CustomVolumeComponent<span class=\"token punctuation\">></span></span> components<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 用于after PostProcess的render target</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> afterPostProcessTexture<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddRenderPasses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScriptableRenderer</span> renderer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">RenderingData</span> renderingData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// CustomPostProcessRenderPass中定义了一个变量activeComponents来存储当前可用的的后处理组件，</span>\n        <span class=\"token comment\">// 在Render Feature的AddRenderPasses中，需要先判断Render Pass中是否有组件处于激活状态，</span>\n        <span class=\"token comment\">// 如果没有一个组件激活，那么就没必要添加这个Render Pass，</span>\n        <span class=\"token comment\">// 这里调用先前在组件中定义好的Setup方法初始化，随后调用IsActive判断其是否处于激活状态</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>renderingData<span class=\"token punctuation\">.</span>cameraData<span class=\"token punctuation\">.</span>postProcessEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 为每个render pass设置render target</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RenderTargetHandle</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">.</span>cameraColorTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>afterOpaqueAndSky<span class=\"token punctuation\">.</span><span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                afterOpaqueAndSky<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                renderer<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueuePass</span><span class=\"token punctuation\">(</span>afterOpaqueAndSky<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beforePostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                beforePostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                renderer<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueuePass</span><span class=\"token punctuation\">(</span>beforePostProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>afterPostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 如果下一个Pass是FinalBlit，则输入与输出均为_AfterPostProcessTexture</span>\n                source <span class=\"token operator\">=</span> <span class=\"token class-name\">renderingData<span class=\"token punctuation\">.</span>cameraData<span class=\"token punctuation\">.</span>resolveFinalTarget <span class=\"token punctuation\">?</span></span> afterPostProcessTexture <span class=\"token punctuation\">:</span> source<span class=\"token punctuation\">;</span>\n                afterPostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                renderer<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueuePass</span><span class=\"token punctuation\">(</span>afterPostProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 初始化Feature资源，每当序列化发生时都会调用</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 从VolumeManager获取所有自定义的VolumeComponent</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stack <span class=\"token operator\">=</span> VolumeManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">;</span>\n        components <span class=\"token operator\">=</span> VolumeManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>baseComponentTypeArray\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">IsSubclassOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CustomVolumeComponent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">CustomVolumeComponent</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 初始化不同插入点的render pass</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> afterOpaqueAndSkyComponents <span class=\"token operator\">=</span> components\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>InjectionPoint <span class=\"token operator\">==</span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>AfterOpaqueAndSky<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OrderInPass<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        afterOpaqueAndSky <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custom PostProcess after Opaque and Sky\"</span><span class=\"token punctuation\">,</span> afterOpaqueAndSkyComponents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        afterOpaqueAndSky<span class=\"token punctuation\">.</span>renderPassEvent <span class=\"token operator\">=</span> RenderPassEvent<span class=\"token punctuation\">.</span>AfterRenderingOpaques<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> beforePostProcessComponents <span class=\"token operator\">=</span> components\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>InjectionPoint <span class=\"token operator\">==</span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>BeforePostProcess<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OrderInPass<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beforePostProcess <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custom PostProcess before PostProcess\"</span><span class=\"token punctuation\">,</span> beforePostProcessComponents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beforePostProcess<span class=\"token punctuation\">.</span>renderPassEvent <span class=\"token operator\">=</span> RenderPassEvent<span class=\"token punctuation\">.</span>BeforeRenderingPostProcessing<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> afterPostProcessComponents <span class=\"token operator\">=</span> components\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>InjectionPoint <span class=\"token operator\">==</span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>AfterPostProcess<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OrderInPass<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        afterPostProcess <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custom PostProcess after PostProcess\"</span><span class=\"token punctuation\">,</span> afterPostProcessComponents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 为了确保输入为_AfterPostProcessTexture，这里插入到AfterRendering而不是AfterRenderingPostProcessing</span>\n        afterPostProcess<span class=\"token punctuation\">.</span>renderPassEvent <span class=\"token operator\">=</span> RenderPassEvent<span class=\"token punctuation\">.</span>AfterRendering<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 初始化用于after PostProcess的render target</span>\n        afterPostProcessTexture<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_AfterPostProcessTexture\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 资源释放</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> disposing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span>disposing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disposing <span class=\"token operator\">&amp;&amp;</span> components <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> components<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                item<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering<span class=\"token punctuation\">.</span>Universal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 官方示例中，一个Renderer Feature对应一个自定义后处理效果，各个后处理相互独立，好处是灵活自由易调整；</span>\n<span class=\"token comment\">// 坏处也在此，相互独立意味着每个效果都可能要开临时RT，耗费资源比双缓冲互换要多，</span>\n<span class=\"token comment\">// 并且Renderer Feature在Renderer Data下，相对于场景中的Volume来说在代码中调用起来反而没那么方便。</span>\n<span class=\"token comment\">// 那么这里的思路便是将所有相同插入点的后处理组件放到同一个Render Pass下渲染，这样就可以做到双缓冲交换，又保持了Volume的优势。</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomPostProcessRenderPass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableRenderPass</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>CustomVolumeComponent<span class=\"token punctuation\">></span></span> volumeComponents<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 所有自定义后处理组件</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> activeComponents<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前可用的组件下标</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> profilerTag<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>ProfilingSampler<span class=\"token punctuation\">></span></span> profilingSamplers<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每个组件对应的ProfilingSampler</span>\n\n    <span class=\"token class-name\">RenderTargetHandle</span> source<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前源与目标</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> destination<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> tempRT0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时RT</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> tempRT1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;param name=\"profilerTag\">Profiler标识&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"volumeComponents\">属于该RendererPass的后处理组件&lt;/param></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> profilerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>CustomVolumeComponent<span class=\"token punctuation\">></span></span> volumeComponents<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>profilerTag <span class=\"token operator\">=</span> profilerTag<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>volumeComponents <span class=\"token operator\">=</span> volumeComponents<span class=\"token punctuation\">;</span>\n        activeComponents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>volumeComponents<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        profilingSamplers <span class=\"token operator\">=</span> volumeComponents<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProfilingSampler</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        tempRT0<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_TemporaryRenderTexture0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tempRT1<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_TemporaryRenderTexture1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 你可以在这里实现渲染逻辑。</span>\n    <span class=\"token comment\">// 使用&lt;c>ScriptableRenderContext&lt;/c>来执行绘图命令或Command Buffer</span>\n    <span class=\"token comment\">// https://docs.unity3d.com/ScriptReference/Rendering.ScriptableRenderContext.html</span>\n    <span class=\"token comment\">// 你不需要手动调用ScriptableRenderContext.submit，渲染管线会在特定位置调用它。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScriptableRenderContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">RenderingData</span> renderingData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> CommandBufferPool<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>profilerTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteCommandBuffer</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取Descriptor</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> descriptor <span class=\"token operator\">=</span> renderingData<span class=\"token punctuation\">.</span>cameraData<span class=\"token punctuation\">.</span>cameraTargetDescriptor<span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span>msaaSamples <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span>depthBufferBits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 初始化临时RT</span>\n        <span class=\"token class-name\">RenderTargetIdentifier</span> buff0<span class=\"token punctuation\">,</span> buff1<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> rt1Used <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">GetTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT0<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        buff0 <span class=\"token operator\">=</span> tempRT0<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果destination没有初始化，则需要获取RT，主要是destinaton为_AfterPostProcessTexture的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>destination <span class=\"token operator\">!=</span> RenderTargetHandle<span class=\"token punctuation\">.</span>CameraTarget <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>destination<span class=\"token punctuation\">.</span><span class=\"token function\">HasInternalRenderTargetId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cmd<span class=\"token punctuation\">.</span><span class=\"token function\">GetTemporaryRT</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 执行每个组件的Render方法</span>\n        <span class=\"token comment\">// 如果只有一个组件，则直接source -> buff0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activeComponents<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> activeComponents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProfilingScope</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> profilingSamplers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                volumeComponents<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> renderingData<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果有多个组件，则在两个RT上左右横跳</span>\n            cmd<span class=\"token punctuation\">.</span><span class=\"token function\">GetTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            buff1 <span class=\"token operator\">=</span> tempRT1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n            rt1Used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Blit</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> activeComponents<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> activeComponents<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> component <span class=\"token operator\">=</span> volumeComponents<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProfilingScope</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> profilingSamplers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    component<span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> renderingData<span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">,</span> buff1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                CoreUtils<span class=\"token punctuation\">.</span><span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buff0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> buff1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 最后blit到destination</span>\n        <span class=\"token function\">Blit</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">,</span> destination<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 释放</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT0<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rt1Used<span class=\"token punctuation\">)</span>\n            cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteCommandBuffer</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        CommandBufferPool<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// 设置后处理组件</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;returns>是否存在有效组件&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        activeComponents<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> volumeComponents<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            volumeComponents<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>volumeComponents<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                activeComponents<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> activeComponents<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// 设置渲染源和渲染目标</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RenderTargetHandle</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTargetHandle</span> destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering<span class=\"token punctuation\">.</span>Universal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// 后处理插入位置</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">CustomPostProcessInjectionPoint</span> <span class=\"token punctuation\">&#123;</span>\n    AfterOpaqueAndSky<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 天空渲染之后</span>\n    BeforePostProcess<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 内置后处理之前</span>\n    AfterPostProcess <span class=\"token comment\">// 内置后处理之后</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomVolumeComponent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">VolumeComponent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IPostProcessComponent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 插入位置</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">CustomPostProcessInjectionPoint</span> InjectionPoint <span class=\"token operator\">=></span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>AfterPostProcess<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 在同一个插入点可能会存在多个后处理组件，所以还需要一个排序编号来确定谁先谁后：</span>\n    <span class=\"token comment\">// 在InjectionPoint中的渲染顺序</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> OrderInPass <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化，将在RenderPass加入队列时调用</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 执行渲染</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommandBuffer</span> cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">RenderingData</span> renderingData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTargetIdentifier</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTargetIdentifier</span> destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> IPostProcessComponent</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回当前组件是否处于激活状态</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsTileCompatible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> IDisposable 由于渲染可能需要临时生成材质，在这里将它们释放</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> disposing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码注释较为全面了，看注释即可</p>\n<h2 id=\"22-使用方式\"><a class=\"markdownIt-Anchor\" href=\"#22-使用方式\"></a> 2.2 使用方式</h2>\n<p>我们点击CustomForwardRendererData，在Inspector界面点击Add Renderer Feature，然后新建一个Custom Post Process Renderer Feature，名称随意不影响使用，这里取名为CustomPostProcessRendererFeature</p>\n<p>有了这个RendererFeature之后，我们就能随心所欲地添加我们的自定义后处理特效了！只要我们继承实现自己的CustomVolumeComponent类就行。由于篇幅原因，这部分内容放下一章讲。在这之前，这里先说明一下URP中默认提供的一些后处理特效，也是Volume的基本使用吧</p>\n<p>在Hierarchy右键，新建一个Volume/Global Volume，我们可以在Inspector界面中看到它需要传入一个Profile，这里我们在Project中右键Create/Volume Profile，名称就叫GlobalVolumeProfile好了。创建结束之后将其拖到Profile中。完成这一步之后，我们就可以给这个Profile添加各种后处理特效了，我们点击Global Volume的Inspector界面的Add Override，新增一个Bloom特效，现在我们试一下勾上这个特效的Threshold盒Intensity，数值分别填入0.5和1，我们就可以直接在Scene界面和Game界面观察到图片变亮了（请自己在场景放一张图片），有了Bloom的特效</p>\n<p>好了，我们下一章见</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-关于urpuniversal-render-pipeline\"><a class=\"markdownIt-Anchor\" href=\"#一-关于urpuniversal-render-pipeline\"></a> 一、关于URP（Universal Render Pipeline）</h1>\n<h2 id=\"11-什么是urp\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是urp\"></a> 1.1 什么是URP</h2>\n<p>关于URP，在Package Mananger中，官方是这样描述的：</p>\n<blockquote>\n<p><strong>The Universal Render Pipeline (URP)</strong> is a prebuilt <strong>Scriptable Render Pipeline</strong>, made by Unity. URP provides artist-friendly workflows that let you quickly and easily create optimized graphics across a range of platforms, from mobile to high-end consoles and PCs.</p>\n<p><strong>通用渲染管线（Universal Render Pipeline，URP）<strong>是一个由Unity官方开发的预构建的</strong>可编程渲染管线（Scriptable Render Pipeline，SRP）</strong>。URP提供了能让你快速轻松地在一系列平台，从手机到高端游戏机和电脑上创建优化图像的艺术家友好型的工作流。</p>\n</blockquote>\n<p>说到URP，就得说SRP是什么，说到SRP就得说RP是什么…这里暂时不表，后续再补充说明，详见https://zhuanlan.zhihu.com/p/103457229</p>\n<h2 id=\"12-我为什么用urp\"><a class=\"markdownIt-Anchor\" href=\"#12-我为什么用urp\"></a> 1.2 我为什么用URP</h2>\n<p>主要原因是因为URP提供了2D光照系统，可以很方便快速地布置光照</p>\n<h2 id=\"13-怎么切换成urp\"><a class=\"markdownIt-Anchor\" href=\"#13-怎么切换成urp\"></a> 1.3 怎么切换成URP</h2>\n<h3 id=\"131-安装urp\"><a class=\"markdownIt-Anchor\" href=\"#131-安装urp\"></a> 1.3.1 安装URP</h3>\n<p>本文使用的Unity版本为在2020.3.27f1c1，我们打开Unity的Window/Package Manager，Packages选择Unity Registry，可以找到Universal RP的包，点击Install进行安装</p>\n<h3 id=\"132-新建urpasset\"><a class=\"markdownIt-Anchor\" href=\"#132-新建urpasset\"></a> 1.3.2 新建URPAsset</h3>\n<p>在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/Pipeline Asset(Forward Renderer)新建一个URPAsset，默认名称是UniversalRenderPipelineAsset，我们可以改名为URPAsset。新建之后还会跟着多出一个叫UniversalRenderPipelineAsset_Renderder的文件，点击URPAsset，可以看到Inspector窗口中的General/RendererList已经自动放好了这个默认的文件。它是一个称之为Forward Renderer的文件，可以在Create/Rendering/中找到。由于我们的后处理特效是通过这个文件来设置的，因此我们可以将这个文件改名为CustomForwardRendererData。</p>\n<h3 id=\"133-切换为默认是支持2d光照的2drenderer且保留customforwardrendererdata\"><a class=\"markdownIt-Anchor\" href=\"#133-切换为默认是支持2d光照的2drenderer且保留customforwardrendererdata\"></a> 1.3.3 切换为默认是支持2D光照的2DRenderer，且保留CustomForwardRendererData</h3>\n<p>在Project窗口中，选一个位置右键，点Create/Rendering/Universal Render Pipeline/2D Renderer(Experimental)新建一个2D Renderer，默认名称是New 2D Renderer，我们可以改名为2DRenderer。将该2DRenderer放入上面第2步创建的URPAsset文件的Inspector窗口中的General/RendererList的0号位置中，替换掉原来默认的CustomForwardRendererData。这个CustomForwardRendererData还应该加回去来做2DRenderer无法实现的功能，因此我们点击Inspector窗口中的General/Renderer List中的+，新增一行然后将CustomForwardRendererData拖进去</p>\n<h3 id=\"134-切换为urp渲染管线\"><a class=\"markdownIt-Anchor\" href=\"#134-切换为urp渲染管线\"></a> 1.3.4 切换为URP渲染管线</h3>\n<p>打开Unity的Edit/Project Settings/Graphics，将URPAsset拖入Scriptable Render Pipeline Settings一栏中，到此即可切换为URP渲染管线了</p>\n<h1 id=\"二-兼容2d光照的urp自定义后处理特效\"><a class=\"markdownIt-Anchor\" href=\"#二-兼容2d光照的urp自定义后处理特效\"></a> 二、兼容2D光照的URP自定义后处理特效</h1>\n<p>此部分内容主要参考自B站一位大佬的架构设计，非常感谢分享了这样一个方便的架构！<a href=\"https://www.bilibili.com/video/av588100663/\">https://www.bilibili.com/video/av588100663/</a></p>\n<h2 id=\"21-架构设计\"><a class=\"markdownIt-Anchor\" href=\"#21-架构设计\"></a> 2.1 架构设计</h2>\n<p><img src=\"/img/CustomPostProcessing.png\" alt=\"\" /></p>\n<p>架构图如上，其具体代码为：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering<span class=\"token punctuation\">.</span>Universal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomPostProcessRendererFeature</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableRendererFeature</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 不同插入点的render pass</span>\n    <span class=\"token class-name\">CustomPostProcessRenderPass</span> afterOpaqueAndSky<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">CustomPostProcessRenderPass</span> beforePostProcess<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">CustomPostProcessRenderPass</span> afterPostProcess<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 所有自定义的VolumeComponent</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>CustomVolumeComponent<span class=\"token punctuation\">></span></span> components<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 用于after PostProcess的render target</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> afterPostProcessTexture<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddRenderPasses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScriptableRenderer</span> renderer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">RenderingData</span> renderingData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// CustomPostProcessRenderPass中定义了一个变量activeComponents来存储当前可用的的后处理组件，</span>\n        <span class=\"token comment\">// 在Render Feature的AddRenderPasses中，需要先判断Render Pass中是否有组件处于激活状态，</span>\n        <span class=\"token comment\">// 如果没有一个组件激活，那么就没必要添加这个Render Pass，</span>\n        <span class=\"token comment\">// 这里调用先前在组件中定义好的Setup方法初始化，随后调用IsActive判断其是否处于激活状态</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>renderingData<span class=\"token punctuation\">.</span>cameraData<span class=\"token punctuation\">.</span>postProcessEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 为每个render pass设置render target</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RenderTargetHandle</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">.</span>cameraColorTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>afterOpaqueAndSky<span class=\"token punctuation\">.</span><span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                afterOpaqueAndSky<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                renderer<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueuePass</span><span class=\"token punctuation\">(</span>afterOpaqueAndSky<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beforePostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                beforePostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                renderer<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueuePass</span><span class=\"token punctuation\">(</span>beforePostProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>afterPostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 如果下一个Pass是FinalBlit，则输入与输出均为_AfterPostProcessTexture</span>\n                source <span class=\"token operator\">=</span> <span class=\"token class-name\">renderingData<span class=\"token punctuation\">.</span>cameraData<span class=\"token punctuation\">.</span>resolveFinalTarget <span class=\"token punctuation\">?</span></span> afterPostProcessTexture <span class=\"token punctuation\">:</span> source<span class=\"token punctuation\">;</span>\n                afterPostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                renderer<span class=\"token punctuation\">.</span><span class=\"token function\">EnqueuePass</span><span class=\"token punctuation\">(</span>afterPostProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 初始化Feature资源，每当序列化发生时都会调用</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 从VolumeManager获取所有自定义的VolumeComponent</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stack <span class=\"token operator\">=</span> VolumeManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">;</span>\n        components <span class=\"token operator\">=</span> VolumeManager<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>baseComponentTypeArray\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">IsSubclassOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CustomVolumeComponent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">CustomVolumeComponent</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 初始化不同插入点的render pass</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> afterOpaqueAndSkyComponents <span class=\"token operator\">=</span> components\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>InjectionPoint <span class=\"token operator\">==</span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>AfterOpaqueAndSky<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OrderInPass<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        afterOpaqueAndSky <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custom PostProcess after Opaque and Sky\"</span><span class=\"token punctuation\">,</span> afterOpaqueAndSkyComponents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        afterOpaqueAndSky<span class=\"token punctuation\">.</span>renderPassEvent <span class=\"token operator\">=</span> RenderPassEvent<span class=\"token punctuation\">.</span>AfterRenderingOpaques<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> beforePostProcessComponents <span class=\"token operator\">=</span> components\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>InjectionPoint <span class=\"token operator\">==</span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>BeforePostProcess<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OrderInPass<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beforePostProcess <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custom PostProcess before PostProcess\"</span><span class=\"token punctuation\">,</span> beforePostProcessComponents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beforePostProcess<span class=\"token punctuation\">.</span>renderPassEvent <span class=\"token operator\">=</span> RenderPassEvent<span class=\"token punctuation\">.</span>BeforeRenderingPostProcessing<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> afterPostProcessComponents <span class=\"token operator\">=</span> components\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>InjectionPoint <span class=\"token operator\">==</span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>AfterPostProcess<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>OrderInPass<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        afterPostProcess <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custom PostProcess after PostProcess\"</span><span class=\"token punctuation\">,</span> afterPostProcessComponents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 为了确保输入为_AfterPostProcessTexture，这里插入到AfterRendering而不是AfterRenderingPostProcessing</span>\n        afterPostProcess<span class=\"token punctuation\">.</span>renderPassEvent <span class=\"token operator\">=</span> RenderPassEvent<span class=\"token punctuation\">.</span>AfterRendering<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 初始化用于after PostProcess的render target</span>\n        afterPostProcessTexture<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_AfterPostProcessTexture\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 资源释放</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> disposing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span>disposing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disposing <span class=\"token operator\">&amp;&amp;</span> components <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> components<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                item<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering<span class=\"token punctuation\">.</span>Universal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 官方示例中，一个Renderer Feature对应一个自定义后处理效果，各个后处理相互独立，好处是灵活自由易调整；</span>\n<span class=\"token comment\">// 坏处也在此，相互独立意味着每个效果都可能要开临时RT，耗费资源比双缓冲互换要多，</span>\n<span class=\"token comment\">// 并且Renderer Feature在Renderer Data下，相对于场景中的Volume来说在代码中调用起来反而没那么方便。</span>\n<span class=\"token comment\">// 那么这里的思路便是将所有相同插入点的后处理组件放到同一个Render Pass下渲染，这样就可以做到双缓冲交换，又保持了Volume的优势。</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomPostProcessRenderPass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableRenderPass</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>CustomVolumeComponent<span class=\"token punctuation\">></span></span> volumeComponents<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 所有自定义后处理组件</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> activeComponents<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前可用的组件下标</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> profilerTag<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>ProfilingSampler<span class=\"token punctuation\">></span></span> profilingSamplers<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每个组件对应的ProfilingSampler</span>\n\n    <span class=\"token class-name\">RenderTargetHandle</span> source<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前源与目标</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> destination<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> tempRT0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时RT</span>\n    <span class=\"token class-name\">RenderTargetHandle</span> tempRT1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;param name=\"profilerTag\">Profiler标识&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"volumeComponents\">属于该RendererPass的后处理组件&lt;/param></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CustomPostProcessRenderPass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> profilerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>CustomVolumeComponent<span class=\"token punctuation\">></span></span> volumeComponents<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>profilerTag <span class=\"token operator\">=</span> profilerTag<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>volumeComponents <span class=\"token operator\">=</span> volumeComponents<span class=\"token punctuation\">;</span>\n        activeComponents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>volumeComponents<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        profilingSamplers <span class=\"token operator\">=</span> volumeComponents<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProfilingSampler</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        tempRT0<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_TemporaryRenderTexture0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tempRT1<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_TemporaryRenderTexture1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 你可以在这里实现渲染逻辑。</span>\n    <span class=\"token comment\">// 使用&lt;c>ScriptableRenderContext&lt;/c>来执行绘图命令或Command Buffer</span>\n    <span class=\"token comment\">// https://docs.unity3d.com/ScriptReference/Rendering.ScriptableRenderContext.html</span>\n    <span class=\"token comment\">// 你不需要手动调用ScriptableRenderContext.submit，渲染管线会在特定位置调用它。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScriptableRenderContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">RenderingData</span> renderingData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> CommandBufferPool<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>profilerTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteCommandBuffer</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取Descriptor</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> descriptor <span class=\"token operator\">=</span> renderingData<span class=\"token punctuation\">.</span>cameraData<span class=\"token punctuation\">.</span>cameraTargetDescriptor<span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span>msaaSamples <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span>depthBufferBits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 初始化临时RT</span>\n        <span class=\"token class-name\">RenderTargetIdentifier</span> buff0<span class=\"token punctuation\">,</span> buff1<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> rt1Used <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">GetTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT0<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        buff0 <span class=\"token operator\">=</span> tempRT0<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果destination没有初始化，则需要获取RT，主要是destinaton为_AfterPostProcessTexture的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>destination <span class=\"token operator\">!=</span> RenderTargetHandle<span class=\"token punctuation\">.</span>CameraTarget <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>destination<span class=\"token punctuation\">.</span><span class=\"token function\">HasInternalRenderTargetId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cmd<span class=\"token punctuation\">.</span><span class=\"token function\">GetTemporaryRT</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 执行每个组件的Render方法</span>\n        <span class=\"token comment\">// 如果只有一个组件，则直接source -> buff0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activeComponents<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> activeComponents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProfilingScope</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> profilingSamplers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                volumeComponents<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> renderingData<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果有多个组件，则在两个RT上左右横跳</span>\n            cmd<span class=\"token punctuation\">.</span><span class=\"token function\">GetTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            buff1 <span class=\"token operator\">=</span> tempRT1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n            rt1Used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Blit</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> activeComponents<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> activeComponents<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> component <span class=\"token operator\">=</span> volumeComponents<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProfilingScope</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> profilingSamplers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    component<span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> renderingData<span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">,</span> buff1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                CoreUtils<span class=\"token punctuation\">.</span><span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buff0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> buff1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 最后blit到destination</span>\n        <span class=\"token function\">Blit</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff0<span class=\"token punctuation\">,</span> destination<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 释放</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT0<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rt1Used<span class=\"token punctuation\">)</span>\n            cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseTemporaryRT</span><span class=\"token punctuation\">(</span>tempRT1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteCommandBuffer</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        CommandBufferPool<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// 设置后处理组件</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;returns>是否存在有效组件&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">SetupComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        activeComponents<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> volumeComponents<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            volumeComponents<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>volumeComponents<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                activeComponents<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> activeComponents<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// 设置渲染源和渲染目标</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RenderTargetHandle</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTargetHandle</span> destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering<span class=\"token punctuation\">.</span>Universal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// 后处理插入位置</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">CustomPostProcessInjectionPoint</span> <span class=\"token punctuation\">&#123;</span>\n    AfterOpaqueAndSky<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 天空渲染之后</span>\n    BeforePostProcess<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 内置后处理之前</span>\n    AfterPostProcess <span class=\"token comment\">// 内置后处理之后</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomVolumeComponent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">VolumeComponent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IPostProcessComponent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 插入位置</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">CustomPostProcessInjectionPoint</span> InjectionPoint <span class=\"token operator\">=></span> CustomPostProcessInjectionPoint<span class=\"token punctuation\">.</span>AfterPostProcess<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 在同一个插入点可能会存在多个后处理组件，所以还需要一个排序编号来确定谁先谁后：</span>\n    <span class=\"token comment\">// 在InjectionPoint中的渲染顺序</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> OrderInPass <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化，将在RenderPass加入队列时调用</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 执行渲染</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommandBuffer</span> cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">RenderingData</span> renderingData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTargetIdentifier</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTargetIdentifier</span> destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> IPostProcessComponent</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回当前组件是否处于激活状态</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsTileCompatible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> IDisposable 由于渲染可能需要临时生成材质，在这里将它们释放</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> disposing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码注释较为全面了，看注释即可</p>\n<h2 id=\"22-使用方式\"><a class=\"markdownIt-Anchor\" href=\"#22-使用方式\"></a> 2.2 使用方式</h2>\n<p>我们点击CustomForwardRendererData，在Inspector界面点击Add Renderer Feature，然后新建一个Custom Post Process Renderer Feature，名称随意不影响使用，这里取名为CustomPostProcessRendererFeature</p>\n<p>有了这个RendererFeature之后，我们就能随心所欲地添加我们的自定义后处理特效了！只要我们继承实现自己的CustomVolumeComponent类就行。由于篇幅原因，这部分内容放下一章讲。在这之前，这里先说明一下URP中默认提供的一些后处理特效，也是Volume的基本使用吧</p>\n<p>在Hierarchy右键，新建一个Volume/Global Volume，我们可以在Inspector界面中看到它需要传入一个Profile，这里我们在Project中右键Create/Volume Profile，名称就叫GlobalVolumeProfile好了。创建结束之后将其拖到Profile中。完成这一步之后，我们就可以给这个Profile添加各种后处理特效了，我们点击Global Volume的Inspector界面的Add Override，新增一个Bloom特效，现在我们试一下勾上这个特效的Threshold盒Intensity，数值分别填入0.5和1，我们就可以直接在Scene界面和Game界面观察到图片变亮了（请自己在场景放一张图片），有了Bloom的特效</p>\n<p>好了，我们下一章见</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl04wml3x0001jowz7yenb4k1","category_id":"cl04wml440003jowzh4tp2shy","_id":"cl04wml4e000ejowz0get008x"},{"post_id":"cl04wml420002jowz79vp6xvk","category_id":"cl04wml440003jowzh4tp2shy","_id":"cl04wml4j000jjowzh3zb93us"},{"post_id":"cl04wml460005jowzbq69ctcm","category_id":"cl04wml4e000djowzeek2hdhf","_id":"cl04wml4k000njowz4a8a6jg2"},{"post_id":"cl04wml490006jowze9hwa1pb","category_id":"cl04wml4j000kjowzb46u1vnc","_id":"cl04wml4k000qjowz345i8jva"},{"post_id":"cl04wml4a0007jowz97z457wd","category_id":"cl04wml4k000ojowzbw8ih5qb","_id":"cl04wml4l000ujowz11we9fcj"},{"post_id":"cl04wml4c000bjowz2kn719bw","category_id":"cl04wml4j000kjowzb46u1vnc","_id":"cl04wml4n000yjowz8r0ecl8l"},{"post_id":"cl04wml4d000cjowz1izlgq4b","category_id":"cl04wml4j000kjowzb46u1vnc","_id":"cl04wml4n0012jowzbs0r2etr"},{"post_id":"cl04wml4g000hjowzgb4n6t8p","category_id":"cl04wml4m000xjowz8f8e0kj6","_id":"cl04wml4o0016jowz8rt8duyy"},{"post_id":"cl04wml4i000ijowzewsk7viy","category_id":"cl04wml4n0014jowzc2dy0kjv","_id":"cl04wml4p0018jowzcvoz35bg"},{"post_id":"cl04wml4s001ljowzcaoidggw","category_id":"cl04wml4j000kjowzb46u1vnc","_id":"cl04wml4u001rjowzh80shde5"},{"post_id":"cl04wml4t001ojowz129520b4","category_id":"cl04wml4j000kjowzb46u1vnc","_id":"cl04wml4v001tjowz3wwof4xe"},{"post_id":"cl04wml4s001kjowzb0dt64ie","category_id":"cl04wml4t001mjowz00ps69pc","_id":"cl04wml4v001vjowz0bie8wrx"}],"PostTag":[{"post_id":"cl04wml3x0001jowz7yenb4k1","tag_id":"cl04wml450004jowz819zcura","_id":"cl04wml4c000ajowz2qeqdect"},{"post_id":"cl04wml420002jowz79vp6xvk","tag_id":"cl04wml450004jowz819zcura","_id":"cl04wml4f000gjowz3d3fdp94"},{"post_id":"cl04wml460005jowzbq69ctcm","tag_id":"cl04wml4e000fjowz09ykh5e9","_id":"cl04wml4j000mjowzfdoa4lgc"},{"post_id":"cl04wml490006jowze9hwa1pb","tag_id":"cl04wml4j000ljowz307odq06","_id":"cl04wml4m000wjowz2bxp5kxp"},{"post_id":"cl04wml490006jowze9hwa1pb","tag_id":"cl04wml4k000pjowz4hfzcn6s","_id":"cl04wml4n000zjowzata3ddtu"},{"post_id":"cl04wml490006jowze9hwa1pb","tag_id":"cl04wml4l000sjowz2frw8wyy","_id":"cl04wml4n0011jowzcn1bgjrm"},{"post_id":"cl04wml4a0007jowz97z457wd","tag_id":"cl04wml4m000vjowz5fidda42","_id":"cl04wml4n0013jowzek987w3e"},{"post_id":"cl04wml4c000bjowz2kn719bw","tag_id":"cl04wml4j000ljowz307odq06","_id":"cl04wml4p001ajowz185aa9dq"},{"post_id":"cl04wml4c000bjowz2kn719bw","tag_id":"cl04wml4o0015jowzd99t8dj6","_id":"cl04wml4p001bjowz7yv0c1fn"},{"post_id":"cl04wml4c000bjowz2kn719bw","tag_id":"cl04wml4e000fjowz09ykh5e9","_id":"cl04wml4p001djowzb9ts2gez"},{"post_id":"cl04wml4d000cjowz1izlgq4b","tag_id":"cl04wml4j000ljowz307odq06","_id":"cl04wml4q001fjowzd2bcgovx"},{"post_id":"cl04wml4d000cjowz1izlgq4b","tag_id":"cl04wml4p001cjowzgipi7kv6","_id":"cl04wml4q001gjowzgf7y7jqz"},{"post_id":"cl04wml4g000hjowzgb4n6t8p","tag_id":"cl04wml4q001ejowze1gdbh9f","_id":"cl04wml4q001ijowz25vz5ljl"},{"post_id":"cl04wml4i000ijowzewsk7viy","tag_id":"cl04wml4q001hjowz3v9wg4yd","_id":"cl04wml4q001jjowz8otbcop6"},{"post_id":"cl04wml4s001ljowzcaoidggw","tag_id":"cl04wml4j000ljowz307odq06","_id":"cl04wml4u001pjowzedrl98i6"},{"post_id":"cl04wml4s001ljowzcaoidggw","tag_id":"cl04wml4k000pjowz4hfzcn6s","_id":"cl04wml4u001qjowzgt3qh37y"},{"post_id":"cl04wml4s001ljowzcaoidggw","tag_id":"cl04wml4l000sjowz2frw8wyy","_id":"cl04wml4v001sjowzfjqe2zqj"},{"post_id":"cl04wml4t001ojowz129520b4","tag_id":"cl04wml4j000ljowz307odq06","_id":"cl04wml4v001ujowzfd5qgg4p"},{"post_id":"cl04wml4t001ojowz129520b4","tag_id":"cl04wml4k000pjowz4hfzcn6s","_id":"cl04wml4v001wjowza2x02o27"},{"post_id":"cl04wml4t001ojowz129520b4","tag_id":"cl04wml4l000sjowz2frw8wyy","_id":"cl04wml4v001xjowzc1w57fgv"},{"post_id":"cl04wml4s001kjowzb0dt64ie","tag_id":"cl04wml4t001njowzbe812e3s","_id":"cl04wml4v001yjowz491y0xpa"}],"Tag":[{"name":"Game-Jam","_id":"cl04wml450004jowz819zcura"},{"name":"CSharp","_id":"cl04wml4e000fjowz09ykh5e9"},{"name":"Unity","_id":"cl04wml4j000ljowz307odq06"},{"name":"URP","_id":"cl04wml4k000pjowz4hfzcn6s"},{"name":"PostEffect","_id":"cl04wml4l000sjowz2frw8wyy"},{"name":"Shader","_id":"cl04wml4m000vjowz5fidda42"},{"name":"Network","_id":"cl04wml4o0015jowzd99t8dj6"},{"name":"Particle","_id":"cl04wml4p001cjowzgipi7kv6"},{"name":"Recommendation","_id":"cl04wml4q001ejowze1gdbh9f"},{"name":"C","_id":"cl04wml4q001hjowz3v9wg4yd"},{"name":"Resume","_id":"cl04wml4t001njowzbe812e3s"}]}}